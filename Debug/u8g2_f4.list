
u8g2_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f94  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092dc  080092dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080092dc  080092dc  000192dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092e4  080092e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092e4  080092e4  000192e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092e8  080092e8  000192e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080092ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  2000000c  080092f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  20000668  080092f8  00020668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007dc56  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aeb  00000000  00000000  0009dc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d18  00000000  00000000  000a2780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002af8  00000000  00000000  000a5498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024462  00000000  00000000  000a7f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000230c0  00000000  00000000  000cc3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3b46  00000000  00000000  000ef4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d2ff8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c21c  00000000  00000000  001d304c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006330 	.word	0x08006330

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006330 	.word	0x08006330

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
 80004da:	4b2d      	ldr	r3, [pc, #180]	; (8000590 <MX_GPIO_Init+0xd0>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a2c      	ldr	r2, [pc, #176]	; (8000590 <MX_GPIO_Init+0xd0>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b2a      	ldr	r3, [pc, #168]	; (8000590 <MX_GPIO_Init+0xd0>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	4b26      	ldr	r3, [pc, #152]	; (8000590 <MX_GPIO_Init+0xd0>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a25      	ldr	r2, [pc, #148]	; (8000590 <MX_GPIO_Init+0xd0>)
 80004fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b23      	ldr	r3, [pc, #140]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a17      	ldr	r2, [pc, #92]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000534:	f043 0308 	orr.w	r3, r3, #8
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <MX_GPIO_Init+0xd0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0308 	and.w	r3, r3, #8
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_GPIO_Init+0xd0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a10      	ldr	r2, [pc, #64]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2102      	movs	r1, #2
 8000566:	480b      	ldr	r0, [pc, #44]	; (8000594 <MX_GPIO_Init+0xd4>)
 8000568:	f003 fc30 	bl	8003dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800056c:	2302      	movs	r3, #2
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	2300      	movs	r3, #0
 800057a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4619      	mov	r1, r3
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <MX_GPIO_Init+0xd4>)
 8000584:	f003 fa86 	bl	8003a94 <HAL_GPIO_Init>

}
 8000588:	bf00      	nop
 800058a:	3728      	adds	r7, #40	; 0x28
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40023800 	.word	0x40023800
 8000594:	40020000 	.word	0x40020000

08000598 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <MX_I2C1_Init+0x50>)
 800059e:	4a13      	ldr	r2, [pc, #76]	; (80005ec <MX_I2C1_Init+0x54>)
 80005a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005a4:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <MX_I2C1_Init+0x58>)
 80005a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005be:	2200      	movs	r2, #0
 80005c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005d6:	f003 fc13 	bl	8003e00 <HAL_I2C_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005e0:	f000 fb0a 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200004d8 	.word	0x200004d8
 80005ec:	40005400 	.word	0x40005400
 80005f0:	00061a80 	.word	0x00061a80

080005f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a19      	ldr	r2, [pc, #100]	; (8000678 <HAL_I2C_MspInit+0x84>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d12b      	bne.n	800066e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <HAL_I2C_MspInit+0x88>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <HAL_I2C_MspInit+0x88>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_I2C_MspInit+0x88>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000632:	23c0      	movs	r3, #192	; 0xc0
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000636:	2312      	movs	r3, #18
 8000638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800063a:	2301      	movs	r3, #1
 800063c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000642:	2304      	movs	r3, #4
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <HAL_I2C_MspInit+0x8c>)
 800064e:	f003 fa21 	bl	8003a94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_I2C_MspInit+0x88>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a08      	ldr	r2, [pc, #32]	; (800067c <HAL_I2C_MspInit+0x88>)
 800065c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_I2C_MspInit+0x88>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	; 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40005400 	.word	0x40005400
 800067c:	40023800 	.word	0x40023800
 8000680:	40020400 	.word	0x40020400

08000684 <u8g2_prepare>:

/*
  Function which responds for drawing
  */
void u8g2_prepare()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  u8g2_SetFont(&u8g2, u8g2_font_courB10_tr);
 8000688:	4909      	ldr	r1, [pc, #36]	; (80006b0 <u8g2_prepare+0x2c>)
 800068a:	480a      	ldr	r0, [pc, #40]	; (80006b4 <u8g2_prepare+0x30>)
 800068c:	f001 ff4c 	bl	8002528 <u8g2_SetFont>
  u8g2_SetFontRefHeightExtendedText(&u8g2);
 8000690:	4808      	ldr	r0, [pc, #32]	; (80006b4 <u8g2_prepare+0x30>)
 8000692:	f001 fefd 	bl	8002490 <u8g2_SetFontRefHeightExtendedText>
  u8g2_SetDrawColor(&u8g2, 1);
 8000696:	2101      	movs	r1, #1
 8000698:	4806      	ldr	r0, [pc, #24]	; (80006b4 <u8g2_prepare+0x30>)
 800069a:	f002 f8c6 	bl	800282a <u8g2_SetDrawColor>
  u8g2_SetFontPosTop(&u8g2);
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <u8g2_prepare+0x30>)
 80006a0:	f001 ff32 	bl	8002508 <u8g2_SetFontPosTop>
  u8g2_SetFontDirection(&u8g2, 0);
 80006a4:	2100      	movs	r1, #0
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <u8g2_prepare+0x30>)
 80006a8:	f001 ff58 	bl	800255c <u8g2_SetFontDirection>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	0800675c 	.word	0x0800675c
 80006b4:	20000028 	.word	0x20000028

080006b8 <u8g2_drawLogo>:

void u8g2_drawLogo(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
    u8g2_SetFontMode(&u8g2,1);	// Transparent
 80006bc:	2101      	movs	r1, #1
 80006be:	482d      	ldr	r0, [pc, #180]	; (8000774 <u8g2_drawLogo+0xbc>)
 80006c0:	f001 fda1 	bl	8002206 <u8g2_SetFontMode>
    u8g2_SetDrawColor(&u8g2,1);
 80006c4:	2101      	movs	r1, #1
 80006c6:	482b      	ldr	r0, [pc, #172]	; (8000774 <u8g2_drawLogo+0xbc>)
 80006c8:	f002 f8af 	bl	800282a <u8g2_SetDrawColor>

   u8g2_SetFontDirection(&u8g2, 0);
 80006cc:	2100      	movs	r1, #0
 80006ce:	4829      	ldr	r0, [pc, #164]	; (8000774 <u8g2_drawLogo+0xbc>)
 80006d0:	f001 ff44 	bl	800255c <u8g2_SetFontDirection>
   u8g2_SetFont(&u8g2, u8g2_font_inb24_mf);
 80006d4:	4928      	ldr	r1, [pc, #160]	; (8000778 <u8g2_drawLogo+0xc0>)
 80006d6:	4827      	ldr	r0, [pc, #156]	; (8000774 <u8g2_drawLogo+0xbc>)
 80006d8:	f001 ff26 	bl	8002528 <u8g2_SetFont>
   u8g2_DrawStr(&u8g2, 0, 5, "U");
 80006dc:	4b27      	ldr	r3, [pc, #156]	; (800077c <u8g2_drawLogo+0xc4>)
 80006de:	2205      	movs	r2, #5
 80006e0:	2100      	movs	r1, #0
 80006e2:	4824      	ldr	r0, [pc, #144]	; (8000774 <u8g2_drawLogo+0xbc>)
 80006e4:	f001 fe4e 	bl	8002384 <u8g2_DrawStr>

   u8g2_SetFontDirection(&u8g2, 1);
 80006e8:	2101      	movs	r1, #1
 80006ea:	4822      	ldr	r0, [pc, #136]	; (8000774 <u8g2_drawLogo+0xbc>)
 80006ec:	f001 ff36 	bl	800255c <u8g2_SetFontDirection>
   u8g2_SetFont(&u8g2, u8g2_font_inb30_mn);
 80006f0:	4923      	ldr	r1, [pc, #140]	; (8000780 <u8g2_drawLogo+0xc8>)
 80006f2:	4820      	ldr	r0, [pc, #128]	; (8000774 <u8g2_drawLogo+0xbc>)
 80006f4:	f001 ff18 	bl	8002528 <u8g2_SetFont>
   u8g2_DrawStr(&u8g2, 51,8,"8");
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <u8g2_drawLogo+0xcc>)
 80006fa:	2208      	movs	r2, #8
 80006fc:	2133      	movs	r1, #51	; 0x33
 80006fe:	481d      	ldr	r0, [pc, #116]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000700:	f001 fe40 	bl	8002384 <u8g2_DrawStr>

   u8g2_SetFontDirection(&u8g2, 0);
 8000704:	2100      	movs	r1, #0
 8000706:	481b      	ldr	r0, [pc, #108]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000708:	f001 ff28 	bl	800255c <u8g2_SetFontDirection>
   u8g2_SetFont(&u8g2, u8g2_font_inb24_mf);
 800070c:	491a      	ldr	r1, [pc, #104]	; (8000778 <u8g2_drawLogo+0xc0>)
 800070e:	4819      	ldr	r0, [pc, #100]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000710:	f001 ff0a 	bl	8002528 <u8g2_SetFont>
   u8g2_DrawStr(&u8g2, 51,5,"g");
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <u8g2_drawLogo+0xd0>)
 8000716:	2205      	movs	r2, #5
 8000718:	2133      	movs	r1, #51	; 0x33
 800071a:	4816      	ldr	r0, [pc, #88]	; (8000774 <u8g2_drawLogo+0xbc>)
 800071c:	f001 fe32 	bl	8002384 <u8g2_DrawStr>
   u8g2_DrawStr(&u8g2, 67,5,"\xb2");
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <u8g2_drawLogo+0xd4>)
 8000722:	2205      	movs	r2, #5
 8000724:	2143      	movs	r1, #67	; 0x43
 8000726:	4813      	ldr	r0, [pc, #76]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000728:	f001 fe2c 	bl	8002384 <u8g2_DrawStr>

   u8g2_DrawHLine(&u8g2, 2, 35, 47);
 800072c:	232f      	movs	r3, #47	; 0x2f
 800072e:	2223      	movs	r2, #35	; 0x23
 8000730:	2102      	movs	r1, #2
 8000732:	4810      	ldr	r0, [pc, #64]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000734:	f002 f814 	bl	8002760 <u8g2_DrawHLine>
   u8g2_DrawHLine(&u8g2, 3, 36, 47);
 8000738:	232f      	movs	r3, #47	; 0x2f
 800073a:	2224      	movs	r2, #36	; 0x24
 800073c:	2103      	movs	r1, #3
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000740:	f002 f80e 	bl	8002760 <u8g2_DrawHLine>
   u8g2_DrawVLine(&u8g2, 45, 32, 12);
 8000744:	230c      	movs	r3, #12
 8000746:	2220      	movs	r2, #32
 8000748:	212d      	movs	r1, #45	; 0x2d
 800074a:	480a      	ldr	r0, [pc, #40]	; (8000774 <u8g2_drawLogo+0xbc>)
 800074c:	f002 f821 	bl	8002792 <u8g2_DrawVLine>
   u8g2_DrawVLine(&u8g2, 46, 33, 12);
 8000750:	230c      	movs	r3, #12
 8000752:	2221      	movs	r2, #33	; 0x21
 8000754:	212e      	movs	r1, #46	; 0x2e
 8000756:	4807      	ldr	r0, [pc, #28]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000758:	f002 f81b 	bl	8002792 <u8g2_DrawVLine>

   u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);
 800075c:	490c      	ldr	r1, [pc, #48]	; (8000790 <u8g2_drawLogo+0xd8>)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000760:	f001 fee2 	bl	8002528 <u8g2_SetFont>

   u8g2_DrawStr(&u8g2, 1,54,"github.com/olikraus/u8g2");
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <u8g2_drawLogo+0xdc>)
 8000766:	2236      	movs	r2, #54	; 0x36
 8000768:	2101      	movs	r1, #1
 800076a:	4802      	ldr	r0, [pc, #8]	; (8000774 <u8g2_drawLogo+0xbc>)
 800076c:	f001 fe0a 	bl	8002384 <u8g2_DrawStr>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000028 	.word	0x20000028
 8000778:	08006cb0 	.word	0x08006cb0
 800077c:	08006348 	.word	0x08006348
 8000780:	08008f2c 	.word	0x08008f2c
 8000784:	0800634c 	.word	0x0800634c
 8000788:	08006350 	.word	0x08006350
 800078c:	08006354 	.word	0x08006354
 8000790:	080063e4 	.word	0x080063e4
 8000794:	08006358 	.word	0x08006358

08000798 <u8g2_box_frame>:

void u8g2_box_frame(uint8_t a)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af02      	add	r7, sp, #8
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  u8g2_DrawStr(&u8g2, 0,0, "DrawBox");
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <u8g2_box_frame+0x6c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	4817      	ldr	r0, [pc, #92]	; (8000808 <u8g2_box_frame+0x70>)
 80007aa:	f001 fdeb 	bl	8002384 <u8g2_DrawStr>
  u8g2_DrawBox(&u8g2,0,15,20,10);
 80007ae:	230a      	movs	r3, #10
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	2314      	movs	r3, #20
 80007b4:	220f      	movs	r2, #15
 80007b6:	2100      	movs	r1, #0
 80007b8:	4813      	ldr	r0, [pc, #76]	; (8000808 <u8g2_box_frame+0x70>)
 80007ba:	f000 fd37 	bl	800122c <u8g2_DrawBox>
  u8g2_DrawBox(&u8g2,0+a,15,30,7);
 80007be:	79f9      	ldrb	r1, [r7, #7]
 80007c0:	2307      	movs	r3, #7
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	231e      	movs	r3, #30
 80007c6:	220f      	movs	r2, #15
 80007c8:	480f      	ldr	r0, [pc, #60]	; (8000808 <u8g2_box_frame+0x70>)
 80007ca:	f000 fd2f 	bl	800122c <u8g2_DrawBox>
  u8g2_DrawStr(&u8g2, 0, 32, "DrawFrame");
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <u8g2_box_frame+0x74>)
 80007d0:	2220      	movs	r2, #32
 80007d2:	2100      	movs	r1, #0
 80007d4:	480c      	ldr	r0, [pc, #48]	; (8000808 <u8g2_box_frame+0x70>)
 80007d6:	f001 fdd5 	bl	8002384 <u8g2_DrawStr>
  u8g2_DrawFrame(&u8g2,0,15+32,20,10);
 80007da:	230a      	movs	r3, #10
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2314      	movs	r3, #20
 80007e0:	222f      	movs	r2, #47	; 0x2f
 80007e2:	2100      	movs	r1, #0
 80007e4:	4808      	ldr	r0, [pc, #32]	; (8000808 <u8g2_box_frame+0x70>)
 80007e6:	f000 fd57 	bl	8001298 <u8g2_DrawFrame>
  u8g2_DrawFrame(&u8g2,0+a,15+32,30,7);
 80007ea:	79f9      	ldrb	r1, [r7, #7]
 80007ec:	2307      	movs	r3, #7
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	231e      	movs	r3, #30
 80007f2:	222f      	movs	r2, #47	; 0x2f
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <u8g2_box_frame+0x70>)
 80007f6:	f000 fd4f 	bl	8001298 <u8g2_DrawFrame>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	08006374 	.word	0x08006374
 8000808:	20000028 	.word	0x20000028
 800080c:	0800637c 	.word	0x0800637c

08000810 <u8g2_disc_circle>:

void u8g2_disc_circle(uint8_t a)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af02      	add	r7, sp, #8
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  u8g2_DrawStr(&u8g2, 0, 0, "DrawDisc");
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <u8g2_disc_circle+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	4819      	ldr	r0, [pc, #100]	; (8000888 <u8g2_disc_circle+0x78>)
 8000822:	f001 fdaf 	bl	8002384 <u8g2_DrawStr>
  u8g2_DrawDisc(&u8g2,10,22,7,U8G2_DRAW_ALL);
 8000826:	230f      	movs	r3, #15
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2307      	movs	r3, #7
 800082c:	2216      	movs	r2, #22
 800082e:	210a      	movs	r1, #10
 8000830:	4815      	ldr	r0, [pc, #84]	; (8000888 <u8g2_disc_circle+0x78>)
 8000832:	f001 f85a 	bl	80018ea <u8g2_DrawDisc>
  u8g2_DrawDisc(&u8g2,24+a,20,5,U8G2_DRAW_ALL);
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	3318      	adds	r3, #24
 800083a:	b2d9      	uxtb	r1, r3
 800083c:	230f      	movs	r3, #15
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2305      	movs	r3, #5
 8000842:	2214      	movs	r2, #20
 8000844:	4810      	ldr	r0, [pc, #64]	; (8000888 <u8g2_disc_circle+0x78>)
 8000846:	f001 f850 	bl	80018ea <u8g2_DrawDisc>
  u8g2_DrawStr(&u8g2, 0, 32, "DrawCircle");
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <u8g2_disc_circle+0x7c>)
 800084c:	2220      	movs	r2, #32
 800084e:	2100      	movs	r1, #0
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <u8g2_disc_circle+0x78>)
 8000852:	f001 fd97 	bl	8002384 <u8g2_DrawStr>
  u8g2_DrawCircle(&u8g2,10,22+32,7,U8G2_DRAW_ALL);
 8000856:	230f      	movs	r3, #15
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2307      	movs	r3, #7
 800085c:	2236      	movs	r2, #54	; 0x36
 800085e:	210a      	movs	r1, #10
 8000860:	4809      	ldr	r0, [pc, #36]	; (8000888 <u8g2_disc_circle+0x78>)
 8000862:	f000 ff20 	bl	80016a6 <u8g2_DrawCircle>
  u8g2_DrawCircle(&u8g2,24+a,20+32,5,U8G2_DRAW_ALL);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	3318      	adds	r3, #24
 800086a:	b2d9      	uxtb	r1, r3
 800086c:	230f      	movs	r3, #15
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	2305      	movs	r3, #5
 8000872:	2234      	movs	r2, #52	; 0x34
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <u8g2_disc_circle+0x78>)
 8000876:	f000 ff16 	bl	80016a6 <u8g2_DrawCircle>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	08006388 	.word	0x08006388
 8000888:	20000028 	.word	0x20000028
 800088c:	08006394 	.word	0x08006394

08000890 <u8g2_string>:

void u8g2_string(uint8_t a)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  u8g2_SetFontDirection(&u8g2,0);
 800089a:	2100      	movs	r1, #0
 800089c:	4819      	ldr	r0, [pc, #100]	; (8000904 <u8g2_string+0x74>)
 800089e:	f001 fe5d 	bl	800255c <u8g2_SetFontDirection>
  u8g2_DrawStr(&u8g2,70+a,31, " 0");
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	3346      	adds	r3, #70	; 0x46
 80008a6:	b2d9      	uxtb	r1, r3
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <u8g2_string+0x78>)
 80008aa:	221f      	movs	r2, #31
 80008ac:	4815      	ldr	r0, [pc, #84]	; (8000904 <u8g2_string+0x74>)
 80008ae:	f001 fd69 	bl	8002384 <u8g2_DrawStr>
  u8g2_SetFontDirection(&u8g2,1);
 80008b2:	2101      	movs	r1, #1
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <u8g2_string+0x74>)
 80008b6:	f001 fe51 	bl	800255c <u8g2_SetFontDirection>
  u8g2_DrawStr(&u8g2,68,0+a, " 90");
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <u8g2_string+0x7c>)
 80008be:	2144      	movs	r1, #68	; 0x44
 80008c0:	4810      	ldr	r0, [pc, #64]	; (8000904 <u8g2_string+0x74>)
 80008c2:	f001 fd5f 	bl	8002384 <u8g2_DrawStr>
  u8g2_SetFontDirection(&u8g2,2);
 80008c6:	2102      	movs	r1, #2
 80008c8:	480e      	ldr	r0, [pc, #56]	; (8000904 <u8g2_string+0x74>)
 80008ca:	f001 fe47 	bl	800255c <u8g2_SetFontDirection>
  u8g2_DrawStr(&u8g2,70-a,31, " 180");
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f1c3 0346 	rsb	r3, r3, #70	; 0x46
 80008d4:	b2d9      	uxtb	r1, r3
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <u8g2_string+0x80>)
 80008d8:	221f      	movs	r2, #31
 80008da:	480a      	ldr	r0, [pc, #40]	; (8000904 <u8g2_string+0x74>)
 80008dc:	f001 fd52 	bl	8002384 <u8g2_DrawStr>
  u8g2_SetFontDirection(&u8g2,3);
 80008e0:	2103      	movs	r1, #3
 80008e2:	4808      	ldr	r0, [pc, #32]	; (8000904 <u8g2_string+0x74>)
 80008e4:	f001 fe3a 	bl	800255c <u8g2_SetFontDirection>
  u8g2_DrawStr(&u8g2,72,64-a, " 270");
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <u8g2_string+0x84>)
 80008f2:	2148      	movs	r1, #72	; 0x48
 80008f4:	4803      	ldr	r0, [pc, #12]	; (8000904 <u8g2_string+0x74>)
 80008f6:	f001 fd45 	bl	8002384 <u8g2_DrawStr>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000028 	.word	0x20000028
 8000908:	080063a0 	.word	0x080063a0
 800090c:	080063a4 	.word	0x080063a4
 8000910:	080063a8 	.word	0x080063a8
 8000914:	080063b0 	.word	0x080063b0

08000918 <u8g2_line>:

void u8g2_line(uint8_t a)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af02      	add	r7, sp, #8
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  u8g2_DrawStr(&u8g2, 0, 0, "DrawLine");
 8000922:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <u8g2_line+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	4822      	ldr	r0, [pc, #136]	; (80009b4 <u8g2_line+0x9c>)
 800092a:	f001 fd2b 	bl	8002384 <u8g2_DrawStr>
  u8g2_DrawLine(&u8g2,7+a, 15, 60-a, 60);
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	3307      	adds	r3, #7
 8000932:	b2d9      	uxtb	r1, r3
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800093a:	b2db      	uxtb	r3, r3
 800093c:	223c      	movs	r2, #60	; 0x3c
 800093e:	9200      	str	r2, [sp, #0]
 8000940:	220f      	movs	r2, #15
 8000942:	481c      	ldr	r0, [pc, #112]	; (80009b4 <u8g2_line+0x9c>)
 8000944:	f001 ffe6 	bl	8002914 <u8g2_DrawLine>
  u8g2_DrawLine(&u8g2,7+a*2, 15, 80-a, 60);
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	b2db      	uxtb	r3, r3
 800094e:	3307      	adds	r3, #7
 8000950:	b2d9      	uxtb	r1, r3
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8000958:	b2db      	uxtb	r3, r3
 800095a:	223c      	movs	r2, #60	; 0x3c
 800095c:	9200      	str	r2, [sp, #0]
 800095e:	220f      	movs	r2, #15
 8000960:	4814      	ldr	r0, [pc, #80]	; (80009b4 <u8g2_line+0x9c>)
 8000962:	f001 ffd7 	bl	8002914 <u8g2_DrawLine>
  u8g2_DrawLine(&u8g2,7+a*3, 15, 100-a, 60);
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	461a      	mov	r2, r3
 800096a:	0052      	lsls	r2, r2, #1
 800096c:	4413      	add	r3, r2
 800096e:	b2db      	uxtb	r3, r3
 8000970:	3307      	adds	r3, #7
 8000972:	b2d9      	uxtb	r1, r3
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800097a:	b2db      	uxtb	r3, r3
 800097c:	223c      	movs	r2, #60	; 0x3c
 800097e:	9200      	str	r2, [sp, #0]
 8000980:	220f      	movs	r2, #15
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <u8g2_line+0x9c>)
 8000984:	f001 ffc6 	bl	8002914 <u8g2_DrawLine>
  u8g2_DrawLine(&u8g2,7+a*4, 15, 120-a, 60);
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	b2db      	uxtb	r3, r3
 800098e:	3307      	adds	r3, #7
 8000990:	b2d9      	uxtb	r1, r3
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8000998:	b2db      	uxtb	r3, r3
 800099a:	223c      	movs	r2, #60	; 0x3c
 800099c:	9200      	str	r2, [sp, #0]
 800099e:	220f      	movs	r2, #15
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <u8g2_line+0x9c>)
 80009a2:	f001 ffb7 	bl	8002914 <u8g2_DrawLine>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	080063b8 	.word	0x080063b8
 80009b4:	20000028 	.word	0x20000028

080009b8 <draw>:
uint8_t max = 0;
uint8_t step = 0;
uint8_t picture =0;

void draw(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	u8g2_prepare();
 80009bc:	f7ff fe62 	bl	8000684 <u8g2_prepare>
	switch(picture)
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <draw+0x80>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	d834      	bhi.n	8000a32 <draw+0x7a>
 80009c8:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <draw+0x18>)
 80009ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ce:	bf00      	nop
 80009d0:	080009e5 	.word	0x080009e5
 80009d4:	080009eb 	.word	0x080009eb
 80009d8:	080009fd 	.word	0x080009fd
 80009dc:	08000a0f 	.word	0x08000a0f
 80009e0:	08000a21 	.word	0x08000a21
	{
		case 0:
			u8g2_drawLogo();
 80009e4:	f7ff fe68 	bl	80006b8 <u8g2_drawLogo>
		break;
 80009e8:	e023      	b.n	8000a32 <draw+0x7a>
		case 1:
			max = 150;
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <draw+0x84>)
 80009ec:	2296      	movs	r2, #150	; 0x96
 80009ee:	701a      	strb	r2, [r3, #0]
			u8g2_box_frame(step);
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <draw+0x88>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fecf 	bl	8000798 <u8g2_box_frame>
		break;
 80009fa:	e01a      	b.n	8000a32 <draw+0x7a>
		case 2:
			max = 150;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <draw+0x84>)
 80009fe:	2296      	movs	r2, #150	; 0x96
 8000a00:	701a      	strb	r2, [r3, #0]
			u8g2_disc_circle(step);
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <draw+0x88>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ff02 	bl	8000810 <u8g2_disc_circle>
		break;
 8000a0c:	e011      	b.n	8000a32 <draw+0x7a>
		case 3:
			max = 60;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <draw+0x84>)
 8000a10:	223c      	movs	r2, #60	; 0x3c
 8000a12:	701a      	strb	r2, [r3, #0]
			u8g2_string(step);
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <draw+0x88>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff39 	bl	8000890 <u8g2_string>
		break;
 8000a1e:	e008      	b.n	8000a32 <draw+0x7a>
		case 4:
			max = 50;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <draw+0x84>)
 8000a22:	2232      	movs	r2, #50	; 0x32
 8000a24:	701a      	strb	r2, [r3, #0]
			u8g2_line(step);
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <draw+0x88>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ff74 	bl	8000918 <u8g2_line>
		break;
 8000a30:	bf00      	nop
	}
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000b2 	.word	0x200000b2
 8000a3c:	200000b0 	.word	0x200000b0
 8000a40:	200000b1 	.word	0x200000b1

08000a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a48:	f002 fdea 	bl	8003620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4c:	f000 f852 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a50:	f7ff fd36 	bl	80004c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a54:	f000 fb0e 	bl	8001074 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8000a58:	f000 f9c8 	bl	8000dec <MX_TIM7_Init>
  MX_TIM6_Init();
 8000a5c:	f000 f990 	bl	8000d80 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000a60:	f000 fb32 	bl	80010c8 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000a64:	f000 f8ce 	bl	8000c04 <MX_RTC_Init>
  MX_I2C1_Init();
 8000a68:	f7ff fd96 	bl	8000598 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  u8g2_Setup_ssd1306_i2c_128x32_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_i2c, u8x8_stm32_gpio_and_delay);
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <main+0x94>)
 8000a6e:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <main+0x98>)
 8000a70:	491b      	ldr	r1, [pc, #108]	; (8000ae0 <main+0x9c>)
 8000a72:	481c      	ldr	r0, [pc, #112]	; (8000ae4 <main+0xa0>)
 8000a74:	f000 ff82 	bl	800197c <u8g2_Setup_ssd1306_i2c_128x32_noname_f>
  u8g2_InitDisplay(&u8g2);
 8000a78:	481a      	ldr	r0, [pc, #104]	; (8000ae4 <main+0xa0>)
 8000a7a:	f002 fd05 	bl	8003488 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4818      	ldr	r0, [pc, #96]	; (8000ae4 <main+0xa0>)
 8000a82:	f002 fd10 	bl	80034a6 <u8x8_SetPowerSave>
//			u8g2_SetBitmapMode(&u8g2,1);
//			u8g2_DrawBitmap(&u8g2, 0, 0, bitmap_height, bitmap_width,  bitmap);
//
//		} while (u8g2_NextPage(&u8g2));

		u8g2_FirstPage(&u8g2);
 8000a86:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <main+0xa0>)
 8000a88:	f000 fce5 	bl	8001456 <u8g2_FirstPage>
		do
		{
			draw();
 8000a8c:	f7ff ff94 	bl	80009b8 <draw>
		}
		while ( u8g2_NextPage(&u8g2) ); // 8 times running
 8000a90:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <main+0xa0>)
 8000a92:	f000 fcf4 	bl	800147e <u8g2_NextPage>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1f7      	bne.n	8000a8c <main+0x48>

		if (step <= max)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <main+0xa4>)
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <main+0xa8>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d806      	bhi.n	8000ab6 <main+0x72>
			step += 3;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <main+0xa4>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	3303      	adds	r3, #3
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <main+0xa4>)
 8000ab2:	701a      	strb	r2, [r3, #0]
 8000ab4:	e7e7      	b.n	8000a86 <main+0x42>
		else
		{
			step = 0;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <main+0xa4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
			picture++;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <main+0xac>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <main+0xac>)
 8000ac6:	701a      	strb	r2, [r3, #0]
			if ( picture >= 5)
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <main+0xac>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d9da      	bls.n	8000a86 <main+0x42>
				picture = 0;
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <main+0xac>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
		u8g2_FirstPage(&u8g2);
 8000ad6:	e7d6      	b.n	8000a86 <main+0x42>
 8000ad8:	08000ee5 	.word	0x08000ee5
 8000adc:	08000fa9 	.word	0x08000fa9
 8000ae0:	08009260 	.word	0x08009260
 8000ae4:	20000028 	.word	0x20000028
 8000ae8:	200000b1 	.word	0x200000b1
 8000aec:	200000b0 	.word	0x200000b0
 8000af0:	200000b2 	.word	0x200000b2

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b098      	sub	sp, #96	; 0x60
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000afe:	2230      	movs	r2, #48	; 0x30
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f005 fc0c 	bl	8006320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	4b31      	ldr	r3, [pc, #196]	; (8000bf0 <SystemClock_Config+0xfc>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a30      	ldr	r2, [pc, #192]	; (8000bf0 <SystemClock_Config+0xfc>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b2e      	ldr	r3, [pc, #184]	; (8000bf0 <SystemClock_Config+0xfc>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <SystemClock_Config+0x100>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a2a      	ldr	r2, [pc, #168]	; (8000bf4 <SystemClock_Config+0x100>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <SystemClock_Config+0x100>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b5e:	2309      	movs	r3, #9
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b76:	2304      	movs	r3, #4
 8000b78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b7a:	23a8      	movs	r3, #168	; 0xa8
 8000b7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b82:	2307      	movs	r3, #7
 8000b84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f003 fd84 	bl	8004698 <HAL_RCC_OscConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b96:	f000 f82f 	bl	8000bf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ba6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2105      	movs	r1, #5
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f003 ffe5 	bl	8004b88 <HAL_RCC_ClockConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000bc4:	f000 f818 	bl	8000bf8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bd0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f004 f9d2 	bl	8004f80 <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000be2:	f000 f809 	bl	8000bf8 <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	3760      	adds	r7, #96	; 0x60
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_RTC_Init+0x44>)
 8000c0a:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <MX_RTC_Init+0x48>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_RTC_Init+0x44>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_RTC_Init+0x44>)
 8000c16:	227f      	movs	r2, #127	; 0x7f
 8000c18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_RTC_Init+0x44>)
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_RTC_Init+0x44>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_RTC_Init+0x44>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_RTC_Init+0x44>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_RTC_Init+0x44>)
 8000c34:	f004 fa86 	bl	8005144 <HAL_RTC_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000c3e:	f7ff ffdb 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000052c 	.word	0x2000052c
 8000c4c:	40002800 	.word	0x40002800

08000c50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <HAL_RTC_MspInit+0x24>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d102      	bne.n	8000c68 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_RTC_MspInit+0x28>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	40002800 	.word	0x40002800
 8000c78:	42470e3c 	.word	0x42470e3c

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d18:	f002 fcd4 	bl	80036c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <USART3_IRQHandler+0x10>)
 8000d26:	f004 fdf9 	bl	800591c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000620 	.word	0x20000620

08000d34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <TIM6_DAC_IRQHandler+0x10>)
 8000d3a:	f004 fb37 	bl	80053ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000054c 	.word	0x2000054c

08000d48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <TIM7_IRQHandler+0x10>)
 8000d4e:	f004 fb2d 	bl	80053ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000594 	.word	0x20000594

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	463b      	mov	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_TIM6_Init+0x64>)
 8000d90:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <MX_TIM6_Init+0x68>)
 8000d92:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_TIM6_Init+0x64>)
 8000d96:	2253      	movs	r2, #83	; 0x53
 8000d98:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_TIM6_Init+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_TIM6_Init+0x64>)
 8000da2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000da6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_TIM6_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000dae:	480d      	ldr	r0, [pc, #52]	; (8000de4 <MX_TIM6_Init+0x64>)
 8000db0:	f004 faad 	bl	800530e <HAL_TIM_Base_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000dba:	f7ff ff1d 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4806      	ldr	r0, [pc, #24]	; (8000de4 <MX_TIM6_Init+0x64>)
 8000dcc:	f004 fcc8 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000dd6:	f7ff ff0f 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000054c 	.word	0x2000054c
 8000de8:	40001000 	.word	0x40001000

08000dec <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_TIM7_Init+0x64>)
 8000dfc:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <MX_TIM7_Init+0x68>)
 8000dfe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_TIM7_Init+0x64>)
 8000e02:	2253      	movs	r2, #83	; 0x53
 8000e04:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_TIM7_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <MX_TIM7_Init+0x64>)
 8000e0e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e12:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_TIM7_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_TIM7_Init+0x64>)
 8000e1c:	f004 fa77 	bl	800530e <HAL_TIM_Base_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000e26:	f7ff fee7 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e32:	463b      	mov	r3, r7
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	; (8000e50 <MX_TIM7_Init+0x64>)
 8000e38:	f004 fc92 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000e42:	f7ff fed9 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000594 	.word	0x20000594
 8000e54:	40001400 	.word	0x40001400

08000e58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <HAL_TIM_Base_MspInit+0x80>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d116      	bne.n	8000e98 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <HAL_TIM_Base_MspInit+0x84>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <HAL_TIM_Base_MspInit+0x84>)
 8000e74:	f043 0310 	orr.w	r3, r3, #16
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_TIM_Base_MspInit+0x84>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2036      	movs	r0, #54	; 0x36
 8000e8c:	f002 fd39 	bl	8003902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e90:	2036      	movs	r0, #54	; 0x36
 8000e92:	f002 fd52 	bl	800393a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000e96:	e01a      	b.n	8000ece <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <HAL_TIM_Base_MspInit+0x88>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d115      	bne.n	8000ece <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_TIM_Base_MspInit+0x84>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <HAL_TIM_Base_MspInit+0x84>)
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_TIM_Base_MspInit+0x84>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 0320 	and.w	r3, r3, #32
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2037      	movs	r0, #55	; 0x37
 8000ec4:	f002 fd1d 	bl	8003902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000ec8:	2037      	movs	r0, #55	; 0x37
 8000eca:	f002 fd36 	bl	800393a <HAL_NVIC_EnableIRQ>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40001000 	.word	0x40001000
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40001400 	.word	0x40001400

08000ee4 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern I2C_HandleTypeDef hi2c1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	72fb      	strb	r3, [r7, #11]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8000ef6:	7afb      	ldrb	r3, [r7, #11]
 8000ef8:	3b28      	subs	r3, #40	; 0x28
 8000efa:	2b23      	cmp	r3, #35	; 0x23
 8000efc:	d84f      	bhi.n	8000f9e <u8x8_stm32_gpio_and_delay+0xba>
 8000efe:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <u8x8_stm32_gpio_and_delay+0x20>)
 8000f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f04:	08000f9f 	.word	0x08000f9f
 8000f08:	08000f95 	.word	0x08000f95
 8000f0c:	08000f9f 	.word	0x08000f9f
 8000f10:	08000f9f 	.word	0x08000f9f
 8000f14:	08000f9f 	.word	0x08000f9f
 8000f18:	08000f9f 	.word	0x08000f9f
 8000f1c:	08000f9f 	.word	0x08000f9f
 8000f20:	08000f9f 	.word	0x08000f9f
 8000f24:	08000f9f 	.word	0x08000f9f
 8000f28:	08000f9f 	.word	0x08000f9f
 8000f2c:	08000f9f 	.word	0x08000f9f
 8000f30:	08000f9f 	.word	0x08000f9f
 8000f34:	08000f9f 	.word	0x08000f9f
 8000f38:	08000f9f 	.word	0x08000f9f
 8000f3c:	08000f9f 	.word	0x08000f9f
 8000f40:	08000f9f 	.word	0x08000f9f
 8000f44:	08000f9f 	.word	0x08000f9f
 8000f48:	08000f9f 	.word	0x08000f9f
 8000f4c:	08000f9f 	.word	0x08000f9f
 8000f50:	08000f9f 	.word	0x08000f9f
 8000f54:	08000f9f 	.word	0x08000f9f
 8000f58:	08000f9f 	.word	0x08000f9f
 8000f5c:	08000f9f 	.word	0x08000f9f
 8000f60:	08000f9f 	.word	0x08000f9f
 8000f64:	08000f9f 	.word	0x08000f9f
 8000f68:	08000f9f 	.word	0x08000f9f
 8000f6c:	08000f9f 	.word	0x08000f9f
 8000f70:	08000f9f 	.word	0x08000f9f
 8000f74:	08000f9f 	.word	0x08000f9f
 8000f78:	08000f9f 	.word	0x08000f9f
 8000f7c:	08000f9f 	.word	0x08000f9f
 8000f80:	08000f9f 	.word	0x08000f9f
 8000f84:	08000f9f 	.word	0x08000f9f
 8000f88:	08000f9f 	.word	0x08000f9f
 8000f8c:	08000f9f 	.word	0x08000f9f
 8000f90:	08000f9f 	.word	0x08000f9f
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8000f94:	7abb      	ldrb	r3, [r7, #10]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 fbb4 	bl	8003704 <HAL_Delay>
		break;
 8000f9c:	bf00      	nop
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */

		break;
	}
	return 1;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <u8x8_byte_stm32_hw_i2c>:

uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	72fb      	strb	r3, [r7, #11]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	72bb      	strb	r3, [r7, #10]
	/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch(msg)
 8000fba:	7afb      	ldrb	r3, [r7, #11]
 8000fbc:	3b14      	subs	r3, #20
 8000fbe:	2b0c      	cmp	r3, #12
 8000fc0:	d847      	bhi.n	8001052 <u8x8_byte_stm32_hw_i2c+0xaa>
 8000fc2:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <u8x8_byte_stm32_hw_i2c+0x20>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	08001057 	.word	0x08001057
 8000fcc:	08001053 	.word	0x08001053
 8000fd0:	08001053 	.word	0x08001053
 8000fd4:	08000ffd 	.word	0x08000ffd
 8000fd8:	0800102d 	.word	0x0800102d
 8000fdc:	08001035 	.word	0x08001035
 8000fe0:	08001053 	.word	0x08001053
 8000fe4:	08001053 	.word	0x08001053
 8000fe8:	08001053 	.word	0x08001053
 8000fec:	08001053 	.word	0x08001053
 8000ff0:	08001053 	.word	0x08001053
 8000ff4:	08001053 	.word	0x08001053
 8000ff8:	08001057 	.word	0x08001057
	{
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	617b      	str	r3, [r7, #20]
		while( arg_int > 0 )
 8001000:	e010      	b.n	8001024 <u8x8_byte_stm32_hw_i2c+0x7c>
		{
			buffer[buf_idx++] = *data;
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <u8x8_byte_stm32_hw_i2c+0xc0>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	b2d1      	uxtb	r1, r2
 800100a:	4a17      	ldr	r2, [pc, #92]	; (8001068 <u8x8_byte_stm32_hw_i2c+0xc0>)
 800100c:	7011      	strb	r1, [r2, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	7819      	ldrb	r1, [r3, #0]
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <u8x8_byte_stm32_hw_i2c+0xc4>)
 8001016:	5499      	strb	r1, [r3, r2]
			data++;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3301      	adds	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
			arg_int--;
 800101e:	7abb      	ldrb	r3, [r7, #10]
 8001020:	3b01      	subs	r3, #1
 8001022:	72bb      	strb	r3, [r7, #10]
		while( arg_int > 0 )
 8001024:	7abb      	ldrb	r3, [r7, #10]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1eb      	bne.n	8001002 <u8x8_byte_stm32_hw_i2c+0x5a>
		}
		break;
 800102a:	e017      	b.n	800105c <u8x8_byte_stm32_hw_i2c+0xb4>
		/* add your custom code to init i2c subsystem */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <u8x8_byte_stm32_hw_i2c+0xc0>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
		break;
 8001032:	e013      	b.n	800105c <u8x8_byte_stm32_hw_i2c+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		if(HAL_I2C_Master_Transmit(&hi2c1, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <u8x8_byte_stm32_hw_i2c+0xc0>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	2264      	movs	r2, #100	; 0x64
 800103c:	9200      	str	r2, [sp, #0]
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <u8x8_byte_stm32_hw_i2c+0xc4>)
 8001040:	2178      	movs	r1, #120	; 0x78
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <u8x8_byte_stm32_hw_i2c+0xc8>)
 8001044:	f003 f820 	bl	8004088 <HAL_I2C_Master_Transmit>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <u8x8_byte_stm32_hw_i2c+0xb2>
 800104e:	2300      	movs	r3, #0
 8001050:	e005      	b.n	800105e <u8x8_byte_stm32_hw_i2c+0xb6>
		break;
	default:
		return 0;
 8001052:	2300      	movs	r3, #0
 8001054:	e003      	b.n	800105e <u8x8_byte_stm32_hw_i2c+0xb6>
		break;
 8001056:	bf00      	nop
 8001058:	e000      	b.n	800105c <u8x8_byte_stm32_hw_i2c+0xb4>
		break;
 800105a:	bf00      	nop
	}
	return 1;
 800105c:	2301      	movs	r3, #1
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200000b3 	.word	0x200000b3
 800106c:	200000b4 	.word	0x200000b4
 8001070:	200004d8 	.word	0x200004d8

08001074 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <MX_USART1_UART_Init+0x50>)
 800107c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 8001080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001084:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_USART1_UART_Init+0x4c>)
 80010ac:	f004 fbe8 	bl	8005880 <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010b6:	f7ff fd9f 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200005dc 	.word	0x200005dc
 80010c4:	40011000 	.word	0x40011000

080010c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <MX_USART3_UART_Init+0x50>)
 80010d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_USART3_UART_Init+0x4c>)
 8001100:	f004 fbbe 	bl	8005880 <HAL_UART_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800110a:	f7ff fd75 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000620 	.word	0x20000620
 8001118:	40004800 	.word	0x40004800

0800111c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a37      	ldr	r2, [pc, #220]	; (8001218 <HAL_UART_MspInit+0xfc>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d12d      	bne.n	800119a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <HAL_UART_MspInit+0x100>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a35      	ldr	r2, [pc, #212]	; (800121c <HAL_UART_MspInit+0x100>)
 8001148:	f043 0310 	orr.w	r3, r3, #16
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b33      	ldr	r3, [pc, #204]	; (800121c <HAL_UART_MspInit+0x100>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f003 0310 	and.w	r3, r3, #16
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	4b2f      	ldr	r3, [pc, #188]	; (800121c <HAL_UART_MspInit+0x100>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a2e      	ldr	r2, [pc, #184]	; (800121c <HAL_UART_MspInit+0x100>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b2c      	ldr	r3, [pc, #176]	; (800121c <HAL_UART_MspInit+0x100>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001176:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800117a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001188:	2307      	movs	r3, #7
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	4823      	ldr	r0, [pc, #140]	; (8001220 <HAL_UART_MspInit+0x104>)
 8001194:	f002 fc7e 	bl	8003a94 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001198:	e039      	b.n	800120e <HAL_UART_MspInit+0xf2>
  else if(uartHandle->Instance==USART3)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a21      	ldr	r2, [pc, #132]	; (8001224 <HAL_UART_MspInit+0x108>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d134      	bne.n	800120e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	4b1c      	ldr	r3, [pc, #112]	; (800121c <HAL_UART_MspInit+0x100>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	4a1b      	ldr	r2, [pc, #108]	; (800121c <HAL_UART_MspInit+0x100>)
 80011ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b2:	6413      	str	r3, [r2, #64]	; 0x40
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_UART_MspInit+0x100>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_UART_MspInit+0x100>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <HAL_UART_MspInit+0x100>)
 80011ca:	f043 0308 	orr.w	r3, r3, #8
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_UART_MspInit+0x100>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	f003 0308 	and.w	r3, r3, #8
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011ee:	2307      	movs	r3, #7
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	480b      	ldr	r0, [pc, #44]	; (8001228 <HAL_UART_MspInit+0x10c>)
 80011fa:	f002 fc4b 	bl	8003a94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	2027      	movs	r0, #39	; 0x27
 8001204:	f002 fb7d 	bl	8003902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001208:	2027      	movs	r0, #39	; 0x27
 800120a:	f002 fb96 	bl	800393a <HAL_NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3730      	adds	r7, #48	; 0x30
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40011000 	.word	0x40011000
 800121c:	40023800 	.word	0x40023800
 8001220:	40020000 	.word	0x40020000
 8001224:	40004800 	.word	0x40004800
 8001228:	40020c00 	.word	0x40020c00

0800122c <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af02      	add	r7, sp, #8
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	4608      	mov	r0, r1
 8001236:	4611      	mov	r1, r2
 8001238:	461a      	mov	r2, r3
 800123a:	4603      	mov	r3, r0
 800123c:	70fb      	strb	r3, [r7, #3]
 800123e:	460b      	mov	r3, r1
 8001240:	70bb      	strb	r3, [r7, #2]
 8001242:	4613      	mov	r3, r2
 8001244:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001246:	78fa      	ldrb	r2, [r7, #3]
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	4413      	add	r3, r2
 800124c:	b2d8      	uxtb	r0, r3
 800124e:	78ba      	ldrb	r2, [r7, #2]
 8001250:	7c3b      	ldrb	r3, [r7, #16]
 8001252:	4413      	add	r3, r2
 8001254:	b2db      	uxtb	r3, r3
 8001256:	78ba      	ldrb	r2, [r7, #2]
 8001258:	78f9      	ldrb	r1, [r7, #3]
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	4603      	mov	r3, r0
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f001 fb2d 	bl	80028be <u8g2_IsIntersection>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d012      	beq.n	8001290 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 800126a:	e00d      	b.n	8001288 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	78ba      	ldrb	r2, [r7, #2]
 8001270:	78f9      	ldrb	r1, [r7, #3]
 8001272:	2000      	movs	r0, #0
 8001274:	9000      	str	r0, [sp, #0]
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f001 f9ef 	bl	800265a <u8g2_DrawHVLine>
    y++;    
 800127c:	78bb      	ldrb	r3, [r7, #2]
 800127e:	3301      	adds	r3, #1
 8001280:	70bb      	strb	r3, [r7, #2]
    h--;
 8001282:	7c3b      	ldrb	r3, [r7, #16]
 8001284:	3b01      	subs	r3, #1
 8001286:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8001288:	7c3b      	ldrb	r3, [r7, #16]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1ee      	bne.n	800126c <u8g2_DrawBox+0x40>
 800128e:	e000      	b.n	8001292 <u8g2_DrawBox+0x66>
    return;
 8001290:	bf00      	nop
  }
}
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <u8g2_DrawFrame>:
  restriction: does not work for w = 0 or h = 0
  ToDo:
    pixel in the corners are drawn twice. This could be optimized.
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af02      	add	r7, sp, #8
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	4608      	mov	r0, r1
 80012a2:	4611      	mov	r1, r2
 80012a4:	461a      	mov	r2, r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	70fb      	strb	r3, [r7, #3]
 80012aa:	460b      	mov	r3, r1
 80012ac:	70bb      	strb	r3, [r7, #2]
 80012ae:	4613      	mov	r3, r2
 80012b0:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xtmp = x;
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	73fb      	strb	r3, [r7, #15]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80012b6:	78fa      	ldrb	r2, [r7, #3]
 80012b8:	787b      	ldrb	r3, [r7, #1]
 80012ba:	4413      	add	r3, r2
 80012bc:	b2d8      	uxtb	r0, r3
 80012be:	78ba      	ldrb	r2, [r7, #2]
 80012c0:	7e3b      	ldrb	r3, [r7, #24]
 80012c2:	4413      	add	r3, r2
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	78ba      	ldrb	r2, [r7, #2]
 80012c8:	78f9      	ldrb	r1, [r7, #3]
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	4603      	mov	r3, r0
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f001 faf5 	bl	80028be <u8g2_IsIntersection>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d02e      	beq.n	8001338 <u8g2_DrawFrame+0xa0>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80012da:	787b      	ldrb	r3, [r7, #1]
 80012dc:	78ba      	ldrb	r2, [r7, #2]
 80012de:	78f9      	ldrb	r1, [r7, #3]
 80012e0:	2000      	movs	r0, #0
 80012e2:	9000      	str	r0, [sp, #0]
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f001 f9b8 	bl	800265a <u8g2_DrawHVLine>
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80012ea:	7e3b      	ldrb	r3, [r7, #24]
 80012ec:	78ba      	ldrb	r2, [r7, #2]
 80012ee:	78f9      	ldrb	r1, [r7, #3]
 80012f0:	2001      	movs	r0, #1
 80012f2:	9000      	str	r0, [sp, #0]
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f001 f9b0 	bl	800265a <u8g2_DrawHVLine>
  x+=w;
 80012fa:	78fa      	ldrb	r2, [r7, #3]
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	4413      	add	r3, r2
 8001300:	70fb      	strb	r3, [r7, #3]
  x--;
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	3b01      	subs	r3, #1
 8001306:	70fb      	strb	r3, [r7, #3]
  u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001308:	7e3b      	ldrb	r3, [r7, #24]
 800130a:	78ba      	ldrb	r2, [r7, #2]
 800130c:	78f9      	ldrb	r1, [r7, #3]
 800130e:	2001      	movs	r0, #1
 8001310:	9000      	str	r0, [sp, #0]
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f001 f9a1 	bl	800265a <u8g2_DrawHVLine>
  y+=h;
 8001318:	78ba      	ldrb	r2, [r7, #2]
 800131a:	7e3b      	ldrb	r3, [r7, #24]
 800131c:	4413      	add	r3, r2
 800131e:	70bb      	strb	r3, [r7, #2]
  y--;
 8001320:	78bb      	ldrb	r3, [r7, #2]
 8001322:	3b01      	subs	r3, #1
 8001324:	70bb      	strb	r3, [r7, #2]
  u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001326:	787b      	ldrb	r3, [r7, #1]
 8001328:	78ba      	ldrb	r2, [r7, #2]
 800132a:	7bf9      	ldrb	r1, [r7, #15]
 800132c:	2000      	movs	r0, #0
 800132e:	9000      	str	r0, [sp, #0]
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f001 f992 	bl	800265a <u8g2_DrawHVLine>
 8001336:	e000      	b.n	800133a <u8g2_DrawFrame+0xa2>
    return;
 8001338:	bf00      	nop
}
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	7c1b      	ldrb	r3, [r3, #16]
 800134e:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f004 ffd6 	bl	8006320 <memset>
}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af02      	add	r7, sp, #8
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
 8001388:	4613      	mov	r3, r2
 800138a:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	7c1b      	ldrb	r3, [r3, #16]
 8001392:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139c:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	89ba      	ldrh	r2, [r7, #12]
 80013a4:	fb12 f303 	smulbb	r3, r2, r3
 80013a8:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80013aa:	89bb      	ldrh	r3, [r7, #12]
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80013b0:	89bb      	ldrh	r3, [r7, #12]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	4413      	add	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80013b8:	7bf9      	ldrb	r1, [r7, #15]
 80013ba:	78ba      	ldrb	r2, [r7, #2]
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	460b      	mov	r3, r1
 80013c2:	2100      	movs	r1, #0
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f002 f82e 	bl	8003426 <u8x8_DrawTile>
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e4:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013ec:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	7c5b      	ldrb	r3, [r3, #17]
 80013f4:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80013f6:	7bba      	ldrb	r2, [r7, #14]
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	4619      	mov	r1, r3
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ffbd 	bl	800137c <u8g2_send_tile_row>
    src_row++;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	3301      	adds	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001408:	7bbb      	ldrb	r3, [r7, #14]
 800140a:	3301      	adds	r3, #1
 800140c:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	7b7b      	ldrb	r3, [r7, #13]
 8001412:	429a      	cmp	r2, r3
 8001414:	d203      	bcs.n	800141e <u8g2_send_buffer+0x4c>
 8001416:	7bba      	ldrb	r2, [r7, #14]
 8001418:	7b3b      	ldrb	r3, [r7, #12]
 800141a:	429a      	cmp	r2, r3
 800141c:	d3eb      	bcc.n	80013f6 <u8g2_send_buffer+0x24>
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	460b      	mov	r3, r1
 8001430:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	78fa      	ldrb	r2, [r7, #3]
 8001436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	4798      	blx	r3
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff69 	bl	8001340 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800146e:	2100      	movs	r1, #0
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ffd8 	bl	8001426 <u8g2_SetBufferCurrTileRow>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b084      	sub	sp, #16
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffa3 	bl	80013d2 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001492:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	4413      	add	r3, r2
 800149e:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	7c5b      	ldrb	r3, [r3, #17]
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d304      	bcc.n	80014b6 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f002 f80b 	bl	80034c8 <u8x8_RefreshDisplay>
    return 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e00d      	b.n	80014d2 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d002      	beq.n	80014c6 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff3d 	bl	8001340 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	4619      	mov	r1, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffab 	bl	8001426 <u8g2_SetBufferCurrTileRow>
  return 1;
 80014d0:	2301      	movs	r3, #1
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	4608      	mov	r0, r1
 80014e4:	4611      	mov	r1, r2
 80014e6:	461a      	mov	r2, r3
 80014e8:	4603      	mov	r3, r0
 80014ea:	70fb      	strb	r3, [r7, #3]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70bb      	strb	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 80014f4:	7d3b      	ldrb	r3, [r7, #20]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d017      	beq.n	800152e <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 80014fe:	787a      	ldrb	r2, [r7, #1]
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	4413      	add	r3, r2
 8001504:	b2d9      	uxtb	r1, r3
 8001506:	7c3a      	ldrb	r2, [r7, #16]
 8001508:	78bb      	ldrb	r3, [r7, #2]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	b2db      	uxtb	r3, r3
 800150e:	461a      	mov	r2, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f001 f957 	bl	80027c4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8001516:	787a      	ldrb	r2, [r7, #1]
 8001518:	78bb      	ldrb	r3, [r7, #2]
 800151a:	4413      	add	r3, r2
 800151c:	b2d9      	uxtb	r1, r3
 800151e:	7c3a      	ldrb	r2, [r7, #16]
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f001 f94b 	bl	80027c4 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 800152e:	7d3b      	ldrb	r3, [r7, #20]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d017      	beq.n	8001568 <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8001538:	787a      	ldrb	r2, [r7, #1]
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	b2d9      	uxtb	r1, r3
 8001540:	7c3a      	ldrb	r2, [r7, #16]
 8001542:	78bb      	ldrb	r3, [r7, #2]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f001 f93a 	bl	80027c4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8001550:	787a      	ldrb	r2, [r7, #1]
 8001552:	78bb      	ldrb	r3, [r7, #2]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b2d9      	uxtb	r1, r3
 8001558:	7c3a      	ldrb	r2, [r7, #16]
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f001 f92e 	bl	80027c4 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8001568:	7d3b      	ldrb	r3, [r7, #20]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8001572:	787a      	ldrb	r2, [r7, #1]
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	4413      	add	r3, r2
 8001578:	b2d9      	uxtb	r1, r3
 800157a:	7c3a      	ldrb	r2, [r7, #16]
 800157c:	78bb      	ldrb	r3, [r7, #2]
 800157e:	4413      	add	r3, r2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f001 f91d 	bl	80027c4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 800158a:	787a      	ldrb	r2, [r7, #1]
 800158c:	78bb      	ldrb	r3, [r7, #2]
 800158e:	4413      	add	r3, r2
 8001590:	b2d9      	uxtb	r1, r3
 8001592:	7c3a      	ldrb	r2, [r7, #16]
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	4413      	add	r3, r2
 8001598:	b2db      	uxtb	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f001 f911 	bl	80027c4 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 80015a2:	7d3b      	ldrb	r3, [r7, #20]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d017      	beq.n	80015dc <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 80015ac:	787a      	ldrb	r2, [r7, #1]
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	b2d9      	uxtb	r1, r3
 80015b4:	7c3a      	ldrb	r2, [r7, #16]
 80015b6:	78bb      	ldrb	r3, [r7, #2]
 80015b8:	4413      	add	r3, r2
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f001 f900 	bl	80027c4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 80015c4:	787a      	ldrb	r2, [r7, #1]
 80015c6:	78bb      	ldrb	r3, [r7, #2]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	b2d9      	uxtb	r1, r3
 80015cc:	7c3a      	ldrb	r2, [r7, #16]
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	4413      	add	r3, r2
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f001 f8f4 	bl	80027c4 <u8g2_DrawPixel>
    }
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	4608      	mov	r0, r1
 80015ee:	4611      	mov	r1, r2
 80015f0:	461a      	mov	r2, r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	70fb      	strb	r3, [r7, #3]
 80015f6:	460b      	mov	r3, r1
 80015f8:	70bb      	strb	r3, [r7, #2]
 80015fa:	4613      	mov	r3, r2
 80015fc:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 80015fe:	2301      	movs	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 800160c:	2301      	movs	r3, #1
 800160e:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8001614:	7b7a      	ldrb	r2, [r7, #13]
 8001616:	787b      	ldrb	r3, [r7, #1]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	737b      	strb	r3, [r7, #13]
    x = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	733b      	strb	r3, [r7, #12]
    y = rad;
 800162a:	787b      	ldrb	r3, [r7, #1]
 800162c:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 800162e:	78f8      	ldrb	r0, [r7, #3]
 8001630:	7afa      	ldrb	r2, [r7, #11]
 8001632:	7b39      	ldrb	r1, [r7, #12]
 8001634:	7e3b      	ldrb	r3, [r7, #24]
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	78bb      	ldrb	r3, [r7, #2]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	4603      	mov	r3, r0
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff4b 	bl	80014da <u8g2_draw_circle_section>
    
    while ( x < y )
 8001644:	e026      	b.n	8001694 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164a:	2b00      	cmp	r3, #0
 800164c:	db0b      	blt.n	8001666 <u8g2_draw_circle+0x82>
      {
        y--;
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	3b01      	subs	r3, #1
 8001652:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 8001654:	7b7b      	ldrb	r3, [r7, #13]
 8001656:	3302      	adds	r3, #2
 8001658:	b2db      	uxtb	r3, r3
 800165a:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	7b7b      	ldrb	r3, [r7, #13]
 8001660:	4413      	add	r3, r2
 8001662:	b2db      	uxtb	r3, r3
 8001664:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 8001666:	7b3b      	ldrb	r3, [r7, #12]
 8001668:	3301      	adds	r3, #1
 800166a:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 800166c:	7bbb      	ldrb	r3, [r7, #14]
 800166e:	3302      	adds	r3, #2
 8001670:	b2db      	uxtb	r3, r3
 8001672:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 8001674:	7bfa      	ldrb	r2, [r7, #15]
 8001676:	7bbb      	ldrb	r3, [r7, #14]
 8001678:	4413      	add	r3, r2
 800167a:	b2db      	uxtb	r3, r3
 800167c:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 800167e:	78f8      	ldrb	r0, [r7, #3]
 8001680:	7afa      	ldrb	r2, [r7, #11]
 8001682:	7b39      	ldrb	r1, [r7, #12]
 8001684:	7e3b      	ldrb	r3, [r7, #24]
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	78bb      	ldrb	r3, [r7, #2]
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	4603      	mov	r3, r0
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ff23 	bl	80014da <u8g2_draw_circle_section>
    while ( x < y )
 8001694:	7b3a      	ldrb	r2, [r7, #12]
 8001696:	7afb      	ldrb	r3, [r7, #11]
 8001698:	429a      	cmp	r2, r3
 800169a:	d3d4      	bcc.n	8001646 <u8g2_draw_circle+0x62>
    }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80016a6:	b590      	push	{r4, r7, lr}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af02      	add	r7, sp, #8
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	4608      	mov	r0, r1
 80016b0:	4611      	mov	r1, r2
 80016b2:	461a      	mov	r2, r3
 80016b4:	4603      	mov	r3, r0
 80016b6:	70fb      	strb	r3, [r7, #3]
 80016b8:	460b      	mov	r3, r1
 80016ba:	70bb      	strb	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 80016c0:	78fa      	ldrb	r2, [r7, #3]
 80016c2:	787b      	ldrb	r3, [r7, #1]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	b2d9      	uxtb	r1, r3
 80016c8:	78ba      	ldrb	r2, [r7, #2]
 80016ca:	787b      	ldrb	r3, [r7, #1]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	b2d8      	uxtb	r0, r3
 80016d0:	78fa      	ldrb	r2, [r7, #3]
 80016d2:	787b      	ldrb	r3, [r7, #1]
 80016d4:	4413      	add	r3, r2
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	3301      	adds	r3, #1
 80016da:	b2dc      	uxtb	r4, r3
 80016dc:	78ba      	ldrb	r2, [r7, #2]
 80016de:	787b      	ldrb	r3, [r7, #1]
 80016e0:	4413      	add	r3, r2
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	3301      	adds	r3, #1
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	4623      	mov	r3, r4
 80016ec:	4602      	mov	r2, r0
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f001 f8e5 	bl	80028be <u8g2_IsIntersection>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d009      	beq.n	800170e <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 80016fa:	7878      	ldrb	r0, [r7, #1]
 80016fc:	78ba      	ldrb	r2, [r7, #2]
 80016fe:	78f9      	ldrb	r1, [r7, #3]
 8001700:	7e3b      	ldrb	r3, [r7, #24]
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	4603      	mov	r3, r0
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ff6c 	bl	80015e4 <u8g2_draw_circle>
 800170c:	e000      	b.n	8001710 <u8g2_DrawCircle+0x6a>
      return;
 800170e:	bf00      	nop
}
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bd90      	pop	{r4, r7, pc}

08001716 <u8g2_draw_disc_section>:
/* Disk */

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	4608      	mov	r0, r1
 8001720:	4611      	mov	r1, r2
 8001722:	461a      	mov	r2, r3
 8001724:	4603      	mov	r3, r0
 8001726:	70fb      	strb	r3, [r7, #3]
 8001728:	460b      	mov	r3, r1
 800172a:	70bb      	strb	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8001730:	7d3b      	ldrb	r3, [r7, #20]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d01b      	beq.n	8001772 <u8g2_draw_disc_section+0x5c>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 800173a:	787a      	ldrb	r2, [r7, #1]
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	4413      	add	r3, r2
 8001740:	b2d9      	uxtb	r1, r3
 8001742:	7c3a      	ldrb	r2, [r7, #16]
 8001744:	78bb      	ldrb	r3, [r7, #2]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	b2da      	uxtb	r2, r3
 800174a:	78bb      	ldrb	r3, [r7, #2]
 800174c:	3301      	adds	r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f001 f81e 	bl	8002792 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0-x, x+1);
 8001756:	787a      	ldrb	r2, [r7, #1]
 8001758:	78bb      	ldrb	r3, [r7, #2]
 800175a:	4413      	add	r3, r2
 800175c:	b2d9      	uxtb	r1, r3
 800175e:	7c3a      	ldrb	r2, [r7, #16]
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	b2da      	uxtb	r2, r3
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	3301      	adds	r3, #1
 800176a:	b2db      	uxtb	r3, r3
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f001 f810 	bl	8002792 <u8g2_DrawVLine>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8001772:	7d3b      	ldrb	r3, [r7, #20]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01b      	beq.n	80017b4 <u8g2_draw_disc_section+0x9e>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 800177c:	787a      	ldrb	r2, [r7, #1]
 800177e:	78fb      	ldrb	r3, [r7, #3]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	b2d9      	uxtb	r1, r3
 8001784:	7c3a      	ldrb	r2, [r7, #16]
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	b2da      	uxtb	r2, r3
 800178c:	78bb      	ldrb	r3, [r7, #2]
 800178e:	3301      	adds	r3, #1
 8001790:	b2db      	uxtb	r3, r3
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 fffd 	bl	8002792 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0-x, x+1);
 8001798:	787a      	ldrb	r2, [r7, #1]
 800179a:	78bb      	ldrb	r3, [r7, #2]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	b2d9      	uxtb	r1, r3
 80017a0:	7c3a      	ldrb	r2, [r7, #16]
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	3301      	adds	r3, #1
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 ffef 	bl	8002792 <u8g2_DrawVLine>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 80017b4:	7d3b      	ldrb	r3, [r7, #20]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d015      	beq.n	80017ea <u8g2_draw_disc_section+0xd4>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 80017be:	787a      	ldrb	r2, [r7, #1]
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	4413      	add	r3, r2
 80017c4:	b2d9      	uxtb	r1, r3
 80017c6:	78bb      	ldrb	r3, [r7, #2]
 80017c8:	3301      	adds	r3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	7c3a      	ldrb	r2, [r7, #16]
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 ffdf 	bl	8002792 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0, x+1);
 80017d4:	787a      	ldrb	r2, [r7, #1]
 80017d6:	78bb      	ldrb	r3, [r7, #2]
 80017d8:	4413      	add	r3, r2
 80017da:	b2d9      	uxtb	r1, r3
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	3301      	adds	r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	7c3a      	ldrb	r2, [r7, #16]
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 ffd4 	bl	8002792 <u8g2_DrawVLine>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 80017ea:	7d3b      	ldrb	r3, [r7, #20]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d015      	beq.n	8001820 <u8g2_draw_disc_section+0x10a>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 80017f4:	787a      	ldrb	r2, [r7, #1]
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	b2d9      	uxtb	r1, r3
 80017fc:	78bb      	ldrb	r3, [r7, #2]
 80017fe:	3301      	adds	r3, #1
 8001800:	b2db      	uxtb	r3, r3
 8001802:	7c3a      	ldrb	r2, [r7, #16]
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 ffc4 	bl	8002792 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 800180a:	787a      	ldrb	r2, [r7, #1]
 800180c:	78bb      	ldrb	r3, [r7, #2]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	b2d9      	uxtb	r1, r3
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	3301      	adds	r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	7c3a      	ldrb	r2, [r7, #16]
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 ffb9 	bl	8002792 <u8g2_DrawVLine>
    }
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <u8g2_draw_disc>:

static void u8g2_draw_disc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af02      	add	r7, sp, #8
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	4608      	mov	r0, r1
 8001832:	4611      	mov	r1, r2
 8001834:	461a      	mov	r2, r3
 8001836:	4603      	mov	r3, r0
 8001838:	70fb      	strb	r3, [r7, #3]
 800183a:	460b      	mov	r3, r1
 800183c:	70bb      	strb	r3, [r7, #2]
 800183e:	4613      	mov	r3, r2
 8001840:	707b      	strb	r3, [r7, #1]
  u8g2_int_t ddF_x;
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
 8001842:	2301      	movs	r3, #1
 8001844:	73fb      	strb	r3, [r7, #15]
  f -= rad;
 8001846:	7bfa      	ldrb	r2, [r7, #15]
 8001848:	787b      	ldrb	r3, [r7, #1]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	73fb      	strb	r3, [r7, #15]
  ddF_x = 1;
 8001850:	2301      	movs	r3, #1
 8001852:	73bb      	strb	r3, [r7, #14]
  ddF_y = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	737b      	strb	r3, [r7, #13]
  ddF_y -= rad;
 8001858:	7b7a      	ldrb	r2, [r7, #13]
 800185a:	787b      	ldrb	r3, [r7, #1]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	737b      	strb	r3, [r7, #13]
  ddF_y *= 2;
 8001862:	7b7b      	ldrb	r3, [r7, #13]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	b2db      	uxtb	r3, r3
 8001868:	737b      	strb	r3, [r7, #13]
  x = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	733b      	strb	r3, [r7, #12]
  y = rad;
 800186e:	787b      	ldrb	r3, [r7, #1]
 8001870:	72fb      	strb	r3, [r7, #11]

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 8001872:	78f8      	ldrb	r0, [r7, #3]
 8001874:	7afa      	ldrb	r2, [r7, #11]
 8001876:	7b39      	ldrb	r1, [r7, #12]
 8001878:	7e3b      	ldrb	r3, [r7, #24]
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	78bb      	ldrb	r3, [r7, #2]
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	4603      	mov	r3, r0
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ff47 	bl	8001716 <u8g2_draw_disc_section>
  
  while ( x < y )
 8001888:	e026      	b.n	80018d8 <u8g2_draw_disc+0xb0>
  {
    if (f >= 0) 
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <u8g2_draw_disc+0x82>
    {
      y--;
 8001892:	7afb      	ldrb	r3, [r7, #11]
 8001894:	3b01      	subs	r3, #1
 8001896:	72fb      	strb	r3, [r7, #11]
      ddF_y += 2;
 8001898:	7b7b      	ldrb	r3, [r7, #13]
 800189a:	3302      	adds	r3, #2
 800189c:	b2db      	uxtb	r3, r3
 800189e:	737b      	strb	r3, [r7, #13]
      f += ddF_y;
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	7b7b      	ldrb	r3, [r7, #13]
 80018a4:	4413      	add	r3, r2
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	73fb      	strb	r3, [r7, #15]
    }
    x++;
 80018aa:	7b3b      	ldrb	r3, [r7, #12]
 80018ac:	3301      	adds	r3, #1
 80018ae:	733b      	strb	r3, [r7, #12]
    ddF_x += 2;
 80018b0:	7bbb      	ldrb	r3, [r7, #14]
 80018b2:	3302      	adds	r3, #2
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	73bb      	strb	r3, [r7, #14]
    f += ddF_x;
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	7bbb      	ldrb	r3, [r7, #14]
 80018bc:	4413      	add	r3, r2
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	73fb      	strb	r3, [r7, #15]

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 80018c2:	78f8      	ldrb	r0, [r7, #3]
 80018c4:	7afa      	ldrb	r2, [r7, #11]
 80018c6:	7b39      	ldrb	r1, [r7, #12]
 80018c8:	7e3b      	ldrb	r3, [r7, #24]
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	78bb      	ldrb	r3, [r7, #2]
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	4603      	mov	r3, r0
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ff1f 	bl	8001716 <u8g2_draw_disc_section>
  while ( x < y )
 80018d8:	7b3a      	ldrb	r2, [r7, #12]
 80018da:	7afb      	ldrb	r3, [r7, #11]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d3d4      	bcc.n	800188a <u8g2_draw_disc+0x62>
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <u8g2_DrawDisc>:

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80018ea:	b590      	push	{r4, r7, lr}
 80018ec:	b085      	sub	sp, #20
 80018ee:	af02      	add	r7, sp, #8
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	4608      	mov	r0, r1
 80018f4:	4611      	mov	r1, r2
 80018f6:	461a      	mov	r2, r3
 80018f8:	4603      	mov	r3, r0
 80018fa:	70fb      	strb	r3, [r7, #3]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70bb      	strb	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8001904:	78fa      	ldrb	r2, [r7, #3]
 8001906:	787b      	ldrb	r3, [r7, #1]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	b2d9      	uxtb	r1, r3
 800190c:	78ba      	ldrb	r2, [r7, #2]
 800190e:	787b      	ldrb	r3, [r7, #1]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b2d8      	uxtb	r0, r3
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	787b      	ldrb	r3, [r7, #1]
 8001918:	4413      	add	r3, r2
 800191a:	b2db      	uxtb	r3, r3
 800191c:	3301      	adds	r3, #1
 800191e:	b2dc      	uxtb	r4, r3
 8001920:	78ba      	ldrb	r2, [r7, #2]
 8001922:	787b      	ldrb	r3, [r7, #1]
 8001924:	4413      	add	r3, r2
 8001926:	b2db      	uxtb	r3, r3
 8001928:	3301      	adds	r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	4623      	mov	r3, r4
 8001930:	4602      	mov	r2, r0
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 ffc3 	bl	80028be <u8g2_IsIntersection>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <u8g2_DrawDisc+0x68>
      return;
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
 800193e:	7878      	ldrb	r0, [r7, #1]
 8001940:	78ba      	ldrb	r2, [r7, #2]
 8001942:	78f9      	ldrb	r1, [r7, #3]
 8001944:	7e3b      	ldrb	r3, [r7, #24]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	4603      	mov	r3, r0
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ff6c 	bl	8001828 <u8g2_draw_disc>
 8001950:	e000      	b.n	8001954 <u8g2_DrawDisc+0x6a>
      return;
 8001952:	bf00      	nop
}
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bd90      	pop	{r4, r7, pc}
	...

0800195c <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2208      	movs	r2, #8
 8001968:	701a      	strb	r2, [r3, #0]
  return buf;
 800196a:	4b03      	ldr	r3, [pc, #12]	; (8001978 <u8g2_m_16_8_f+0x1c>)
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	200000d4 	.word	0x200000d4

0800197c <u8g2_Setup_ssd1306_i2c_128x32_noname_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_alt0, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_ssd1306_i2c_128x32_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af02      	add	r7, sp, #8
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <u8g2_Setup_ssd1306_i2c_128x32_noname_f+0x44>)
 8001992:	490c      	ldr	r1, [pc, #48]	; (80019c4 <u8g2_Setup_ssd1306_i2c_128x32_noname_f+0x48>)
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f001 fdfb 	bl	8003590 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800199a:	f107 0313 	add.w	r3, r7, #19
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ffdc 	bl	800195c <u8g2_m_16_8_f>
 80019a4:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80019a6:	7cfa      	ldrb	r2, [r7, #19]
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <u8g2_Setup_ssd1306_i2c_128x32_noname_f+0x4c>)
 80019ae:	6979      	ldr	r1, [r7, #20]
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f001 f904 	bl	8002bbe <u8g2_SetupBuffer>
}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	080030c5 	.word	0x080030c5
 80019c4:	08003321 	.word	0x08003321
 80019c8:	08002a43 	.word	0x08002a43

080019cc <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	781b      	ldrb	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	81fb      	strh	r3, [r7, #14]
    font++;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001a10:	89fb      	ldrh	r3, [r7, #14]
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	89fb      	ldrh	r3, [r7, #14]
 8001a1e:	4413      	add	r3, r2
 8001a20:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001a22:	89fb      	ldrh	r3, [r7, #14]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	6838      	ldr	r0, [r7, #0]
 8001a3e:	f7ff ffc5 	bl	80019cc <u8g2_font_get_byte>
 8001a42:	4603      	mov	r3, r0
 8001a44:	461a      	mov	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	6838      	ldr	r0, [r7, #0]
 8001a4e:	f7ff ffbd 	bl	80019cc <u8g2_font_get_byte>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	6838      	ldr	r0, [r7, #0]
 8001a5e:	f7ff ffb5 	bl	80019cc <u8g2_font_get_byte>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001a6a:	2103      	movs	r1, #3
 8001a6c:	6838      	ldr	r0, [r7, #0]
 8001a6e:	f7ff ffad 	bl	80019cc <u8g2_font_get_byte>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001a7a:	2104      	movs	r1, #4
 8001a7c:	6838      	ldr	r0, [r7, #0]
 8001a7e:	f7ff ffa5 	bl	80019cc <u8g2_font_get_byte>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001a8a:	2105      	movs	r1, #5
 8001a8c:	6838      	ldr	r0, [r7, #0]
 8001a8e:	f7ff ff9d 	bl	80019cc <u8g2_font_get_byte>
 8001a92:	4603      	mov	r3, r0
 8001a94:	461a      	mov	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001a9a:	2106      	movs	r1, #6
 8001a9c:	6838      	ldr	r0, [r7, #0]
 8001a9e:	f7ff ff95 	bl	80019cc <u8g2_font_get_byte>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001aaa:	2107      	movs	r1, #7
 8001aac:	6838      	ldr	r0, [r7, #0]
 8001aae:	f7ff ff8d 	bl	80019cc <u8g2_font_get_byte>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001aba:	2108      	movs	r1, #8
 8001abc:	6838      	ldr	r0, [r7, #0]
 8001abe:	f7ff ff85 	bl	80019cc <u8g2_font_get_byte>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001aca:	2109      	movs	r1, #9
 8001acc:	6838      	ldr	r0, [r7, #0]
 8001ace:	f7ff ff7d 	bl	80019cc <u8g2_font_get_byte>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	b25a      	sxtb	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001ada:	210a      	movs	r1, #10
 8001adc:	6838      	ldr	r0, [r7, #0]
 8001ade:	f7ff ff75 	bl	80019cc <u8g2_font_get_byte>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	b25a      	sxtb	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001aea:	210b      	movs	r1, #11
 8001aec:	6838      	ldr	r0, [r7, #0]
 8001aee:	f7ff ff6d 	bl	80019cc <u8g2_font_get_byte>
 8001af2:	4603      	mov	r3, r0
 8001af4:	b25a      	sxtb	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001afa:	210c      	movs	r1, #12
 8001afc:	6838      	ldr	r0, [r7, #0]
 8001afe:	f7ff ff65 	bl	80019cc <u8g2_font_get_byte>
 8001b02:	4603      	mov	r3, r0
 8001b04:	b25a      	sxtb	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001b0a:	210d      	movs	r1, #13
 8001b0c:	6838      	ldr	r0, [r7, #0]
 8001b0e:	f7ff ff5d 	bl	80019cc <u8g2_font_get_byte>
 8001b12:	4603      	mov	r3, r0
 8001b14:	b25a      	sxtb	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001b1a:	210e      	movs	r1, #14
 8001b1c:	6838      	ldr	r0, [r7, #0]
 8001b1e:	f7ff ff55 	bl	80019cc <u8g2_font_get_byte>
 8001b22:	4603      	mov	r3, r0
 8001b24:	b25a      	sxtb	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	6838      	ldr	r0, [r7, #0]
 8001b2e:	f7ff ff4d 	bl	80019cc <u8g2_font_get_byte>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b25a      	sxtb	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001b3a:	2110      	movs	r1, #16
 8001b3c:	6838      	ldr	r0, [r7, #0]
 8001b3e:	f7ff ff45 	bl	80019cc <u8g2_font_get_byte>
 8001b42:	4603      	mov	r3, r0
 8001b44:	b25a      	sxtb	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001b4a:	2111      	movs	r1, #17
 8001b4c:	6838      	ldr	r0, [r7, #0]
 8001b4e:	f7ff ff4f 	bl	80019f0 <u8g2_font_get_word>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001b5a:	2113      	movs	r1, #19
 8001b5c:	6838      	ldr	r0, [r7, #0]
 8001b5e:	f7ff ff47 	bl	80019f0 <u8g2_font_get_word>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461a      	mov	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001b6a:	2115      	movs	r1, #21
 8001b6c:	6838      	ldr	r0, [r7, #0]
 8001b6e:	f7ff ff3f 	bl	80019f0 <u8g2_font_get_word>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	82da      	strh	r2, [r3, #22]
#endif
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001b82:	b480      	push	{r7}
 8001b84:	b085      	sub	sp, #20
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7a9b      	ldrb	r3, [r3, #10]
 8001b92:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	7b7b      	ldrb	r3, [r7, #13]
 8001ba0:	fa42 f303 	asr.w	r3, r2, r3
 8001ba4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001ba6:	7b7b      	ldrb	r3, [r7, #13]
 8001ba8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8001baa:	7bba      	ldrb	r2, [r7, #14]
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	4413      	add	r3, r2
 8001bb0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001bb2:	7bbb      	ldrb	r3, [r7, #14]
 8001bb4:	2b07      	cmp	r3, #7
 8001bb6:	d91a      	bls.n	8001bee <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001bb8:	2308      	movs	r3, #8
 8001bba:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001bbc:	7b3a      	ldrb	r2, [r7, #12]
 8001bbe:	7b7b      	ldrb	r3, [r7, #13]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	7b3b      	ldrb	r3, [r7, #12]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	b25a      	sxtb	r2, r3
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001be8:	7bbb      	ldrb	r3, [r7, #14]
 8001bea:	3b08      	subs	r3, #8
 8001bec:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	4013      	ands	r3, r2
 8001c02:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7bba      	ldrb	r2, [r7, #14]
 8001c08:	729a      	strb	r2, [r3, #10]
  return val;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	4619      	mov	r1, r3
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ffaa 	bl	8001b82 <u8g2_font_decode_get_unsigned_bits>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001c32:	2301      	movs	r3, #1
 8001c34:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001c3c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	7bbb      	ldrb	r3, [r7, #14]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	73fb      	strb	r3, [r7, #15]
  return v;
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001c5e:	b490      	push	{r4, r7}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4604      	mov	r4, r0
 8001c66:	4608      	mov	r0, r1
 8001c68:	4611      	mov	r1, r2
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4623      	mov	r3, r4
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	4603      	mov	r3, r0
 8001c72:	71bb      	strb	r3, [r7, #6]
 8001c74:	460b      	mov	r3, r1
 8001c76:	717b      	strb	r3, [r7, #5]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001c7c:	793b      	ldrb	r3, [r7, #4]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d010      	beq.n	8001ca4 <u8g2_add_vector_y+0x46>
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	dc13      	bgt.n	8001cae <u8g2_add_vector_y+0x50>
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <u8g2_add_vector_y+0x32>
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d005      	beq.n	8001c9a <u8g2_add_vector_y+0x3c>
 8001c8e:	e00e      	b.n	8001cae <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 8001c90:	797a      	ldrb	r2, [r7, #5]
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	4413      	add	r3, r2
 8001c96:	71fb      	strb	r3, [r7, #7]
      break;
 8001c98:	e00e      	b.n	8001cb8 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 8001c9a:	79ba      	ldrb	r2, [r7, #6]
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	71fb      	strb	r3, [r7, #7]
      break;
 8001ca2:	e009      	b.n	8001cb8 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 8001ca4:	797b      	ldrb	r3, [r7, #5]
 8001ca6:	79fa      	ldrb	r2, [r7, #7]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	71fb      	strb	r3, [r7, #7]
      break;
 8001cac:	e004      	b.n	8001cb8 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 8001cae:	79bb      	ldrb	r3, [r7, #6]
 8001cb0:	79fa      	ldrb	r2, [r7, #7]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	71fb      	strb	r3, [r7, #7]
      break;      
 8001cb6:	bf00      	nop
  }
  return dy;
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc90      	pop	{r4, r7}
 8001cc2:	4770      	bx	lr

08001cc4 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001cc4:	b490      	push	{r4, r7}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4604      	mov	r4, r0
 8001ccc:	4608      	mov	r0, r1
 8001cce:	4611      	mov	r1, r2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4623      	mov	r3, r4
 8001cd4:	71fb      	strb	r3, [r7, #7]
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71bb      	strb	r3, [r7, #6]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	717b      	strb	r3, [r7, #5]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001ce2:	793b      	ldrb	r3, [r7, #4]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d010      	beq.n	8001d0a <u8g2_add_vector_x+0x46>
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	dc13      	bgt.n	8001d14 <u8g2_add_vector_x+0x50>
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <u8g2_add_vector_x+0x32>
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d005      	beq.n	8001d00 <u8g2_add_vector_x+0x3c>
 8001cf4:	e00e      	b.n	8001d14 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 8001cf6:	79ba      	ldrb	r2, [r7, #6]
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	71fb      	strb	r3, [r7, #7]
      break;
 8001cfe:	e00e      	b.n	8001d1e <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8001d00:	797b      	ldrb	r3, [r7, #5]
 8001d02:	79fa      	ldrb	r2, [r7, #7]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	71fb      	strb	r3, [r7, #7]
      break;
 8001d08:	e009      	b.n	8001d1e <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 8001d0a:	79bb      	ldrb	r3, [r7, #6]
 8001d0c:	79fa      	ldrb	r2, [r7, #7]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	71fb      	strb	r3, [r7, #7]
      break;
 8001d12:	e004      	b.n	8001d1e <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8001d14:	797a      	ldrb	r2, [r7, #5]
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	4413      	add	r3, r2
 8001d1a:	71fb      	strb	r3, [r7, #7]
      break;      
 8001d1c:	bf00      	nop
  }
  return dx;
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc90      	pop	{r4, r7}
 8001d28:	4770      	bx	lr

08001d2a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b088      	sub	sp, #32
 8001d2e:	af02      	add	r7, sp, #8
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	70fb      	strb	r3, [r7, #3]
 8001d36:	4613      	mov	r3, r2
 8001d38:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3358      	adds	r3, #88	; 0x58
 8001d3e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001d4a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001d52:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001d5a:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	7d7b      	ldrb	r3, [r7, #21]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001d68:	7dfa      	ldrb	r2, [r7, #23]
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d201      	bcs.n	8001d74 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	791b      	ldrb	r3, [r3, #4]
 8001d78:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	795b      	ldrb	r3, [r3, #5]
 8001d7e:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001d80:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001d84:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	7b9b      	ldrb	r3, [r3, #14]
 8001d8c:	7bb8      	ldrb	r0, [r7, #14]
 8001d8e:	f7ff ff99 	bl	8001cc4 <u8g2_add_vector_x>
 8001d92:	4603      	mov	r3, r0
 8001d94:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001d96:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001d9a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	7b9b      	ldrb	r3, [r3, #14]
 8001da2:	7b78      	ldrb	r0, [r7, #13]
 8001da4:	f7ff ff5b 	bl	8001c5e <u8g2_add_vector_y>
 8001da8:	4603      	mov	r3, r0
 8001daa:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001dac:	78bb      	ldrb	r3, [r7, #2]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00f      	beq.n	8001dd2 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	7b1a      	ldrb	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	7b9b      	ldrb	r3, [r3, #14]
 8001dc0:	7db8      	ldrb	r0, [r7, #22]
 8001dc2:	7b7a      	ldrb	r2, [r7, #13]
 8001dc4:	7bb9      	ldrb	r1, [r7, #14]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	4603      	mov	r3, r0
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fc45 	bl	800265a <u8g2_DrawHVLine>
 8001dd0:	e012      	b.n	8001df8 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	7adb      	ldrb	r3, [r3, #11]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10e      	bne.n	8001df8 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	7b5a      	ldrb	r2, [r3, #13]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	7b9b      	ldrb	r3, [r3, #14]
 8001de8:	7db8      	ldrb	r0, [r7, #22]
 8001dea:	7b7a      	ldrb	r2, [r7, #13]
 8001dec:	7bb9      	ldrb	r1, [r7, #14]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	4603      	mov	r3, r0
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fc31 	bl	800265a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001df8:	7dfa      	ldrb	r2, [r7, #23]
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d309      	bcc.n	8001e14 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8001e00:	7dfa      	ldrb	r2, [r7, #23]
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	757b      	strb	r3, [r7, #21]
    ly++;
 8001e0c:	7d3b      	ldrb	r3, [r7, #20]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001e12:	e79f      	b.n	8001d54 <u8g2_font_decode_len+0x2a>
      break;
 8001e14:	bf00      	nop
  }
  lx += cnt;
 8001e16:	7d7a      	ldrb	r2, [r7, #21]
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001e1e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8001e26:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	71da      	strb	r2, [r3, #7]
  
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3358      	adds	r3, #88	; 0x58
 8001e44:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001e58:	4619      	mov	r1, r3
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f7ff fe91 	bl	8001b82 <u8g2_font_decode_get_unsigned_bits>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b25a      	sxtb	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001e6e:	4619      	mov	r1, r3
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff fe86 	bl	8001b82 <u8g2_font_decode_get_unsigned_bits>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b25a      	sxtb	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	7b1b      	ldrb	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	735a      	strb	r2, [r3, #13]
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3358      	adds	r3, #88	; 0x58
 8001eb2:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001eb4:	6839      	ldr	r1, [r7, #0]
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffbd 	bl	8001e36 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001ec2:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6938      	ldr	r0, [r7, #16]
 8001ece:	f7ff fea3 	bl	8001c18 <u8g2_font_decode_get_signed_bits>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8001edc:	4619      	mov	r1, r3
 8001ede:	6938      	ldr	r0, [r7, #16]
 8001ee0:	f7ff fe9a 	bl	8001c18 <u8g2_font_decode_get_signed_bits>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001eee:	4619      	mov	r1, r3
 8001ef0:	6938      	ldr	r0, [r7, #16]
 8001ef2:	f7ff fe91 	bl	8001c18 <u8g2_font_decode_get_signed_bits>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f340 80cf 	ble.w	80020a4 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	7918      	ldrb	r0, [r3, #4]
 8001f0a:	7bfa      	ldrb	r2, [r7, #15]
 8001f0c:	7b7b      	ldrb	r3, [r7, #13]
 8001f0e:	4413      	add	r3, r2
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	425b      	negs	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	b25a      	sxtb	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	7b9b      	ldrb	r3, [r3, #14]
 8001f1c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001f20:	f7ff fed0 	bl	8001cc4 <u8g2_add_vector_x>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	7958      	ldrb	r0, [r3, #5]
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	7b7b      	ldrb	r3, [r7, #13]
 8001f34:	4413      	add	r3, r2
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	425b      	negs	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	b25a      	sxtb	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	7b9b      	ldrb	r3, [r3, #14]
 8001f42:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001f46:	f7ff fe8a 	bl	8001c5e <u8g2_add_vector_y>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	791b      	ldrb	r3, [r3, #4]
 8001f56:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	795b      	ldrb	r3, [r3, #5]
 8001f5c:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001f62:	7d7b      	ldrb	r3, [r7, #21]
 8001f64:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	7b9b      	ldrb	r3, [r3, #14]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d852      	bhi.n	8002014 <u8g2_font_decode_glyph+0x170>
 8001f6e:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <u8g2_font_decode_glyph+0xd0>)
 8001f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f74:	08001f85 	.word	0x08001f85
 8001f78:	08001f9d 	.word	0x08001f9d
 8001f7c:	08001fc1 	.word	0x08001fc1
 8001f80:	08001ff1 	.word	0x08001ff1
      {
	case 0:
	    x1 += decode->glyph_width;
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	7dbb      	ldrb	r3, [r7, #22]
 8001f8e:	4413      	add	r3, r2
 8001f90:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	7d3b      	ldrb	r3, [r7, #20]
 8001f96:	4413      	add	r3, r2
 8001f98:	753b      	strb	r3, [r7, #20]
	    break;
 8001f9a:	e03b      	b.n	8002014 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	7dfa      	ldrb	r2, [r7, #23]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001fa4:	7dfb      	ldrb	r3, [r7, #23]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001faa:	7dbb      	ldrb	r3, [r7, #22]
 8001fac:	3301      	adds	r3, #1
 8001fae:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	7d3b      	ldrb	r3, [r7, #20]
 8001fba:	4413      	add	r3, r2
 8001fbc:	753b      	strb	r3, [r7, #20]
	    break;
 8001fbe:	e029      	b.n	8002014 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	7dfa      	ldrb	r2, [r7, #23]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001fce:	7dfb      	ldrb	r3, [r7, #23]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001fd4:	7dbb      	ldrb	r3, [r7, #22]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	7d7a      	ldrb	r2, [r7, #21]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001fe2:	7d7b      	ldrb	r3, [r7, #21]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001fe8:	7d3b      	ldrb	r3, [r7, #20]
 8001fea:	3301      	adds	r3, #1
 8001fec:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001fee:	e011      	b.n	8002014 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	7dbb      	ldrb	r3, [r7, #22]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	7d7a      	ldrb	r2, [r7, #21]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002006:	7d7b      	ldrb	r3, [r7, #21]
 8002008:	3301      	adds	r3, #1
 800200a:	757b      	strb	r3, [r7, #21]
	    y1++;
 800200c:	7d3b      	ldrb	r3, [r7, #20]
 800200e:	3301      	adds	r3, #1
 8002010:	753b      	strb	r3, [r7, #20]
	    break;	  
 8002012:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8002014:	7db8      	ldrb	r0, [r7, #22]
 8002016:	7d7a      	ldrb	r2, [r7, #21]
 8002018:	7df9      	ldrb	r1, [r7, #23]
 800201a:	7d3b      	ldrb	r3, [r7, #20]
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	4603      	mov	r3, r0
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fc4c 	bl	80028be <u8g2_IsIntersection>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d102      	bne.n	8002032 <u8g2_font_decode_glyph+0x18e>
	return d;
 800202c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002030:	e03a      	b.n	80020a8 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2200      	movs	r2, #0
 8002036:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	2200      	movs	r2, #0
 800203c:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8002044:	4619      	mov	r1, r3
 8002046:	6938      	ldr	r0, [r7, #16]
 8002048:	f7ff fd9b 	bl	8001b82 <u8g2_font_decode_get_unsigned_bits>
 800204c:	4603      	mov	r3, r0
 800204e:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8002056:	4619      	mov	r1, r3
 8002058:	6938      	ldr	r0, [r7, #16]
 800205a:	f7ff fd92 	bl	8001b82 <u8g2_font_decode_get_unsigned_bits>
 800205e:	4603      	mov	r3, r0
 8002060:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	2200      	movs	r2, #0
 8002066:	4619      	mov	r1, r3
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff fe5e 	bl	8001d2a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800206e:	7abb      	ldrb	r3, [r7, #10]
 8002070:	2201      	movs	r2, #1
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff fe58 	bl	8001d2a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800207a:	2101      	movs	r1, #1
 800207c:	6938      	ldr	r0, [r7, #16]
 800207e:	f7ff fd80 	bl	8001b82 <u8g2_font_decode_get_unsigned_bits>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1ec      	bne.n	8002062 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800208e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002092:	429a      	cmp	r2, r3
 8002094:	dd00      	ble.n	8002098 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002096:	e7d2      	b.n	800203e <u8g2_font_decode_glyph+0x19a>
	break;
 8002098:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	7b1a      	ldrb	r2, [r3, #12]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 80020a4:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c0:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	3317      	adds	r3, #23
 80020c6:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	2bff      	cmp	r3, #255	; 0xff
 80020cc:	d82a      	bhi.n	8002124 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80020ce:	887b      	ldrh	r3, [r7, #2]
 80020d0:	2b60      	cmp	r3, #96	; 0x60
 80020d2:	d907      	bls.n	80020e4 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80020da:	461a      	mov	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	4413      	add	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	e009      	b.n	80020f8 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80020e4:	887b      	ldrh	r3, [r7, #2]
 80020e6:	2b40      	cmp	r3, #64	; 0x40
 80020e8:	d906      	bls.n	80020f8 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80020f0:	461a      	mov	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	4413      	add	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3301      	adds	r3, #1
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d04e      	beq.n	80021a0 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	887a      	ldrh	r2, [r7, #2]
 800210a:	429a      	cmp	r2, r3
 800210c:	d102      	bne.n	8002114 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3302      	adds	r3, #2
 8002112:	e049      	b.n	80021a8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	3301      	adds	r3, #1
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	4413      	add	r3, r2
 8002120:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002122:	e7e9      	b.n	80020f8 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800212a:	461a      	mov	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	4413      	add	r3, r2
 8002130:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002136:	2100      	movs	r1, #0
 8002138:	6938      	ldr	r0, [r7, #16]
 800213a:	f7ff fc59 	bl	80019f0 <u8g2_font_get_word>
 800213e:	4603      	mov	r3, r0
 8002140:	461a      	mov	r2, r3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	4413      	add	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002148:	2102      	movs	r1, #2
 800214a:	6938      	ldr	r0, [r7, #16]
 800214c:	f7ff fc50 	bl	80019f0 <u8g2_font_get_word>
 8002150:	4603      	mov	r3, r0
 8002152:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	3304      	adds	r3, #4
 8002158:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800215a:	89fa      	ldrh	r2, [r7, #14]
 800215c:	887b      	ldrh	r3, [r7, #2]
 800215e:	429a      	cmp	r2, r3
 8002160:	d3e9      	bcc.n	8002136 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8002168:	89fb      	ldrh	r3, [r7, #14]
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	b29a      	uxth	r2, r3
 8002176:	89fb      	ldrh	r3, [r7, #14]
 8002178:	4313      	orrs	r3, r2
 800217a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800217c:	89fb      	ldrh	r3, [r7, #14]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d010      	beq.n	80021a4 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8002182:	89fa      	ldrh	r2, [r7, #14]
 8002184:	887b      	ldrh	r3, [r7, #2]
 8002186:	429a      	cmp	r2, r3
 8002188:	d102      	bne.n	8002190 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3303      	adds	r3, #3
 800218e:	e00b      	b.n	80021a8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3302      	adds	r3, #2
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	4413      	add	r3, r2
 800219c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800219e:	e7e0      	b.n	8002162 <u8g2_font_get_glyph_data+0xb2>
	break;
 80021a0:	bf00      	nop
 80021a2:	e000      	b.n	80021a6 <u8g2_font_get_glyph_data+0xf6>
	break;
 80021a4:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	4608      	mov	r0, r1
 80021ba:	4611      	mov	r1, r2
 80021bc:	461a      	mov	r2, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	70fb      	strb	r3, [r7, #3]
 80021c2:	460b      	mov	r3, r1
 80021c4:	70bb      	strb	r3, [r7, #2]
 80021c6:	4613      	mov	r3, r2
 80021c8:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	78ba      	ldrb	r2, [r7, #2]
 80021da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80021de:	883b      	ldrh	r3, [r7, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ff64 	bl	80020b0 <u8g2_font_get_glyph_data>
 80021e8:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff fe56 	bl	8001ea4 <u8g2_font_decode_glyph>
 80021f8:	4603      	mov	r3, r0
 80021fa:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	4608      	mov	r0, r1
 8002232:	4611      	mov	r1, r2
 8002234:	461a      	mov	r2, r3
 8002236:	4603      	mov	r3, r0
 8002238:	70fb      	strb	r3, [r7, #3]
 800223a:	460b      	mov	r3, r1
 800223c:	70bb      	strb	r3, [r7, #2]
 800223e:	4613      	mov	r3, r2
 8002240:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8002248:	2b03      	cmp	r3, #3
 800224a:	d833      	bhi.n	80022b4 <u8g2_DrawGlyph+0x8c>
 800224c:	a201      	add	r2, pc, #4	; (adr r2, 8002254 <u8g2_DrawGlyph+0x2c>)
 800224e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002252:	bf00      	nop
 8002254:	08002265 	.word	0x08002265
 8002258:	08002279 	.word	0x08002279
 800225c:	0800228d 	.word	0x0800228d
 8002260:	080022a1 	.word	0x080022a1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	78bb      	ldrb	r3, [r7, #2]
 8002272:	4413      	add	r3, r2
 8002274:	70bb      	strb	r3, [r7, #2]
      break;
 8002276:	e01d      	b.n	80022b4 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
 8002280:	4603      	mov	r3, r0
 8002282:	461a      	mov	r2, r3
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	70fb      	strb	r3, [r7, #3]
      break;
 800228a:	e013      	b.n	80022b4 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
 8002294:	4603      	mov	r3, r0
 8002296:	461a      	mov	r2, r3
 8002298:	78bb      	ldrb	r3, [r7, #2]
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	70bb      	strb	r3, [r7, #2]
      break;
 800229e:	e009      	b.n	80022b4 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4798      	blx	r3
 80022a8:	4603      	mov	r3, r0
 80022aa:	461a      	mov	r2, r3
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	4413      	add	r3, r2
 80022b0:	70fb      	strb	r3, [r7, #3]
      break;
 80022b2:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80022b4:	883b      	ldrh	r3, [r7, #0]
 80022b6:	78ba      	ldrb	r2, [r7, #2]
 80022b8:	78f9      	ldrb	r1, [r7, #3]
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ff78 	bl	80021b0 <u8g2_font_draw_glyph>
 80022c0:	4603      	mov	r3, r0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop

080022cc <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	72fb      	strb	r3, [r7, #11]
 80022da:	4613      	mov	r3, r2
 80022dc:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fdc1 	bl	8002e66 <u8x8_utf8_init>
  sum = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	7812      	ldrb	r2, [r2, #0]
 80022f0:	4611      	mov	r1, r2
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	4798      	blx	r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80022fa:	8abb      	ldrh	r3, [r7, #20]
 80022fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002300:	4293      	cmp	r3, r2
 8002302:	d038      	beq.n	8002376 <u8g2_draw_string+0xaa>
      break;
    str++;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3301      	adds	r3, #1
 8002308:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800230a:	8abb      	ldrh	r3, [r7, #20]
 800230c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002310:	4293      	cmp	r3, r2
 8002312:	d0e9      	beq.n	80022e8 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002314:	8abb      	ldrh	r3, [r7, #20]
 8002316:	7aba      	ldrb	r2, [r7, #10]
 8002318:	7af9      	ldrb	r1, [r7, #11]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f7ff ff84 	bl	8002228 <u8g2_DrawGlyph>
 8002320:	4603      	mov	r3, r0
 8002322:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800232a:	2b03      	cmp	r3, #3
 800232c:	d81e      	bhi.n	800236c <u8g2_draw_string+0xa0>
 800232e:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <u8g2_draw_string+0x68>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	08002345 	.word	0x08002345
 8002338:	0800234f 	.word	0x0800234f
 800233c:	08002359 	.word	0x08002359
 8002340:	08002363 	.word	0x08002363
      {
	case 0:
	  x += delta;
 8002344:	7afa      	ldrb	r2, [r7, #11]
 8002346:	7cfb      	ldrb	r3, [r7, #19]
 8002348:	4413      	add	r3, r2
 800234a:	72fb      	strb	r3, [r7, #11]
	  break;
 800234c:	e00e      	b.n	800236c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800234e:	7aba      	ldrb	r2, [r7, #10]
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	4413      	add	r3, r2
 8002354:	72bb      	strb	r3, [r7, #10]
	  break;
 8002356:	e009      	b.n	800236c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8002358:	7afa      	ldrb	r2, [r7, #11]
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	72fb      	strb	r3, [r7, #11]
	  break;
 8002360:	e004      	b.n	800236c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8002362:	7aba      	ldrb	r2, [r7, #10]
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	72bb      	strb	r3, [r7, #10]
	  break;
 800236a:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 800236c:	7dfa      	ldrb	r2, [r7, #23]
 800236e:	7cfb      	ldrb	r3, [r7, #19]
 8002370:	4413      	add	r3, r2
 8002372:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002374:	e7b8      	b.n	80022e8 <u8g2_draw_string+0x1c>
      break;
 8002376:	bf00      	nop
    }
  }
  return sum;
 8002378:	7dfb      	ldrb	r3, [r7, #23]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop

08002384 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	72fb      	strb	r3, [r7, #11]
 8002392:	4613      	mov	r3, r2
 8002394:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <u8g2_DrawStr+0x30>)
 800239a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800239c:	7aba      	ldrb	r2, [r7, #10]
 800239e:	7af9      	ldrb	r1, [r7, #11]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f7ff ff92 	bl	80022cc <u8g2_draw_string>
 80023a8:	4603      	mov	r3, r0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	08002e83 	.word	0x08002e83

080023b8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d05d      	beq.n	8002484 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d04d      	beq.n	8002486 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d11c      	bne.n	800242e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 8002400:	429a      	cmp	r2, r3
 8002402:	da05      	bge.n	8002410 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 800241c:	429a      	cmp	r2, r3
 800241e:	dd32      	ble.n	8002486 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800242c:	e02b      	b.n	8002486 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8002434:	461a      	mov	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800243c:	4619      	mov	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8002444:	440b      	add	r3, r1
 8002446:	429a      	cmp	r2, r3
 8002448:	da0d      	bge.n	8002466 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8002450:	b2da      	uxtb	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8002458:	b2db      	uxtb	r3, r3
 800245a:	4413      	add	r3, r2
 800245c:	b2db      	uxtb	r3, r3
 800245e:	b25a      	sxtb	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8002472:	429a      	cmp	r2, r3
 8002474:	dd07      	ble.n	8002486 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8002482:	e000      	b.n	8002486 <u8g2_UpdateRefHeight+0xce>
    return;
 8002484:	bf00      	nop
  }  
}
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <u8g2_SetFontRefHeightExtendedText>:
  u8g2->font_height_mode = U8G2_FONT_HEIGHT_MODE_TEXT;
  u8g2_UpdateRefHeight(u8g2);
}

void u8g2_SetFontRefHeightExtendedText(u8g2_t *u8g2)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  u8g2->font_height_mode = U8G2_FONT_HEIGHT_MODE_XTEXT;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  u8g2_UpdateRefHeight(u8g2);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff89 	bl	80023b8 <u8g2_UpdateRefHeight>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  return 0;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <u8g2_SetFontPosBaseline+0x1c>)
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	080024af 	.word	0x080024af

080024e4 <u8g2_font_calc_vref_top>:
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  u8g2_uint_t tmp;
  /* reference pos is one pixel above the upper edge of the reference glyph */
  tmp = (u8g2_uint_t)(u8g2->font_ref_ascent);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 80024f2:	73fb      	strb	r3, [r7, #15]
  tmp++;
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	3301      	adds	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
  return tmp;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a04      	ldr	r2, [pc, #16]	; (8002524 <u8g2_SetFontPosTop+0x1c>)
 8002514:	655a      	str	r2, [r3, #84]	; 0x54
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	080024e5 	.word	0x080024e5

08002528 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d00b      	beq.n	8002554 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3368      	adds	r3, #104	; 0x68
 8002546:	6839      	ldr	r1, [r7, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fa71 	bl	8001a30 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff ff32 	bl	80023b8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <u8g2_SetFontDirection>:
}



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	4611      	mov	r1, r2
 8002588:	461a      	mov	r2, r3
 800258a:	460b      	mov	r3, r1
 800258c:	71fb      	strb	r3, [r7, #7]
 800258e:	4613      	mov	r3, r2
 8002590:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781a      	ldrb	r2, [r3, #0]
 80025a0:	7dbb      	ldrb	r3, [r7, #22]
 80025a2:	4413      	add	r3, r2
 80025a4:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80025a6:	7dfa      	ldrb	r2, [r7, #23]
 80025a8:	7dbb      	ldrb	r3, [r7, #22]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d90b      	bls.n	80025c6 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80025ae:	7dfa      	ldrb	r2, [r7, #23]
 80025b0:	79bb      	ldrb	r3, [r7, #6]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d205      	bcs.n	80025c2 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80025b6:	79bb      	ldrb	r3, [r7, #6]
 80025b8:	75bb      	strb	r3, [r7, #22]
      b--;
 80025ba:	7dbb      	ldrb	r3, [r7, #22]
 80025bc:	3b01      	subs	r3, #1
 80025be:	75bb      	strb	r3, [r7, #22]
 80025c0:	e001      	b.n	80025c6 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80025c6:	7dfa      	ldrb	r2, [r7, #23]
 80025c8:	79bb      	ldrb	r3, [r7, #6]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d301      	bcc.n	80025d2 <u8g2_clip_intersection2+0x56>
    return 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e01c      	b.n	800260c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80025d2:	7dba      	ldrb	r2, [r7, #22]
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d801      	bhi.n	80025de <u8g2_clip_intersection2+0x62>
    return 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	e016      	b.n	800260c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80025de:	7dfa      	ldrb	r2, [r7, #23]
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d201      	bcs.n	80025ea <u8g2_clip_intersection2+0x6e>
    a = c;
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 80025ea:	7dba      	ldrb	r2, [r7, #22]
 80025ec:	79bb      	ldrb	r3, [r7, #6]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d901      	bls.n	80025f6 <u8g2_clip_intersection2+0x7a>
    b = d;
 80025f2:	79bb      	ldrb	r3, [r7, #6]
 80025f4:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	7dfa      	ldrb	r2, [r7, #23]
 80025fa:	701a      	strb	r2, [r3, #0]
  b -= a;
 80025fc:	7dba      	ldrb	r2, [r7, #22]
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	7dba      	ldrb	r2, [r7, #22]
 8002608:	701a      	strb	r2, [r3, #0]
  return 1;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b085      	sub	sp, #20
 800261c:	af02      	add	r7, sp, #8
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	4608      	mov	r0, r1
 8002622:	4611      	mov	r1, r2
 8002624:	461a      	mov	r2, r3
 8002626:	4603      	mov	r3, r0
 8002628:	70fb      	strb	r3, [r7, #3]
 800262a:	460b      	mov	r3, r1
 800262c:	70bb      	strb	r3, [r7, #2]
 800262e:	4613      	mov	r3, r2
 8002630:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002638:	78ba      	ldrb	r2, [r7, #2]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002642:	7878      	ldrb	r0, [r7, #1]
 8002644:	78ba      	ldrb	r2, [r7, #2]
 8002646:	78f9      	ldrb	r1, [r7, #3]
 8002648:	7e3b      	ldrb	r3, [r7, #24]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4603      	mov	r3, r0
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	47a0      	blx	r4
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	bd90      	pop	{r4, r7, pc}

0800265a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800265a:	b590      	push	{r4, r7, lr}
 800265c:	b085      	sub	sp, #20
 800265e:	af02      	add	r7, sp, #8
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	4608      	mov	r0, r1
 8002664:	4611      	mov	r1, r2
 8002666:	461a      	mov	r2, r3
 8002668:	4603      	mov	r3, r0
 800266a:	70fb      	strb	r3, [r7, #3]
 800266c:	460b      	mov	r3, r1
 800266e:	70bb      	strb	r3, [r7, #2]
 8002670:	4613      	mov	r3, r2
 8002672:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800267a:	2b00      	cmp	r3, #0
 800267c:	d06d      	beq.n	800275a <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800267e:	787b      	ldrb	r3, [r7, #1]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d06a      	beq.n	800275a <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002684:	787b      	ldrb	r3, [r7, #1]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d918      	bls.n	80026bc <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800268a:	7e3b      	ldrb	r3, [r7, #24]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d109      	bne.n	80026a4 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	787b      	ldrb	r3, [r7, #1]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	70fb      	strb	r3, [r7, #3]
	  x++;
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	3301      	adds	r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	70fb      	strb	r3, [r7, #3]
 80026a2:	e00b      	b.n	80026bc <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80026a4:	7e3b      	ldrb	r3, [r7, #24]
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d108      	bne.n	80026bc <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80026aa:	78ba      	ldrb	r2, [r7, #2]
 80026ac:	787b      	ldrb	r3, [r7, #1]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	70bb      	strb	r3, [r7, #2]
	  y++;
 80026b4:	78bb      	ldrb	r3, [r7, #2]
 80026b6:	3301      	adds	r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80026bc:	7e3b      	ldrb	r3, [r7, #24]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 80026c4:	7e3b      	ldrb	r3, [r7, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d119      	bne.n	80026fe <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80026d0:	78bb      	ldrb	r3, [r7, #2]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d838      	bhi.n	8002748 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80026dc:	78bb      	ldrb	r3, [r7, #2]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d934      	bls.n	800274c <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80026ee:	1c79      	adds	r1, r7, #1
 80026f0:	1cf8      	adds	r0, r7, #3
 80026f2:	f7ff ff43 	bl	800257c <u8g2_clip_intersection2>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d119      	bne.n	8002730 <u8g2_DrawHVLine+0xd6>
	  return;
 80026fc:	e02d      	b.n	800275a <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	429a      	cmp	r2, r3
 8002708:	d822      	bhi.n	8002750 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	429a      	cmp	r2, r3
 8002714:	d91e      	bls.n	8002754 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002722:	1c79      	adds	r1, r7, #1
 8002724:	1cb8      	adds	r0, r7, #2
 8002726:	f7ff ff29 	bl	800257c <u8g2_clip_intersection2>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002734:	689c      	ldr	r4, [r3, #8]
 8002736:	78f9      	ldrb	r1, [r7, #3]
 8002738:	78ba      	ldrb	r2, [r7, #2]
 800273a:	7878      	ldrb	r0, [r7, #1]
 800273c:	7e3b      	ldrb	r3, [r7, #24]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	4603      	mov	r3, r0
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	47a0      	blx	r4
 8002746:	e008      	b.n	800275a <u8g2_DrawHVLine+0x100>
	  return;
 8002748:	bf00      	nop
 800274a:	e006      	b.n	800275a <u8g2_DrawHVLine+0x100>
	  return;
 800274c:	bf00      	nop
 800274e:	e004      	b.n	800275a <u8g2_DrawHVLine+0x100>
	  return;
 8002750:	bf00      	nop
 8002752:	e002      	b.n	800275a <u8g2_DrawHVLine+0x100>
	  return;
 8002754:	bf00      	nop
 8002756:	e000      	b.n	800275a <u8g2_DrawHVLine+0x100>
	  return;
 8002758:	bf00      	nop
    }
}
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bd90      	pop	{r4, r7, pc}

08002760 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af02      	add	r7, sp, #8
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	4608      	mov	r0, r1
 800276a:	4611      	mov	r1, r2
 800276c:	461a      	mov	r2, r3
 800276e:	4603      	mov	r3, r0
 8002770:	70fb      	strb	r3, [r7, #3]
 8002772:	460b      	mov	r3, r1
 8002774:	70bb      	strb	r3, [r7, #2]
 8002776:	4613      	mov	r3, r2
 8002778:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800277a:	787b      	ldrb	r3, [r7, #1]
 800277c:	78ba      	ldrb	r2, [r7, #2]
 800277e:	78f9      	ldrb	r1, [r7, #3]
 8002780:	2000      	movs	r0, #0
 8002782:	9000      	str	r0, [sp, #0]
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff68 	bl	800265a <u8g2_DrawHVLine>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b084      	sub	sp, #16
 8002796:	af02      	add	r7, sp, #8
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	4608      	mov	r0, r1
 800279c:	4611      	mov	r1, r2
 800279e:	461a      	mov	r2, r3
 80027a0:	4603      	mov	r3, r0
 80027a2:	70fb      	strb	r3, [r7, #3]
 80027a4:	460b      	mov	r3, r1
 80027a6:	70bb      	strb	r3, [r7, #2]
 80027a8:	4613      	mov	r3, r2
 80027aa:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 80027ac:	787b      	ldrb	r3, [r7, #1]
 80027ae:	78ba      	ldrb	r2, [r7, #2]
 80027b0:	78f9      	ldrb	r1, [r7, #3]
 80027b2:	2001      	movs	r0, #1
 80027b4:	9000      	str	r0, [sp, #0]
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ff4f 	bl	800265a <u8g2_DrawHVLine>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
 80027d0:	4613      	mov	r3, r2
 80027d2:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80027da:	78ba      	ldrb	r2, [r7, #2]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d31a      	bcc.n	8002816 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80027e6:	78ba      	ldrb	r2, [r7, #2]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d216      	bcs.n	800281a <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d312      	bcc.n	800281e <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	429a      	cmp	r2, r3
 8002802:	d20e      	bcs.n	8002822 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002804:	78ba      	ldrb	r2, [r7, #2]
 8002806:	78f9      	ldrb	r1, [r7, #3]
 8002808:	2300      	movs	r3, #0
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2301      	movs	r3, #1
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff ff23 	bl	800265a <u8g2_DrawHVLine>
 8002814:	e006      	b.n	8002824 <u8g2_DrawPixel+0x60>
    return;
 8002816:	bf00      	nop
 8002818:	e004      	b.n	8002824 <u8g2_DrawPixel+0x60>
    return;
 800281a:	bf00      	nop
 800281c:	e002      	b.n	8002824 <u8g2_DrawPixel+0x60>
    return;
 800281e:	bf00      	nop
 8002820:	e000      	b.n	8002824 <u8g2_DrawPixel+0x60>
    return;
 8002822:	bf00      	nop
}
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  if ( color >= 3 )
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d903      	bls.n	800284c <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002858:	b490      	push	{r4, r7}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	4604      	mov	r4, r0
 8002860:	4608      	mov	r0, r1
 8002862:	4611      	mov	r1, r2
 8002864:	461a      	mov	r2, r3
 8002866:	4623      	mov	r3, r4
 8002868:	71fb      	strb	r3, [r7, #7]
 800286a:	4603      	mov	r3, r0
 800286c:	71bb      	strb	r3, [r7, #6]
 800286e:	460b      	mov	r3, r1
 8002870:	717b      	strb	r3, [r7, #5]
 8002872:	4613      	mov	r3, r2
 8002874:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8002876:	797a      	ldrb	r2, [r7, #5]
 8002878:	79bb      	ldrb	r3, [r7, #6]
 800287a:	429a      	cmp	r2, r3
 800287c:	d20d      	bcs.n	800289a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800287e:	793a      	ldrb	r2, [r7, #4]
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	429a      	cmp	r2, r3
 8002884:	d901      	bls.n	800288a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002886:	2301      	movs	r3, #1
 8002888:	e014      	b.n	80028b4 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800288a:	797a      	ldrb	r2, [r7, #5]
 800288c:	793b      	ldrb	r3, [r7, #4]
 800288e:	429a      	cmp	r2, r3
 8002890:	d901      	bls.n	8002896 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002892:	2301      	movs	r3, #1
 8002894:	e00e      	b.n	80028b4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002896:	2300      	movs	r3, #0
 8002898:	e00c      	b.n	80028b4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800289a:	793a      	ldrb	r2, [r7, #4]
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d907      	bls.n	80028b2 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80028a2:	797a      	ldrb	r2, [r7, #5]
 80028a4:	793b      	ldrb	r3, [r7, #4]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d901      	bls.n	80028ae <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e002      	b.n	80028b4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80028b2:	2300      	movs	r3, #0
    }
  }
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc90      	pop	{r4, r7}
 80028bc:	4770      	bx	lr

080028be <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	4608      	mov	r0, r1
 80028c8:	4611      	mov	r1, r2
 80028ca:	461a      	mov	r2, r3
 80028cc:	4603      	mov	r3, r0
 80028ce:	70fb      	strb	r3, [r7, #3]
 80028d0:	460b      	mov	r3, r1
 80028d2:	70bb      	strb	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 80028e4:	7c3b      	ldrb	r3, [r7, #16]
 80028e6:	78ba      	ldrb	r2, [r7, #2]
 80028e8:	f7ff ffb6 	bl	8002858 <u8g2_is_intersection_decision_tree>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <u8g2_IsIntersection+0x38>
    return 0; 
 80028f2:	2300      	movs	r3, #0
 80028f4:	e00a      	b.n	800290c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 8002902:	787b      	ldrb	r3, [r7, #1]
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	f7ff ffa7 	bl	8002858 <u8g2_is_intersection_decision_tree>
 800290a:	4603      	mov	r3, r0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	4608      	mov	r0, r1
 800291e:	4611      	mov	r1, r2
 8002920:	461a      	mov	r2, r3
 8002922:	4603      	mov	r3, r0
 8002924:	70fb      	strb	r3, [r7, #3]
 8002926:	460b      	mov	r3, r1
 8002928:	70bb      	strb	r3, [r7, #2]
 800292a:	4613      	mov	r3, r2
 800292c:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	727b      	strb	r3, [r7, #9]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	787b      	ldrb	r3, [r7, #1]
 8002936:	429a      	cmp	r2, r3
 8002938:	d904      	bls.n	8002944 <u8g2_DrawLine+0x30>
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	787b      	ldrb	r3, [r7, #1]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	737b      	strb	r3, [r7, #13]
 8002942:	e003      	b.n	800294c <u8g2_DrawLine+0x38>
 8002944:	787a      	ldrb	r2, [r7, #1]
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	737b      	strb	r3, [r7, #13]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800294c:	78ba      	ldrb	r2, [r7, #2]
 800294e:	7e3b      	ldrb	r3, [r7, #24]
 8002950:	429a      	cmp	r2, r3
 8002952:	d904      	bls.n	800295e <u8g2_DrawLine+0x4a>
 8002954:	78ba      	ldrb	r2, [r7, #2]
 8002956:	7e3b      	ldrb	r3, [r7, #24]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	733b      	strb	r3, [r7, #12]
 800295c:	e003      	b.n	8002966 <u8g2_DrawLine+0x52>
 800295e:	7e3a      	ldrb	r2, [r7, #24]
 8002960:	78bb      	ldrb	r3, [r7, #2]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	733b      	strb	r3, [r7, #12]

  if ( dy > dx ) 
 8002966:	7b3a      	ldrb	r2, [r7, #12]
 8002968:	7b7b      	ldrb	r3, [r7, #13]
 800296a:	429a      	cmp	r2, r3
 800296c:	d913      	bls.n	8002996 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 800296e:	2301      	movs	r3, #1
 8002970:	727b      	strb	r3, [r7, #9]
    tmp = dx; dx =dy; dy = tmp;
 8002972:	7b7b      	ldrb	r3, [r7, #13]
 8002974:	723b      	strb	r3, [r7, #8]
 8002976:	7b3b      	ldrb	r3, [r7, #12]
 8002978:	737b      	strb	r3, [r7, #13]
 800297a:	7a3b      	ldrb	r3, [r7, #8]
 800297c:	733b      	strb	r3, [r7, #12]
    tmp = x1; x1 =y1; y1 = tmp;
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	723b      	strb	r3, [r7, #8]
 8002982:	78bb      	ldrb	r3, [r7, #2]
 8002984:	70fb      	strb	r3, [r7, #3]
 8002986:	7a3b      	ldrb	r3, [r7, #8]
 8002988:	70bb      	strb	r3, [r7, #2]
    tmp = x2; x2 =y2; y2 = tmp;
 800298a:	787b      	ldrb	r3, [r7, #1]
 800298c:	723b      	strb	r3, [r7, #8]
 800298e:	7e3b      	ldrb	r3, [r7, #24]
 8002990:	707b      	strb	r3, [r7, #1]
 8002992:	7a3b      	ldrb	r3, [r7, #8]
 8002994:	763b      	strb	r3, [r7, #24]
  }
  if ( x1 > x2 ) 
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	787b      	ldrb	r3, [r7, #1]
 800299a:	429a      	cmp	r2, r3
 800299c:	d90b      	bls.n	80029b6 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	723b      	strb	r3, [r7, #8]
 80029a2:	787b      	ldrb	r3, [r7, #1]
 80029a4:	70fb      	strb	r3, [r7, #3]
 80029a6:	7a3b      	ldrb	r3, [r7, #8]
 80029a8:	707b      	strb	r3, [r7, #1]
    tmp = y1; y1 =y2; y2 = tmp;
 80029aa:	78bb      	ldrb	r3, [r7, #2]
 80029ac:	723b      	strb	r3, [r7, #8]
 80029ae:	7e3b      	ldrb	r3, [r7, #24]
 80029b0:	70bb      	strb	r3, [r7, #2]
 80029b2:	7a3b      	ldrb	r3, [r7, #8]
 80029b4:	763b      	strb	r3, [r7, #24]
  }
  err = dx >> 1;
 80029b6:	7b7b      	ldrb	r3, [r7, #13]
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	72fb      	strb	r3, [r7, #11]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 80029be:	7e3a      	ldrb	r2, [r7, #24]
 80029c0:	78bb      	ldrb	r3, [r7, #2]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d902      	bls.n	80029cc <u8g2_DrawLine+0xb8>
 80029c6:	2301      	movs	r3, #1
 80029c8:	72bb      	strb	r3, [r7, #10]
 80029ca:	e001      	b.n	80029d0 <u8g2_DrawLine+0xbc>
 80029cc:	23ff      	movs	r3, #255	; 0xff
 80029ce:	72bb      	strb	r3, [r7, #10]
  y = y1;
 80029d0:	78bb      	ldrb	r3, [r7, #2]
 80029d2:	73bb      	strb	r3, [r7, #14]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
 80029d4:	787b      	ldrb	r3, [r7, #1]
 80029d6:	2bff      	cmp	r3, #255	; 0xff
 80029d8:	d102      	bne.n	80029e0 <u8g2_DrawLine+0xcc>
    x2--;
 80029da:	787b      	ldrb	r3, [r7, #1]
 80029dc:	3b01      	subs	r3, #1
 80029de:	707b      	strb	r3, [r7, #1]
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	73fb      	strb	r3, [r7, #15]
 80029e4:	e024      	b.n	8002a30 <u8g2_DrawLine+0x11c>
  {
    if ( swapxy == 0 ) 
 80029e6:	7a7b      	ldrb	r3, [r7, #9]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d106      	bne.n	80029fa <u8g2_DrawLine+0xe6>
      u8g2_DrawPixel(u8g2, x, y); 
 80029ec:	7bba      	ldrb	r2, [r7, #14]
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	4619      	mov	r1, r3
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff fee6 	bl	80027c4 <u8g2_DrawPixel>
 80029f8:	e005      	b.n	8002a06 <u8g2_DrawLine+0xf2>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 80029fa:	7bfa      	ldrb	r2, [r7, #15]
 80029fc:	7bbb      	ldrb	r3, [r7, #14]
 80029fe:	4619      	mov	r1, r3
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff fedf 	bl	80027c4 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 8002a06:	7afa      	ldrb	r2, [r7, #11]
 8002a08:	7b3b      	ldrb	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	72fb      	strb	r3, [r7, #11]
    if ( err < 0 ) 
 8002a10:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	da08      	bge.n	8002a2a <u8g2_DrawLine+0x116>
    {
      y += (u8g2_uint_t)ystep;
 8002a18:	7aba      	ldrb	r2, [r7, #10]
 8002a1a:	7bbb      	ldrb	r3, [r7, #14]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	73bb      	strb	r3, [r7, #14]
      err += (u8g2_uint_t)dx;
 8002a20:	7afa      	ldrb	r2, [r7, #11]
 8002a22:	7b7b      	ldrb	r3, [r7, #13]
 8002a24:	4413      	add	r3, r2
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	72fb      	strb	r3, [r7, #11]
  for( x = x1; x <= x2; x++ )
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	787b      	ldrb	r3, [r7, #1]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d9d6      	bls.n	80029e6 <u8g2_DrawLine+0xd2>
    }
  }
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b087      	sub	sp, #28
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	4608      	mov	r0, r1
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	461a      	mov	r2, r3
 8002a50:	4603      	mov	r3, r0
 8002a52:	70fb      	strb	r3, [r7, #3]
 8002a54:	460b      	mov	r3, r1
 8002a56:	70bb      	strb	r3, [r7, #2]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002a5c:	78bb      	ldrb	r3, [r7, #2]
 8002a5e:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8002a6c:	7c3a      	ldrb	r2, [r7, #16]
 8002a6e:	7cfb      	ldrb	r3, [r7, #19]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d801      	bhi.n	8002a8c <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002a88:	7c3b      	ldrb	r3, [r7, #16]
 8002a8a:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d001      	beq.n	8002a9a <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002a96:	7c3b      	ldrb	r3, [r7, #16]
 8002a98:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002a9a:	78bb      	ldrb	r3, [r7, #2]
 8002a9c:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8002a9e:	89fb      	ldrh	r3, [r7, #14]
 8002aa0:	f023 0307 	bic.w	r3, r3, #7
 8002aa4:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	7c1b      	ldrb	r3, [r3, #16]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	89fa      	ldrh	r2, [r7, #14]
 8002ab0:	fb12 f303 	smulbb	r3, r2, r3
 8002ab4:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aba:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8002abc:	89fb      	ldrh	r3, [r7, #14]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
  ptr += x;
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4413      	add	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8002acc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d117      	bne.n	8002b04 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	781a      	ldrb	r2, [r3, #0]
 8002ad8:	7cbb      	ldrb	r3, [r7, #18]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	781a      	ldrb	r2, [r3, #0]
 8002ae6:	7c7b      	ldrb	r3, [r7, #17]
 8002ae8:	4053      	eors	r3, r2
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	3301      	adds	r3, #1
 8002af4:	617b      	str	r3, [r7, #20]
	len--;
 8002af6:	787b      	ldrb	r3, [r7, #1]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8002afc:	787b      	ldrb	r3, [r7, #1]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e8      	bne.n	8002ad4 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002b02:	e039      	b.n	8002b78 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	7cbb      	ldrb	r3, [r7, #18]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	781a      	ldrb	r2, [r3, #0]
 8002b16:	7c7b      	ldrb	r3, [r7, #17]
 8002b18:	4053      	eors	r3, r2
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	3301      	adds	r3, #1
 8002b24:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	74fb      	strb	r3, [r7, #19]
      len--;
 8002b2e:	787b      	ldrb	r3, [r7, #1]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d115      	bne.n	8002b66 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b40:	461a      	mov	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	4413      	add	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d801      	bhi.n	8002b56 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8002b52:	2301      	movs	r3, #1
 8002b54:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d008      	beq.n	8002b72 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	747b      	strb	r3, [r7, #17]
 8002b64:	e005      	b.n	8002b72 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8002b66:	7cbb      	ldrb	r3, [r7, #18]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8002b6c:	7c7b      	ldrb	r3, [r7, #17]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8002b72:	787b      	ldrb	r3, [r7, #1]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1c5      	bne.n	8002b04 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	22ff      	movs	r2, #255	; 0xff
 8002ba0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	22ff      	movs	r2, #255	; 0xff
 8002ba8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	79fa      	ldrb	r2, [r7, #7]
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f7ff ffaf 	bl	8002b84 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f7ff fc4c 	bl	80024c4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c50:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	7c1b      	ldrb	r3, [r3, #16]
 8002c64:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	2b1f      	cmp	r3, #31
 8002c6a:	d901      	bls.n	8002c70 <u8g2_update_dimension_common+0x34>
    t = 31;
 8002c6c:	231f      	movs	r3, #31
 8002c6e:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c84:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9a:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8002ca4:	4413      	add	r3, r2
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	7c52      	ldrb	r2, [r2, #17]
 8002caa:	4293      	cmp	r3, r2
 8002cac:	dd06      	ble.n	8002cbc <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	7c5a      	ldrb	r2, [r3, #17]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	22f0      	movs	r2, #240	; 0xf0
 8002cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	8a9b      	ldrh	r3, [r3, #20]
 8002cf8:	2bf0      	cmp	r3, #240	; 0xf0
 8002cfa:	d805      	bhi.n	8002d08 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	8a9b      	ldrh	r3, [r3, #20]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	8adb      	ldrh	r3, [r3, #22]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	4603      	mov	r3, r0
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fdba 	bl	80028be <u8g2_IsIntersection>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d104      	bne.n	8002d5a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002d58:	e03b      	b.n	8002dd2 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d205      	bcs.n	8002d7e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d905      	bls.n	8002d9a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d205      	bcs.n	8002db6 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d905      	bls.n	8002dd2 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ff2a 	bl	8002c3c <u8g2_update_dimension_common>
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff ff7b 	bl	8002d20 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af02      	add	r7, sp, #8
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	4608      	mov	r0, r1
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4603      	mov	r3, r0
 8002e42:	70fb      	strb	r3, [r7, #3]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70bb      	strb	r3, [r7, #2]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002e4c:	7878      	ldrb	r0, [r7, #1]
 8002e4e:	78ba      	ldrb	r2, [r7, #2]
 8002e50:	78f9      	ldrb	r1, [r7, #3]
 8002e52:	7c3b      	ldrb	r3, [r7, #16]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	4603      	mov	r3, r0
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fbdd 	bl	8002618 <u8g2_draw_hv_line_2dir>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <u8x8_ascii_next+0x18>
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	2b0a      	cmp	r3, #10
 8002e98:	d102      	bne.n	8002ea0 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002e9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e9e:	e001      	b.n	8002ea4 <u8x8_ascii_next+0x22>
  return b;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	b29b      	uxth	r3, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002eb0:	b590      	push	{r4, r7, lr}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	691c      	ldr	r4, [r3, #16]
 8002ec2:	7afa      	ldrb	r2, [r7, #11]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2117      	movs	r1, #23
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	47a0      	blx	r4
 8002ecc:	4603      	mov	r3, r0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}

08002ed6 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002ee2:	1cfb      	adds	r3, r7, #3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff ffe1 	bl	8002eb0 <u8x8_byte_SendBytes>
 8002eee:	4603      	mov	r3, r0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691c      	ldr	r4, [r3, #16]
 8002f04:	2300      	movs	r3, #0
 8002f06:	2200      	movs	r2, #0
 8002f08:	2118      	movs	r1, #24
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	47a0      	blx	r4
 8002f0e:	4603      	mov	r3, r0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd90      	pop	{r4, r7, pc}

08002f18 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691c      	ldr	r4, [r3, #16]
 8002f24:	2300      	movs	r3, #0
 8002f26:	2200      	movs	r2, #0
 8002f28:	2119      	movs	r1, #25
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	47a0      	blx	r4
 8002f2e:	4603      	mov	r3, r0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd90      	pop	{r4, r7, pc}

08002f38 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68dc      	ldr	r4, [r3, #12]
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2115      	movs	r1, #21
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	47a0      	blx	r4
 8002f52:	4603      	mov	r3, r0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd90      	pop	{r4, r7, pc}

08002f5c <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002f5c:	b590      	push	{r4, r7, lr}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68dc      	ldr	r4, [r3, #12]
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2116      	movs	r1, #22
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	47a0      	blx	r4
 8002f76:	4603      	mov	r3, r0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd90      	pop	{r4, r7, pc}

08002f80 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	68dc      	ldr	r4, [r3, #12]
 8002f92:	7afa      	ldrb	r2, [r7, #11]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2117      	movs	r1, #23
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	47a0      	blx	r4
 8002f9c:	4603      	mov	r3, r0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd90      	pop	{r4, r7, pc}

08002fa6 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002fa6:	b590      	push	{r4, r7, lr}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68dc      	ldr	r4, [r3, #12]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2118      	movs	r1, #24
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	47a0      	blx	r4
 8002fbc:	4603      	mov	r3, r0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd90      	pop	{r4, r7, pc}

08002fc6 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002fc6:	b590      	push	{r4, r7, lr}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68dc      	ldr	r4, [r3, #12]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2119      	movs	r1, #25
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	47a0      	blx	r4
 8002fdc:	4603      	mov	r3, r0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd90      	pop	{r4, r7, pc}

08002fe6 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002fe6:	b590      	push	{r4, r7, lr}
 8002fe8:	b085      	sub	sp, #20
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	73fb      	strb	r3, [r7, #15]
    data++;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	2bfe      	cmp	r3, #254	; 0xfe
 8003000:	d031      	beq.n	8003066 <u8x8_cad_SendSequence+0x80>
 8003002:	2bfe      	cmp	r3, #254	; 0xfe
 8003004:	dc3d      	bgt.n	8003082 <u8x8_cad_SendSequence+0x9c>
 8003006:	2b19      	cmp	r3, #25
 8003008:	dc3b      	bgt.n	8003082 <u8x8_cad_SendSequence+0x9c>
 800300a:	2b18      	cmp	r3, #24
 800300c:	da23      	bge.n	8003056 <u8x8_cad_SendSequence+0x70>
 800300e:	2b16      	cmp	r3, #22
 8003010:	dc02      	bgt.n	8003018 <u8x8_cad_SendSequence+0x32>
 8003012:	2b15      	cmp	r3, #21
 8003014:	da03      	bge.n	800301e <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003016:	e034      	b.n	8003082 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003018:	2b17      	cmp	r3, #23
 800301a:	d00e      	beq.n	800303a <u8x8_cad_SendSequence+0x54>
	return;
 800301c:	e031      	b.n	8003082 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68dc      	ldr	r4, [r3, #12]
 8003028:	7bba      	ldrb	r2, [r7, #14]
 800302a:	7bf9      	ldrb	r1, [r7, #15]
 800302c:	2300      	movs	r3, #0
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	47a0      	blx	r4
	  data++;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	3301      	adds	r3, #1
 8003036:	603b      	str	r3, [r7, #0]
	  break;
 8003038:	e022      	b.n	8003080 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003040:	f107 030e 	add.w	r3, r7, #14
 8003044:	461a      	mov	r2, r3
 8003046:	2101      	movs	r1, #1
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff ff99 	bl	8002f80 <u8x8_cad_SendData>
	  data++;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	3301      	adds	r3, #1
 8003052:	603b      	str	r3, [r7, #0]
	  break;
 8003054:	e014      	b.n	8003080 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68dc      	ldr	r4, [r3, #12]
 800305a:	7bf9      	ldrb	r1, [r7, #15]
 800305c:	2300      	movs	r3, #0
 800305e:	2200      	movs	r2, #0
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	47a0      	blx	r4
	  break;
 8003064:	e00c      	b.n	8003080 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800306c:	7bbb      	ldrb	r3, [r7, #14]
 800306e:	461a      	mov	r2, r3
 8003070:	2129      	movs	r1, #41	; 0x29
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa37 	bl	80034e6 <u8x8_gpio_call>
	  data++;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	3301      	adds	r3, #1
 800307c:	603b      	str	r3, [r7, #0]
	  break;
 800307e:	bf00      	nop
    cmd = *data;
 8003080:	e7b6      	b.n	8002ff0 <u8x8_cad_SendSequence+0xa>
	return;
 8003082:	bf00      	nop
    }
  }
}
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}

0800308a <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 800308a:	b590      	push	{r4, r7, lr}
 800308c:	b085      	sub	sp, #20
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	460b      	mov	r3, r1
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f7ff ff2d 	bl	8002ef8 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 800309e:	2140      	movs	r1, #64	; 0x40
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f7ff ff18 	bl	8002ed6 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	691c      	ldr	r4, [r3, #16]
 80030aa:	7afa      	ldrb	r2, [r7, #11]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2117      	movs	r1, #23
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff ff2f 	bl	8002f18 <u8x8_byte_EndTransfer>
}
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}
	...

080030c4 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	72fb      	strb	r3, [r7, #11]
 80030d2:	4613      	mov	r3, r2
 80030d4:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 80030d6:	7afb      	ldrb	r3, [r7, #11]
 80030d8:	3b14      	subs	r3, #20
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d86e      	bhi.n	80031bc <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	0800317b 	.word	0x0800317b
 80030e8:	080030fd 	.word	0x080030fd
 80030ec:	0800312b 	.word	0x0800312b
 80030f0:	08003137 	.word	0x08003137
 80030f4:	0800319f 	.word	0x0800319f
 80030f8:	080031a7 	.word	0x080031a7
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 80030fc:	4b33      	ldr	r3, [pc, #204]	; (80031cc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7ff ff07 	bl	8002f18 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7ff fef4 	bl	8002ef8 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8003110:	2100      	movs	r1, #0
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7ff fedf 	bl	8002ed6 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003118:	7abb      	ldrb	r3, [r7, #10]
 800311a:	4619      	mov	r1, r3
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7ff feda 	bl	8002ed6 <u8x8_byte_SendByte>
      in_transfer = 1;
 8003122:	4b2a      	ldr	r3, [pc, #168]	; (80031cc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8003128:	e04a      	b.n	80031c0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800312a:	7abb      	ldrb	r3, [r7, #10]
 800312c:	4619      	mov	r1, r3
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f7ff fed1 	bl	8002ed6 <u8x8_byte_SendByte>
      break;      
 8003134:	e044      	b.n	80031c0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8003136:	4b25      	ldr	r3, [pc, #148]	; (80031cc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f7ff feea 	bl	8002f18 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8003148:	e00a      	b.n	8003160 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	2118      	movs	r1, #24
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff ff9b 	bl	800308a <u8x8_i2c_data_transfer>
	arg_int-=24;
 8003154:	7abb      	ldrb	r3, [r7, #10]
 8003156:	3b18      	subs	r3, #24
 8003158:	72bb      	strb	r3, [r7, #10]
	p+=24;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	3318      	adds	r3, #24
 800315e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8003160:	7abb      	ldrb	r3, [r7, #10]
 8003162:	2b18      	cmp	r3, #24
 8003164:	d8f1      	bhi.n	800314a <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8003166:	7abb      	ldrb	r3, [r7, #10]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4619      	mov	r1, r3
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f7ff ff8c 	bl	800308a <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8003172:	4b16      	ldr	r3, [pc, #88]	; (80031cc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
      break;
 8003178:	e022      	b.n	80031c0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003180:	2bff      	cmp	r3, #255	; 0xff
 8003182:	d103      	bne.n	800318c <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2278      	movs	r2, #120	; 0x78
 8003188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	691c      	ldr	r4, [r3, #16]
 8003190:	7aba      	ldrb	r2, [r7, #10]
 8003192:	7af9      	ldrb	r1, [r7, #11]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	47a0      	blx	r4
 800319a:	4603      	mov	r3, r0
 800319c:	e011      	b.n	80031c2 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
      break;
 80031a4:	e00c      	b.n	80031c0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f7ff feb2 	bl	8002f18 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
      break;
 80031ba:	e001      	b.n	80031c0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	e000      	b.n	80031c2 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 80031c0:	2301      	movs	r3, #1
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd90      	pop	{r4, r7, pc}
 80031ca:	bf00      	nop
 80031cc:	200004d4 	.word	0x200004d4

080031d0 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	72fb      	strb	r3, [r7, #11]
 80031de:	4613      	mov	r3, r2
 80031e0:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80031e2:	7afb      	ldrb	r3, [r7, #11]
 80031e4:	3b0b      	subs	r3, #11
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	f200 808a 	bhi.w	8003300 <u8x8_d_ssd1306_sh1106_generic+0x130>
 80031ec:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	08003209 	.word	0x08003209
 80031f8:	08003301 	.word	0x08003301
 80031fc:	08003223 	.word	0x08003223
 8003200:	08003255 	.word	0x08003255
 8003204:	08003275 	.word	0x08003275
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003208:	7abb      	ldrb	r3, [r7, #10]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d104      	bne.n	8003218 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_noname_powersave0_seq);
 800320e:	4940      	ldr	r1, [pc, #256]	; (8003310 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f7ff fee8 	bl	8002fe6 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_noname_powersave1_seq);
      break;
 8003216:	e075      	b.n	8003304 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_noname_powersave1_seq);
 8003218:	493e      	ldr	r1, [pc, #248]	; (8003314 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f7ff fee3 	bl	8002fe6 <u8x8_cad_SendSequence>
      break;
 8003220:	e070      	b.n	8003304 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8003222:	7abb      	ldrb	r3, [r7, #10]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_noname_flip0_seq);
 8003228:	493b      	ldr	r1, [pc, #236]	; (8003318 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff fedb 	bl	8002fe6 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	7c9a      	ldrb	r2, [r3, #18]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800323c:	e062      	b.n	8003304 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_noname_flip1_seq);
 800323e:	4937      	ldr	r1, [pc, #220]	; (800331c <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7ff fed0 	bl	8002fe6 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	7cda      	ldrb	r2, [r3, #19]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8003252:	e057      	b.n	8003304 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f7ff fea6 	bl	8002fa6 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800325a:	2181      	movs	r1, #129	; 0x81
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f7ff fe6b 	bl	8002f38 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8003262:	7abb      	ldrb	r3, [r7, #10]
 8003264:	4619      	mov	r1, r3
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f7ff fe78 	bl	8002f5c <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff feaa 	bl	8002fc6 <u8x8_cad_EndTransfer>
      break;
 8003272:	e047      	b.n	8003304 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f7ff fe96 	bl	8002fa6 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	795b      	ldrb	r3, [r3, #5]
 800327e:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	4413      	add	r3, r2
 8003290:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8003292:	2140      	movs	r1, #64	; 0x40
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f7ff fe4f 	bl	8002f38 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800329a:	7dfb      	ldrb	r3, [r7, #23]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f043 0310 	orr.w	r3, r3, #16
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	4619      	mov	r1, r3
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f7ff fe45 	bl	8002f38 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	4619      	mov	r1, r3
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f7ff fe4f 	bl	8002f5c <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	799b      	ldrb	r3, [r3, #6]
 80032c2:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	4619      	mov	r1, r3
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff fe46 	bl	8002f5c <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	791b      	ldrb	r3, [r3, #4]
 80032d4:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80032dc:	7dbb      	ldrb	r3, [r7, #22]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4619      	mov	r1, r3
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f7ff fe4a 	bl	8002f80 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80032ec:	7abb      	ldrb	r3, [r7, #10]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80032f2:	7abb      	ldrb	r3, [r7, #10]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1eb      	bne.n	80032d0 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f7ff fe64 	bl	8002fc6 <u8x8_cad_EndTransfer>
      break;
 80032fe:	e001      	b.n	8003304 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8003300:	2300      	movs	r3, #0
 8003302:	e000      	b.n	8003306 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8003304:	2301      	movs	r3, #1
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	080092a4 	.word	0x080092a4
 8003314:	080092ac 	.word	0x080092ac
 8003318:	080092b4 	.word	0x080092b4
 800331c:	080092bc 	.word	0x080092bc

08003320 <u8x8_d_ssd1306_128x32_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	460b      	mov	r3, r1
 800332c:	72fb      	strb	r3, [r7, #11]
 800332e:	4613      	mov	r3, r2
 8003330:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8003332:	7aba      	ldrb	r2, [r7, #10]
 8003334:	7af9      	ldrb	r1, [r7, #11]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff ff49 	bl	80031d0 <u8x8_d_ssd1306_sh1106_generic>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <u8x8_d_ssd1306_128x32_noname+0x28>
    return 1;
 8003344:	2301      	movs	r3, #1
 8003346:	e014      	b.n	8003372 <u8x8_d_ssd1306_128x32_noname+0x52>
  
  switch(msg)
 8003348:	7afb      	ldrb	r3, [r7, #11]
 800334a:	2b09      	cmp	r3, #9
 800334c:	d009      	beq.n	8003362 <u8x8_d_ssd1306_128x32_noname+0x42>
 800334e:	2b0a      	cmp	r3, #10
 8003350:	d10c      	bne.n	800336c <u8x8_d_ssd1306_128x32_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f82a 	bl	80033ac <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_noname_init_seq);
 8003358:	4908      	ldr	r1, [pc, #32]	; (800337c <u8x8_d_ssd1306_128x32_noname+0x5c>)
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f7ff fe43 	bl	8002fe6 <u8x8_cad_SendSequence>
      break;
 8003360:	e006      	b.n	8003370 <u8x8_d_ssd1306_128x32_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_noname_display_info);
 8003362:	4907      	ldr	r1, [pc, #28]	; (8003380 <u8x8_d_ssd1306_128x32_noname+0x60>)
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 f80d 	bl	8003384 <u8x8_d_helper_display_setup_memory>
      break;
 800336a:	e001      	b.n	8003370 <u8x8_d_ssd1306_128x32_noname+0x50>
    default:
      return 0;
 800336c:	2300      	movs	r3, #0
 800336e:	e000      	b.n	8003372 <u8x8_d_ssd1306_128x32_noname+0x52>
  }
  return 1;
 8003370:	2301      	movs	r3, #1
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	0800926c 	.word	0x0800926c
 8003380:	080092c4 	.word	0x080092c4

08003384 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	7c9a      	ldrb	r2, [r3, #18]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695c      	ldr	r4, [r3, #20]
 80033b8:	2300      	movs	r3, #0
 80033ba:	2200      	movs	r2, #0
 80033bc:	2128      	movs	r1, #40	; 0x28
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68dc      	ldr	r4, [r3, #12]
 80033c6:	2300      	movs	r3, #0
 80033c8:	2200      	movs	r2, #0
 80033ca:	2114      	movs	r1, #20
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80033d0:	2201      	movs	r2, #1
 80033d2:	214b      	movs	r1, #75	; 0x4b
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f886 	bl	80034e6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	791b      	ldrb	r3, [r3, #4]
 80033e0:	461a      	mov	r2, r3
 80033e2:	2129      	movs	r1, #41	; 0x29
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f87e 	bl	80034e6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80033ea:	2200      	movs	r2, #0
 80033ec:	214b      	movs	r1, #75	; 0x4b
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f879 	bl	80034e6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	791b      	ldrb	r3, [r3, #4]
 80033fa:	461a      	mov	r2, r3
 80033fc:	2129      	movs	r1, #41	; 0x29
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f871 	bl	80034e6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003404:	2201      	movs	r2, #1
 8003406:	214b      	movs	r1, #75	; 0x4b
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f86c 	bl	80034e6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	795b      	ldrb	r3, [r3, #5]
 8003414:	461a      	mov	r2, r3
 8003416:	2129      	movs	r1, #41	; 0x29
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f864 	bl	80034e6 <u8x8_gpio_call>
}    
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	bd90      	pop	{r4, r7, pc}

08003426 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003426:	b590      	push	{r4, r7, lr}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	4608      	mov	r0, r1
 8003430:	4611      	mov	r1, r2
 8003432:	461a      	mov	r2, r3
 8003434:	4603      	mov	r3, r0
 8003436:	70fb      	strb	r3, [r7, #3]
 8003438:	460b      	mov	r3, r1
 800343a:	70bb      	strb	r3, [r7, #2]
 800343c:	4613      	mov	r3, r2
 800343e:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003444:	78bb      	ldrb	r3, [r7, #2]
 8003446:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003448:	787b      	ldrb	r3, [r7, #1]
 800344a:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689c      	ldr	r4, [r3, #8]
 8003454:	f107 0308 	add.w	r3, r7, #8
 8003458:	2201      	movs	r2, #1
 800345a:	210f      	movs	r1, #15
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	47a0      	blx	r4
 8003460:	4603      	mov	r3, r0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bd90      	pop	{r4, r7, pc}

0800346a <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800346a:	b590      	push	{r4, r7, lr}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689c      	ldr	r4, [r3, #8]
 8003476:	2300      	movs	r3, #0
 8003478:	2200      	movs	r2, #0
 800347a:	2109      	movs	r1, #9
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	47a0      	blx	r4
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bd90      	pop	{r4, r7, pc}

08003488 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689c      	ldr	r4, [r3, #8]
 8003494:	2300      	movs	r3, #0
 8003496:	2200      	movs	r2, #0
 8003498:	210a      	movs	r1, #10
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	47a0      	blx	r4
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}

080034a6 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80034a6:	b590      	push	{r4, r7, lr}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689c      	ldr	r4, [r3, #8]
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	2300      	movs	r3, #0
 80034ba:	210b      	movs	r1, #11
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	47a0      	blx	r4
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd90      	pop	{r4, r7, pc}

080034c8 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80034c8:	b590      	push	{r4, r7, lr}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689c      	ldr	r4, [r3, #8]
 80034d4:	2300      	movs	r3, #0
 80034d6:	2200      	movs	r2, #0
 80034d8:	2110      	movs	r1, #16
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	47a0      	blx	r4
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd90      	pop	{r4, r7, pc}

080034e6 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80034e6:	b590      	push	{r4, r7, lr}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	460b      	mov	r3, r1
 80034f0:	70fb      	strb	r3, [r7, #3]
 80034f2:	4613      	mov	r3, r2
 80034f4:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695c      	ldr	r4, [r3, #20]
 80034fa:	78ba      	ldrb	r2, [r7, #2]
 80034fc:	78f9      	ldrb	r1, [r7, #3]
 80034fe:	2300      	movs	r3, #0
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	47a0      	blx	r4
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	bd90      	pop	{r4, r7, pc}

0800350c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	72fb      	strb	r3, [r7, #11]
 800351a:	4613      	mov	r3, r2
 800351c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a13      	ldr	r2, [pc, #76]	; (800358c <u8x8_SetupDefaults+0x60>)
 800353e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a12      	ldr	r2, [pc, #72]	; (800358c <u8x8_SetupDefaults+0x60>)
 8003544:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a10      	ldr	r2, [pc, #64]	; (800358c <u8x8_SetupDefaults+0x60>)
 800354a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a0f      	ldr	r2, [pc, #60]	; (800358c <u8x8_SetupDefaults+0x60>)
 8003550:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	22ff      	movs	r2, #255	; 0xff
 8003574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	22ff      	movs	r2, #255	; 0xff
 800357c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	0800350d 	.word	0x0800350d

08003590 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f7ff ffc4 	bl	800352c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff ff54 	bl	800346a <u8x8_SetupMemory>
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003604 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035d0:	480d      	ldr	r0, [pc, #52]	; (8003608 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035d2:	490e      	ldr	r1, [pc, #56]	; (800360c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035d4:	4a0e      	ldr	r2, [pc, #56]	; (8003610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035d8:	e002      	b.n	80035e0 <LoopCopyDataInit>

080035da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035de:	3304      	adds	r3, #4

080035e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035e4:	d3f9      	bcc.n	80035da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035e6:	4a0b      	ldr	r2, [pc, #44]	; (8003614 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035e8:	4c0b      	ldr	r4, [pc, #44]	; (8003618 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035ec:	e001      	b.n	80035f2 <LoopFillZerobss>

080035ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035f0:	3204      	adds	r2, #4

080035f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035f4:	d3fb      	bcc.n	80035ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035f6:	f7fd fbb1 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035fa:	f002 fe6d 	bl	80062d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035fe:	f7fd fa21 	bl	8000a44 <main>
  bx  lr    
 8003602:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003604:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800360c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003610:	080092ec 	.word	0x080092ec
  ldr r2, =_sbss
 8003614:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003618:	20000668 	.word	0x20000668

0800361c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800361c:	e7fe      	b.n	800361c <ADC_IRQHandler>
	...

08003620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003624:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <HAL_Init+0x40>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <HAL_Init+0x40>)
 800362a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800362e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_Init+0x40>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a0a      	ldr	r2, [pc, #40]	; (8003660 <HAL_Init+0x40>)
 8003636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800363a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800363c:	4b08      	ldr	r3, [pc, #32]	; (8003660 <HAL_Init+0x40>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a07      	ldr	r2, [pc, #28]	; (8003660 <HAL_Init+0x40>)
 8003642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003648:	2003      	movs	r0, #3
 800364a:	f000 f94f 	bl	80038ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800364e:	2000      	movs	r0, #0
 8003650:	f000 f808 	bl	8003664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003654:	f7fd fb12 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40023c00 	.word	0x40023c00

08003664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800366c:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <HAL_InitTick+0x54>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_InitTick+0x58>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	4619      	mov	r1, r3
 8003676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800367a:	fbb3 f3f1 	udiv	r3, r3, r1
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f967 	bl	8003956 <HAL_SYSTICK_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e00e      	b.n	80036b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b0f      	cmp	r3, #15
 8003696:	d80a      	bhi.n	80036ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003698:	2200      	movs	r2, #0
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	f04f 30ff 	mov.w	r0, #4294967295
 80036a0:	f000 f92f 	bl	8003902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036a4:	4a06      	ldr	r2, [pc, #24]	; (80036c0 <HAL_InitTick+0x5c>)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20000000 	.word	0x20000000
 80036bc:	20000008 	.word	0x20000008
 80036c0:	20000004 	.word	0x20000004

080036c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_IncTick+0x20>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_IncTick+0x24>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4413      	add	r3, r2
 80036d4:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <HAL_IncTick+0x24>)
 80036d6:	6013      	str	r3, [r2, #0]
}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	20000008 	.word	0x20000008
 80036e8:	20000664 	.word	0x20000664

080036ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return uwTick;
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <HAL_GetTick+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000664 	.word	0x20000664

08003704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800370c:	f7ff ffee 	bl	80036ec <HAL_GetTick>
 8003710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d005      	beq.n	800372a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <HAL_Delay+0x44>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4413      	add	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800372a:	bf00      	nop
 800372c:	f7ff ffde 	bl	80036ec <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	429a      	cmp	r2, r3
 800373a:	d8f7      	bhi.n	800372c <HAL_Delay+0x28>
  {
  }
}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000008 	.word	0x20000008

0800374c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <__NVIC_SetPriorityGrouping+0x44>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003768:	4013      	ands	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800377e:	4a04      	ldr	r2, [pc, #16]	; (8003790 <__NVIC_SetPriorityGrouping+0x44>)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	60d3      	str	r3, [r2, #12]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <__NVIC_GetPriorityGrouping+0x18>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	0a1b      	lsrs	r3, r3, #8
 800379e:	f003 0307 	and.w	r3, r3, #7
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	db0b      	blt.n	80037da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	f003 021f 	and.w	r2, r3, #31
 80037c8:	4907      	ldr	r1, [pc, #28]	; (80037e8 <__NVIC_EnableIRQ+0x38>)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2001      	movs	r0, #1
 80037d2:	fa00 f202 	lsl.w	r2, r0, r2
 80037d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	e000e100 	.word	0xe000e100

080037ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	6039      	str	r1, [r7, #0]
 80037f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	db0a      	blt.n	8003816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	b2da      	uxtb	r2, r3
 8003804:	490c      	ldr	r1, [pc, #48]	; (8003838 <__NVIC_SetPriority+0x4c>)
 8003806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380a:	0112      	lsls	r2, r2, #4
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	440b      	add	r3, r1
 8003810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003814:	e00a      	b.n	800382c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	4908      	ldr	r1, [pc, #32]	; (800383c <__NVIC_SetPriority+0x50>)
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	3b04      	subs	r3, #4
 8003824:	0112      	lsls	r2, r2, #4
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	440b      	add	r3, r1
 800382a:	761a      	strb	r2, [r3, #24]
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000e100 	.word	0xe000e100
 800383c:	e000ed00 	.word	0xe000ed00

08003840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f1c3 0307 	rsb	r3, r3, #7
 800385a:	2b04      	cmp	r3, #4
 800385c:	bf28      	it	cs
 800385e:	2304      	movcs	r3, #4
 8003860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	3304      	adds	r3, #4
 8003866:	2b06      	cmp	r3, #6
 8003868:	d902      	bls.n	8003870 <NVIC_EncodePriority+0x30>
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3b03      	subs	r3, #3
 800386e:	e000      	b.n	8003872 <NVIC_EncodePriority+0x32>
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003874:	f04f 32ff 	mov.w	r2, #4294967295
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43da      	mvns	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	401a      	ands	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003888:	f04f 31ff 	mov.w	r1, #4294967295
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	fa01 f303 	lsl.w	r3, r1, r3
 8003892:	43d9      	mvns	r1, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003898:	4313      	orrs	r3, r2
         );
}
 800389a:	4618      	mov	r0, r3
 800389c:	3724      	adds	r7, #36	; 0x24
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b8:	d301      	bcc.n	80038be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ba:	2301      	movs	r3, #1
 80038bc:	e00f      	b.n	80038de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038be:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <SysTick_Config+0x40>)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038c6:	210f      	movs	r1, #15
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295
 80038cc:	f7ff ff8e 	bl	80037ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <SysTick_Config+0x40>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038d6:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <SysTick_Config+0x40>)
 80038d8:	2207      	movs	r2, #7
 80038da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	e000e010 	.word	0xe000e010

080038ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff ff29 	bl	800374c <__NVIC_SetPriorityGrouping>
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003902:	b580      	push	{r7, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af00      	add	r7, sp, #0
 8003908:	4603      	mov	r3, r0
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003914:	f7ff ff3e 	bl	8003794 <__NVIC_GetPriorityGrouping>
 8003918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	6978      	ldr	r0, [r7, #20]
 8003920:	f7ff ff8e 	bl	8003840 <NVIC_EncodePriority>
 8003924:	4602      	mov	r2, r0
 8003926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff5d 	bl	80037ec <__NVIC_SetPriority>
}
 8003932:	bf00      	nop
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	4603      	mov	r3, r0
 8003942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff31 	bl	80037b0 <__NVIC_EnableIRQ>
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ffa2 	bl	80038a8 <SysTick_Config>
 8003964:	4603      	mov	r3, r0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800397c:	f7ff feb6 	bl	80036ec <HAL_GetTick>
 8003980:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d008      	beq.n	80039a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2280      	movs	r2, #128	; 0x80
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e052      	b.n	8003a46 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0216 	bic.w	r2, r2, #22
 80039ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d103      	bne.n	80039d0 <HAL_DMA_Abort+0x62>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0208 	bic.w	r2, r2, #8
 80039de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039f0:	e013      	b.n	8003a1a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039f2:	f7ff fe7b 	bl	80036ec <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b05      	cmp	r3, #5
 80039fe:	d90c      	bls.n	8003a1a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2203      	movs	r2, #3
 8003a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e015      	b.n	8003a46 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e4      	bne.n	80039f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2c:	223f      	movs	r2, #63	; 0x3f
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d004      	beq.n	8003a6c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2280      	movs	r2, #128	; 0x80
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e00c      	b.n	8003a86 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2205      	movs	r2, #5
 8003a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b089      	sub	sp, #36	; 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	e16b      	b.n	8003d88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	f040 815a 	bne.w	8003d82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d005      	beq.n	8003ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d130      	bne.n	8003b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	2203      	movs	r2, #3
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4013      	ands	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f003 0201 	and.w	r2, r3, #1
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d017      	beq.n	8003b84 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	2203      	movs	r2, #3
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d123      	bne.n	8003bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	08da      	lsrs	r2, r3, #3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3208      	adds	r2, #8
 8003b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	220f      	movs	r2, #15
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	08da      	lsrs	r2, r3, #3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3208      	adds	r2, #8
 8003bd2:	69b9      	ldr	r1, [r7, #24]
 8003bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	2203      	movs	r2, #3
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0203 	and.w	r2, r3, #3
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80b4 	beq.w	8003d82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	4b60      	ldr	r3, [pc, #384]	; (8003da0 <HAL_GPIO_Init+0x30c>)
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	4a5f      	ldr	r2, [pc, #380]	; (8003da0 <HAL_GPIO_Init+0x30c>)
 8003c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c28:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2a:	4b5d      	ldr	r3, [pc, #372]	; (8003da0 <HAL_GPIO_Init+0x30c>)
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c36:	4a5b      	ldr	r2, [pc, #364]	; (8003da4 <HAL_GPIO_Init+0x310>)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	089b      	lsrs	r3, r3, #2
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	220f      	movs	r2, #15
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4013      	ands	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a52      	ldr	r2, [pc, #328]	; (8003da8 <HAL_GPIO_Init+0x314>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d02b      	beq.n	8003cba <HAL_GPIO_Init+0x226>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a51      	ldr	r2, [pc, #324]	; (8003dac <HAL_GPIO_Init+0x318>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d025      	beq.n	8003cb6 <HAL_GPIO_Init+0x222>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a50      	ldr	r2, [pc, #320]	; (8003db0 <HAL_GPIO_Init+0x31c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01f      	beq.n	8003cb2 <HAL_GPIO_Init+0x21e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a4f      	ldr	r2, [pc, #316]	; (8003db4 <HAL_GPIO_Init+0x320>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d019      	beq.n	8003cae <HAL_GPIO_Init+0x21a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a4e      	ldr	r2, [pc, #312]	; (8003db8 <HAL_GPIO_Init+0x324>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <HAL_GPIO_Init+0x216>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a4d      	ldr	r2, [pc, #308]	; (8003dbc <HAL_GPIO_Init+0x328>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00d      	beq.n	8003ca6 <HAL_GPIO_Init+0x212>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a4c      	ldr	r2, [pc, #304]	; (8003dc0 <HAL_GPIO_Init+0x32c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d007      	beq.n	8003ca2 <HAL_GPIO_Init+0x20e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4b      	ldr	r2, [pc, #300]	; (8003dc4 <HAL_GPIO_Init+0x330>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d101      	bne.n	8003c9e <HAL_GPIO_Init+0x20a>
 8003c9a:	2307      	movs	r3, #7
 8003c9c:	e00e      	b.n	8003cbc <HAL_GPIO_Init+0x228>
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	e00c      	b.n	8003cbc <HAL_GPIO_Init+0x228>
 8003ca2:	2306      	movs	r3, #6
 8003ca4:	e00a      	b.n	8003cbc <HAL_GPIO_Init+0x228>
 8003ca6:	2305      	movs	r3, #5
 8003ca8:	e008      	b.n	8003cbc <HAL_GPIO_Init+0x228>
 8003caa:	2304      	movs	r3, #4
 8003cac:	e006      	b.n	8003cbc <HAL_GPIO_Init+0x228>
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e004      	b.n	8003cbc <HAL_GPIO_Init+0x228>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e002      	b.n	8003cbc <HAL_GPIO_Init+0x228>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <HAL_GPIO_Init+0x228>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	f002 0203 	and.w	r2, r2, #3
 8003cc2:	0092      	lsls	r2, r2, #2
 8003cc4:	4093      	lsls	r3, r2
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ccc:	4935      	ldr	r1, [pc, #212]	; (8003da4 <HAL_GPIO_Init+0x310>)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	089b      	lsrs	r3, r3, #2
 8003cd2:	3302      	adds	r3, #2
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cda:	4b3b      	ldr	r3, [pc, #236]	; (8003dc8 <HAL_GPIO_Init+0x334>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cfe:	4a32      	ldr	r2, [pc, #200]	; (8003dc8 <HAL_GPIO_Init+0x334>)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d04:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <HAL_GPIO_Init+0x334>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4013      	ands	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d28:	4a27      	ldr	r2, [pc, #156]	; (8003dc8 <HAL_GPIO_Init+0x334>)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d2e:	4b26      	ldr	r3, [pc, #152]	; (8003dc8 <HAL_GPIO_Init+0x334>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	43db      	mvns	r3, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d52:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <HAL_GPIO_Init+0x334>)
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d58:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <HAL_GPIO_Init+0x334>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d7c:	4a12      	ldr	r2, [pc, #72]	; (8003dc8 <HAL_GPIO_Init+0x334>)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3301      	adds	r3, #1
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2b0f      	cmp	r3, #15
 8003d8c:	f67f ae90 	bls.w	8003ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	3724      	adds	r7, #36	; 0x24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40013800 	.word	0x40013800
 8003da8:	40020000 	.word	0x40020000
 8003dac:	40020400 	.word	0x40020400
 8003db0:	40020800 	.word	0x40020800
 8003db4:	40020c00 	.word	0x40020c00
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40021400 	.word	0x40021400
 8003dc0:	40021800 	.word	0x40021800
 8003dc4:	40021c00 	.word	0x40021c00
 8003dc8:	40013c00 	.word	0x40013c00

08003dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	807b      	strh	r3, [r7, #2]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ddc:	787b      	ldrb	r3, [r7, #1]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003de2:	887a      	ldrh	r2, [r7, #2]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003de8:	e003      	b.n	8003df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dea:	887b      	ldrh	r3, [r7, #2]
 8003dec:	041a      	lsls	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	619a      	str	r2, [r3, #24]
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e12b      	b.n	800406a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fc fbe4 	bl	80005f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2224      	movs	r2, #36	; 0x24
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e64:	f001 f864 	bl	8004f30 <HAL_RCC_GetPCLK1Freq>
 8003e68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4a81      	ldr	r2, [pc, #516]	; (8004074 <HAL_I2C_Init+0x274>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d807      	bhi.n	8003e84 <HAL_I2C_Init+0x84>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4a80      	ldr	r2, [pc, #512]	; (8004078 <HAL_I2C_Init+0x278>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	bf94      	ite	ls
 8003e7c:	2301      	movls	r3, #1
 8003e7e:	2300      	movhi	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	e006      	b.n	8003e92 <HAL_I2C_Init+0x92>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4a7d      	ldr	r2, [pc, #500]	; (800407c <HAL_I2C_Init+0x27c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	bf94      	ite	ls
 8003e8c:	2301      	movls	r3, #1
 8003e8e:	2300      	movhi	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e0e7      	b.n	800406a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a78      	ldr	r2, [pc, #480]	; (8004080 <HAL_I2C_Init+0x280>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	0c9b      	lsrs	r3, r3, #18
 8003ea4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a6a      	ldr	r2, [pc, #424]	; (8004074 <HAL_I2C_Init+0x274>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d802      	bhi.n	8003ed4 <HAL_I2C_Init+0xd4>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	e009      	b.n	8003ee8 <HAL_I2C_Init+0xe8>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
 8003ede:	4a69      	ldr	r2, [pc, #420]	; (8004084 <HAL_I2C_Init+0x284>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	099b      	lsrs	r3, r3, #6
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003efa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	495c      	ldr	r1, [pc, #368]	; (8004074 <HAL_I2C_Init+0x274>)
 8003f04:	428b      	cmp	r3, r1
 8003f06:	d819      	bhi.n	8003f3c <HAL_I2C_Init+0x13c>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1e59      	subs	r1, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f16:	1c59      	adds	r1, r3, #1
 8003f18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f1c:	400b      	ands	r3, r1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_I2C_Init+0x138>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1e59      	subs	r1, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f30:	3301      	adds	r3, #1
 8003f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f36:	e051      	b.n	8003fdc <HAL_I2C_Init+0x1dc>
 8003f38:	2304      	movs	r3, #4
 8003f3a:	e04f      	b.n	8003fdc <HAL_I2C_Init+0x1dc>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d111      	bne.n	8003f68 <HAL_I2C_Init+0x168>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1e58      	subs	r0, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6859      	ldr	r1, [r3, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	440b      	add	r3, r1
 8003f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f56:	3301      	adds	r3, #1
 8003f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e012      	b.n	8003f8e <HAL_I2C_Init+0x18e>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1e58      	subs	r0, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6859      	ldr	r1, [r3, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	0099      	lsls	r1, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_I2C_Init+0x196>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e022      	b.n	8003fdc <HAL_I2C_Init+0x1dc>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10e      	bne.n	8003fbc <HAL_I2C_Init+0x1bc>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1e58      	subs	r0, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6859      	ldr	r1, [r3, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	440b      	add	r3, r1
 8003fac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fba:	e00f      	b.n	8003fdc <HAL_I2C_Init+0x1dc>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1e58      	subs	r0, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	0099      	lsls	r1, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	6809      	ldr	r1, [r1, #0]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69da      	ldr	r2, [r3, #28]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800400a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6911      	ldr	r1, [r2, #16]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68d2      	ldr	r2, [r2, #12]
 8004016:	4311      	orrs	r1, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	430b      	orrs	r3, r1
 800401e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	000186a0 	.word	0x000186a0
 8004078:	001e847f 	.word	0x001e847f
 800407c:	003d08ff 	.word	0x003d08ff
 8004080:	431bde83 	.word	0x431bde83
 8004084:	10624dd3 	.word	0x10624dd3

08004088 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af02      	add	r7, sp, #8
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	607a      	str	r2, [r7, #4]
 8004092:	461a      	mov	r2, r3
 8004094:	460b      	mov	r3, r1
 8004096:	817b      	strh	r3, [r7, #10]
 8004098:	4613      	mov	r3, r2
 800409a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800409c:	f7ff fb26 	bl	80036ec <HAL_GetTick>
 80040a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	f040 80e0 	bne.w	8004270 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	2319      	movs	r3, #25
 80040b6:	2201      	movs	r2, #1
 80040b8:	4970      	ldr	r1, [pc, #448]	; (800427c <HAL_I2C_Master_Transmit+0x1f4>)
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f964 	bl	8004388 <I2C_WaitOnFlagUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80040c6:	2302      	movs	r3, #2
 80040c8:	e0d3      	b.n	8004272 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_I2C_Master_Transmit+0x50>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e0cc      	b.n	8004272 <HAL_I2C_Master_Transmit+0x1ea>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d007      	beq.n	80040fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f042 0201 	orr.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800410c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2221      	movs	r2, #33	; 0x21
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2210      	movs	r2, #16
 800411a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	893a      	ldrh	r2, [r7, #8]
 800412e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4a50      	ldr	r2, [pc, #320]	; (8004280 <HAL_I2C_Master_Transmit+0x1f8>)
 800413e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004140:	8979      	ldrh	r1, [r7, #10]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	6a3a      	ldr	r2, [r7, #32]
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f89c 	bl	8004284 <I2C_MasterRequestWrite>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e08d      	b.n	8004272 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004156:	2300      	movs	r3, #0
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800416c:	e066      	b.n	800423c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	6a39      	ldr	r1, [r7, #32]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f9de 	bl	8004534 <I2C_WaitOnTXEFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00d      	beq.n	800419a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2b04      	cmp	r3, #4
 8004184:	d107      	bne.n	8004196 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004194:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e06b      	b.n	8004272 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	781a      	ldrb	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d11b      	bne.n	8004210 <HAL_I2C_Master_Transmit+0x188>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d017      	beq.n	8004210 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	781a      	ldrb	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	6a39      	ldr	r1, [r7, #32]
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f9ce 	bl	80045b6 <I2C_WaitOnBTFFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00d      	beq.n	800423c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	2b04      	cmp	r3, #4
 8004226:	d107      	bne.n	8004238 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004236:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e01a      	b.n	8004272 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d194      	bne.n	800416e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	e000      	b.n	8004272 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004270:	2302      	movs	r3, #2
  }
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	00100002 	.word	0x00100002
 8004280:	ffff0000 	.word	0xffff0000

08004284 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	460b      	mov	r3, r1
 8004292:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004298:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d006      	beq.n	80042ae <I2C_MasterRequestWrite+0x2a>
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d003      	beq.n	80042ae <I2C_MasterRequestWrite+0x2a>
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042ac:	d108      	bne.n	80042c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e00b      	b.n	80042d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	2b12      	cmp	r3, #18
 80042c6:	d107      	bne.n	80042d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f84f 	bl	8004388 <I2C_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00d      	beq.n	800430c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fe:	d103      	bne.n	8004308 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004306:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e035      	b.n	8004378 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004314:	d108      	bne.n	8004328 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004316:	897b      	ldrh	r3, [r7, #10]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004324:	611a      	str	r2, [r3, #16]
 8004326:	e01b      	b.n	8004360 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004328:	897b      	ldrh	r3, [r7, #10]
 800432a:	11db      	asrs	r3, r3, #7
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f003 0306 	and.w	r3, r3, #6
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f063 030f 	orn	r3, r3, #15
 8004338:	b2da      	uxtb	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	490e      	ldr	r1, [pc, #56]	; (8004380 <I2C_MasterRequestWrite+0xfc>)
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f875 	bl	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e010      	b.n	8004378 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004356:	897b      	ldrh	r3, [r7, #10]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4907      	ldr	r1, [pc, #28]	; (8004384 <I2C_MasterRequestWrite+0x100>)
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f865 	bl	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	00010008 	.word	0x00010008
 8004384:	00010002 	.word	0x00010002

08004388 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004398:	e025      	b.n	80043e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d021      	beq.n	80043e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a2:	f7ff f9a3 	bl	80036ec <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d302      	bcc.n	80043b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d116      	bne.n	80043e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f043 0220 	orr.w	r2, r3, #32
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e023      	b.n	800442e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	0c1b      	lsrs	r3, r3, #16
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d10d      	bne.n	800440c <I2C_WaitOnFlagUntilTimeout+0x84>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	43da      	mvns	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4013      	ands	r3, r2
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bf0c      	ite	eq
 8004402:	2301      	moveq	r3, #1
 8004404:	2300      	movne	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	461a      	mov	r2, r3
 800440a:	e00c      	b.n	8004426 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	43da      	mvns	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4013      	ands	r3, r2
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf0c      	ite	eq
 800441e:	2301      	moveq	r3, #1
 8004420:	2300      	movne	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	79fb      	ldrb	r3, [r7, #7]
 8004428:	429a      	cmp	r2, r3
 800442a:	d0b6      	beq.n	800439a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004444:	e051      	b.n	80044ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004454:	d123      	bne.n	800449e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004464:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800446e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f043 0204 	orr.w	r2, r3, #4
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e046      	b.n	800452c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d021      	beq.n	80044ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a6:	f7ff f921 	bl	80036ec <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d302      	bcc.n	80044bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d116      	bne.n	80044ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f043 0220 	orr.w	r2, r3, #32
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e020      	b.n	800452c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d10c      	bne.n	800450e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	43da      	mvns	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4013      	ands	r3, r2
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	bf14      	ite	ne
 8004506:	2301      	movne	r3, #1
 8004508:	2300      	moveq	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	e00b      	b.n	8004526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	43da      	mvns	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4013      	ands	r3, r2
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	bf14      	ite	ne
 8004520:	2301      	movne	r3, #1
 8004522:	2300      	moveq	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d18d      	bne.n	8004446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004540:	e02d      	b.n	800459e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f878 	bl	8004638 <I2C_IsAcknowledgeFailed>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e02d      	b.n	80045ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d021      	beq.n	800459e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7ff f8c7 	bl	80036ec <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d116      	bne.n	800459e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f043 0220 	orr.w	r2, r3, #32
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e007      	b.n	80045ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a8:	2b80      	cmp	r3, #128	; 0x80
 80045aa:	d1ca      	bne.n	8004542 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045c2:	e02d      	b.n	8004620 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f837 	bl	8004638 <I2C_IsAcknowledgeFailed>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e02d      	b.n	8004630 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045da:	d021      	beq.n	8004620 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045dc:	f7ff f886 	bl	80036ec <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d302      	bcc.n	80045f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d116      	bne.n	8004620 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	f043 0220 	orr.w	r2, r3, #32
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e007      	b.n	8004630 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	2b04      	cmp	r3, #4
 800462c:	d1ca      	bne.n	80045c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464e:	d11b      	bne.n	8004688 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004658:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	f043 0204 	orr.w	r2, r3, #4
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e264      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d075      	beq.n	80047a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046b6:	4ba3      	ldr	r3, [pc, #652]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d00c      	beq.n	80046dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c2:	4ba0      	ldr	r3, [pc, #640]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d112      	bne.n	80046f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ce:	4b9d      	ldr	r3, [pc, #628]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046da:	d10b      	bne.n	80046f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046dc:	4b99      	ldr	r3, [pc, #612]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d05b      	beq.n	80047a0 <HAL_RCC_OscConfig+0x108>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d157      	bne.n	80047a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e23f      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fc:	d106      	bne.n	800470c <HAL_RCC_OscConfig+0x74>
 80046fe:	4b91      	ldr	r3, [pc, #580]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a90      	ldr	r2, [pc, #576]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e01d      	b.n	8004748 <HAL_RCC_OscConfig+0xb0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004714:	d10c      	bne.n	8004730 <HAL_RCC_OscConfig+0x98>
 8004716:	4b8b      	ldr	r3, [pc, #556]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a8a      	ldr	r2, [pc, #552]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 800471c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	4b88      	ldr	r3, [pc, #544]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a87      	ldr	r2, [pc, #540]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	e00b      	b.n	8004748 <HAL_RCC_OscConfig+0xb0>
 8004730:	4b84      	ldr	r3, [pc, #528]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a83      	ldr	r2, [pc, #524]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	4b81      	ldr	r3, [pc, #516]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a80      	ldr	r2, [pc, #512]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d013      	beq.n	8004778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fe ffcc 	bl	80036ec <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004758:	f7fe ffc8 	bl	80036ec <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	; 0x64
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e204      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476a:	4b76      	ldr	r3, [pc, #472]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0xc0>
 8004776:	e014      	b.n	80047a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fe ffb8 	bl	80036ec <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004780:	f7fe ffb4 	bl	80036ec <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	; 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e1f0      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004792:	4b6c      	ldr	r3, [pc, #432]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0xe8>
 800479e:	e000      	b.n	80047a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d063      	beq.n	8004876 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ae:	4b65      	ldr	r3, [pc, #404]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ba:	4b62      	ldr	r3, [pc, #392]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d11c      	bne.n	8004800 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047c6:	4b5f      	ldr	r3, [pc, #380]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d116      	bne.n	8004800 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d2:	4b5c      	ldr	r3, [pc, #368]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <HAL_RCC_OscConfig+0x152>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d001      	beq.n	80047ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e1c4      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ea:	4b56      	ldr	r3, [pc, #344]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	4952      	ldr	r1, [pc, #328]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fe:	e03a      	b.n	8004876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d020      	beq.n	800484a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004808:	4b4f      	ldr	r3, [pc, #316]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
 800480a:	2201      	movs	r2, #1
 800480c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480e:	f7fe ff6d 	bl	80036ec <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004816:	f7fe ff69 	bl	80036ec <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e1a5      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004828:	4b46      	ldr	r3, [pc, #280]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f0      	beq.n	8004816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004834:	4b43      	ldr	r3, [pc, #268]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4940      	ldr	r1, [pc, #256]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004844:	4313      	orrs	r3, r2
 8004846:	600b      	str	r3, [r1, #0]
 8004848:	e015      	b.n	8004876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800484a:	4b3f      	ldr	r3, [pc, #252]	; (8004948 <HAL_RCC_OscConfig+0x2b0>)
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004850:	f7fe ff4c 	bl	80036ec <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004858:	f7fe ff48 	bl	80036ec <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e184      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486a:	4b36      	ldr	r3, [pc, #216]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d030      	beq.n	80048e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800488a:	4b30      	ldr	r3, [pc, #192]	; (800494c <HAL_RCC_OscConfig+0x2b4>)
 800488c:	2201      	movs	r2, #1
 800488e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7fe ff2c 	bl	80036ec <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004898:	f7fe ff28 	bl	80036ec <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e164      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048aa:	4b26      	ldr	r3, [pc, #152]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x200>
 80048b6:	e015      	b.n	80048e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048b8:	4b24      	ldr	r3, [pc, #144]	; (800494c <HAL_RCC_OscConfig+0x2b4>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048be:	f7fe ff15 	bl	80036ec <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c6:	f7fe ff11 	bl	80036ec <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e14d      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d8:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80048da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f0      	bne.n	80048c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 80a0 	beq.w	8004a32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048f2:	2300      	movs	r3, #0
 80048f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048f6:	4b13      	ldr	r3, [pc, #76]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10f      	bne.n	8004922 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	4a0e      	ldr	r2, [pc, #56]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 800490c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004910:	6413      	str	r3, [r2, #64]	; 0x40
 8004912:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <HAL_RCC_OscConfig+0x2ac>)
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004922:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <HAL_RCC_OscConfig+0x2b8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492a:	2b00      	cmp	r3, #0
 800492c:	d121      	bne.n	8004972 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800492e:	4b08      	ldr	r3, [pc, #32]	; (8004950 <HAL_RCC_OscConfig+0x2b8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a07      	ldr	r2, [pc, #28]	; (8004950 <HAL_RCC_OscConfig+0x2b8>)
 8004934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800493a:	f7fe fed7 	bl	80036ec <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004940:	e011      	b.n	8004966 <HAL_RCC_OscConfig+0x2ce>
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	42470000 	.word	0x42470000
 800494c:	42470e80 	.word	0x42470e80
 8004950:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004954:	f7fe feca 	bl	80036ec <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e106      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004966:	4b85      	ldr	r3, [pc, #532]	; (8004b7c <HAL_RCC_OscConfig+0x4e4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d106      	bne.n	8004988 <HAL_RCC_OscConfig+0x2f0>
 800497a:	4b81      	ldr	r3, [pc, #516]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497e:	4a80      	ldr	r2, [pc, #512]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	6713      	str	r3, [r2, #112]	; 0x70
 8004986:	e01c      	b.n	80049c2 <HAL_RCC_OscConfig+0x32a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b05      	cmp	r3, #5
 800498e:	d10c      	bne.n	80049aa <HAL_RCC_OscConfig+0x312>
 8004990:	4b7b      	ldr	r3, [pc, #492]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 8004992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004994:	4a7a      	ldr	r2, [pc, #488]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 8004996:	f043 0304 	orr.w	r3, r3, #4
 800499a:	6713      	str	r3, [r2, #112]	; 0x70
 800499c:	4b78      	ldr	r3, [pc, #480]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	4a77      	ldr	r2, [pc, #476]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	6713      	str	r3, [r2, #112]	; 0x70
 80049a8:	e00b      	b.n	80049c2 <HAL_RCC_OscConfig+0x32a>
 80049aa:	4b75      	ldr	r3, [pc, #468]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	4a74      	ldr	r2, [pc, #464]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 80049b0:	f023 0301 	bic.w	r3, r3, #1
 80049b4:	6713      	str	r3, [r2, #112]	; 0x70
 80049b6:	4b72      	ldr	r3, [pc, #456]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	4a71      	ldr	r2, [pc, #452]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 80049bc:	f023 0304 	bic.w	r3, r3, #4
 80049c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d015      	beq.n	80049f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ca:	f7fe fe8f 	bl	80036ec <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d0:	e00a      	b.n	80049e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d2:	f7fe fe8b 	bl	80036ec <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e0c5      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e8:	4b65      	ldr	r3, [pc, #404]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ee      	beq.n	80049d2 <HAL_RCC_OscConfig+0x33a>
 80049f4:	e014      	b.n	8004a20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f6:	f7fe fe79 	bl	80036ec <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fc:	e00a      	b.n	8004a14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049fe:	f7fe fe75 	bl	80036ec <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e0af      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a14:	4b5a      	ldr	r3, [pc, #360]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1ee      	bne.n	80049fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d105      	bne.n	8004a32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a26:	4b56      	ldr	r3, [pc, #344]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	4a55      	ldr	r2, [pc, #340]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 8004a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 809b 	beq.w	8004b72 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a3c:	4b50      	ldr	r3, [pc, #320]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d05c      	beq.n	8004b02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d141      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a50:	4b4c      	ldr	r3, [pc, #304]	; (8004b84 <HAL_RCC_OscConfig+0x4ec>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a56:	f7fe fe49 	bl	80036ec <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a5e:	f7fe fe45 	bl	80036ec <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e081      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a70:	4b43      	ldr	r3, [pc, #268]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69da      	ldr	r2, [r3, #28]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	019b      	lsls	r3, r3, #6
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	3b01      	subs	r3, #1
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	061b      	lsls	r3, r3, #24
 8004aa0:	4937      	ldr	r1, [pc, #220]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa6:	4b37      	ldr	r3, [pc, #220]	; (8004b84 <HAL_RCC_OscConfig+0x4ec>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7fe fe1e 	bl	80036ec <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fe fe1a 	bl	80036ec <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e056      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac6:	4b2e      	ldr	r3, [pc, #184]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x41c>
 8004ad2:	e04e      	b.n	8004b72 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad4:	4b2b      	ldr	r3, [pc, #172]	; (8004b84 <HAL_RCC_OscConfig+0x4ec>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ada:	f7fe fe07 	bl	80036ec <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fe fe03 	bl	80036ec <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e03f      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af4:	4b22      	ldr	r3, [pc, #136]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1f0      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x44a>
 8004b00:	e037      	b.n	8004b72 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e032      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b0e:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <HAL_RCC_OscConfig+0x4e8>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d028      	beq.n	8004b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d121      	bne.n	8004b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d11a      	bne.n	8004b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b3e:	4013      	ands	r3, r2
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b44:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d111      	bne.n	8004b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b54:	085b      	lsrs	r3, r3, #1
 8004b56:	3b01      	subs	r3, #1
 8004b58:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d107      	bne.n	8004b6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d001      	beq.n	8004b72 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40007000 	.word	0x40007000
 8004b80:	40023800 	.word	0x40023800
 8004b84:	42470060 	.word	0x42470060

08004b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0cc      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b9c:	4b68      	ldr	r3, [pc, #416]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d90c      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004baa:	4b65      	ldr	r3, [pc, #404]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb2:	4b63      	ldr	r3, [pc, #396]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0b8      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d020      	beq.n	8004c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bdc:	4b59      	ldr	r3, [pc, #356]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4a58      	ldr	r2, [pc, #352]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bf4:	4b53      	ldr	r3, [pc, #332]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	4a52      	ldr	r2, [pc, #328]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c00:	4b50      	ldr	r3, [pc, #320]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	494d      	ldr	r1, [pc, #308]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d044      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d107      	bne.n	8004c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c26:	4b47      	ldr	r3, [pc, #284]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d119      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e07f      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d003      	beq.n	8004c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c46:	4b3f      	ldr	r3, [pc, #252]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e06f      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c56:	4b3b      	ldr	r3, [pc, #236]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e067      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c66:	4b37      	ldr	r3, [pc, #220]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f023 0203 	bic.w	r2, r3, #3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	4934      	ldr	r1, [pc, #208]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c78:	f7fe fd38 	bl	80036ec <HAL_GetTick>
 8004c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7e:	e00a      	b.n	8004c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c80:	f7fe fd34 	bl	80036ec <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e04f      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c96:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 020c 	and.w	r2, r3, #12
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d1eb      	bne.n	8004c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca8:	4b25      	ldr	r3, [pc, #148]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d20c      	bcs.n	8004cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb6:	4b22      	ldr	r3, [pc, #136]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cbe:	4b20      	ldr	r3, [pc, #128]	; (8004d40 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e032      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cdc:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	4916      	ldr	r1, [pc, #88]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	490e      	ldr	r1, [pc, #56]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d0e:	f000 f821 	bl	8004d54 <HAL_RCC_GetSysClockFreq>
 8004d12:	4602      	mov	r2, r0
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	091b      	lsrs	r3, r3, #4
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	490a      	ldr	r1, [pc, #40]	; (8004d48 <HAL_RCC_ClockConfig+0x1c0>)
 8004d20:	5ccb      	ldrb	r3, [r1, r3]
 8004d22:	fa22 f303 	lsr.w	r3, r2, r3
 8004d26:	4a09      	ldr	r2, [pc, #36]	; (8004d4c <HAL_RCC_ClockConfig+0x1c4>)
 8004d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fe fc98 	bl	8003664 <HAL_InitTick>

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40023c00 	.word	0x40023c00
 8004d44:	40023800 	.word	0x40023800
 8004d48:	080063cc 	.word	0x080063cc
 8004d4c:	20000000 	.word	0x20000000
 8004d50:	20000004 	.word	0x20000004

08004d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	607b      	str	r3, [r7, #4]
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	2300      	movs	r3, #0
 8004d66:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d6c:	4b67      	ldr	r3, [pc, #412]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 030c 	and.w	r3, r3, #12
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d00d      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0x40>
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	f200 80bd 	bhi.w	8004ef8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0x34>
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d003      	beq.n	8004d8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d86:	e0b7      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d88:	4b61      	ldr	r3, [pc, #388]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d8a:	60bb      	str	r3, [r7, #8]
       break;
 8004d8c:	e0b7      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d8e:	4b61      	ldr	r3, [pc, #388]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004d90:	60bb      	str	r3, [r7, #8]
      break;
 8004d92:	e0b4      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d94:	4b5d      	ldr	r3, [pc, #372]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d9e:	4b5b      	ldr	r3, [pc, #364]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d04d      	beq.n	8004e46 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004daa:	4b58      	ldr	r3, [pc, #352]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	099b      	lsrs	r3, r3, #6
 8004db0:	461a      	mov	r2, r3
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004dba:	f04f 0100 	mov.w	r1, #0
 8004dbe:	ea02 0800 	and.w	r8, r2, r0
 8004dc2:	ea03 0901 	and.w	r9, r3, r1
 8004dc6:	4640      	mov	r0, r8
 8004dc8:	4649      	mov	r1, r9
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	014b      	lsls	r3, r1, #5
 8004dd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dd8:	0142      	lsls	r2, r0, #5
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	ebb0 0008 	subs.w	r0, r0, r8
 8004de2:	eb61 0109 	sbc.w	r1, r1, r9
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	018b      	lsls	r3, r1, #6
 8004df0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004df4:	0182      	lsls	r2, r0, #6
 8004df6:	1a12      	subs	r2, r2, r0
 8004df8:	eb63 0301 	sbc.w	r3, r3, r1
 8004dfc:	f04f 0000 	mov.w	r0, #0
 8004e00:	f04f 0100 	mov.w	r1, #0
 8004e04:	00d9      	lsls	r1, r3, #3
 8004e06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e0a:	00d0      	lsls	r0, r2, #3
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	eb12 0208 	adds.w	r2, r2, r8
 8004e14:	eb43 0309 	adc.w	r3, r3, r9
 8004e18:	f04f 0000 	mov.w	r0, #0
 8004e1c:	f04f 0100 	mov.w	r1, #0
 8004e20:	0259      	lsls	r1, r3, #9
 8004e22:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004e26:	0250      	lsls	r0, r2, #9
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	4619      	mov	r1, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	461a      	mov	r2, r3
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	f7fb f9c6 	bl	80001c8 <__aeabi_uldivmod>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4613      	mov	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	e04a      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e46:	4b31      	ldr	r3, [pc, #196]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	099b      	lsrs	r3, r3, #6
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	f04f 0300 	mov.w	r3, #0
 8004e52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e56:	f04f 0100 	mov.w	r1, #0
 8004e5a:	ea02 0400 	and.w	r4, r2, r0
 8004e5e:	ea03 0501 	and.w	r5, r3, r1
 8004e62:	4620      	mov	r0, r4
 8004e64:	4629      	mov	r1, r5
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	014b      	lsls	r3, r1, #5
 8004e70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e74:	0142      	lsls	r2, r0, #5
 8004e76:	4610      	mov	r0, r2
 8004e78:	4619      	mov	r1, r3
 8004e7a:	1b00      	subs	r0, r0, r4
 8004e7c:	eb61 0105 	sbc.w	r1, r1, r5
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	018b      	lsls	r3, r1, #6
 8004e8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e8e:	0182      	lsls	r2, r0, #6
 8004e90:	1a12      	subs	r2, r2, r0
 8004e92:	eb63 0301 	sbc.w	r3, r3, r1
 8004e96:	f04f 0000 	mov.w	r0, #0
 8004e9a:	f04f 0100 	mov.w	r1, #0
 8004e9e:	00d9      	lsls	r1, r3, #3
 8004ea0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ea4:	00d0      	lsls	r0, r2, #3
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	1912      	adds	r2, r2, r4
 8004eac:	eb45 0303 	adc.w	r3, r5, r3
 8004eb0:	f04f 0000 	mov.w	r0, #0
 8004eb4:	f04f 0100 	mov.w	r1, #0
 8004eb8:	0299      	lsls	r1, r3, #10
 8004eba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ebe:	0290      	lsls	r0, r2, #10
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	f7fb f97a 	bl	80001c8 <__aeabi_uldivmod>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4613      	mov	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004edc:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	60bb      	str	r3, [r7, #8]
      break;
 8004ef6:	e002      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ef8:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004efa:	60bb      	str	r3, [r7, #8]
      break;
 8004efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004efe:	68bb      	ldr	r3, [r7, #8]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	00f42400 	.word	0x00f42400
 8004f14:	007a1200 	.word	0x007a1200

08004f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f1c:	4b03      	ldr	r3, [pc, #12]	; (8004f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	20000000 	.word	0x20000000

08004f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f34:	f7ff fff0 	bl	8004f18 <HAL_RCC_GetHCLKFreq>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	0a9b      	lsrs	r3, r3, #10
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	4903      	ldr	r1, [pc, #12]	; (8004f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f46:	5ccb      	ldrb	r3, [r1, r3]
 8004f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40023800 	.word	0x40023800
 8004f54:	080063dc 	.word	0x080063dc

08004f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f5c:	f7ff ffdc 	bl	8004f18 <HAL_RCC_GetHCLKFreq>
 8004f60:	4602      	mov	r2, r0
 8004f62:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	0b5b      	lsrs	r3, r3, #13
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	4903      	ldr	r1, [pc, #12]	; (8004f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f6e:	5ccb      	ldrb	r3, [r1, r3]
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	080063dc 	.word	0x080063dc

08004f80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d105      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d035      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fa8:	4b62      	ldr	r3, [pc, #392]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fae:	f7fe fb9d 	bl	80036ec <HAL_GetTick>
 8004fb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fb6:	f7fe fb99 	bl	80036ec <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e0b0      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fc8:	4b5b      	ldr	r3, [pc, #364]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f0      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	019a      	lsls	r2, r3, #6
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	071b      	lsls	r3, r3, #28
 8004fe0:	4955      	ldr	r1, [pc, #340]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fe8:	4b52      	ldr	r3, [pc, #328]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fee:	f7fe fb7d 	bl	80036ec <HAL_GetTick>
 8004ff2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ff4:	e008      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ff6:	f7fe fb79 	bl	80036ec <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e090      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005008:	4b4b      	ldr	r3, [pc, #300]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f0      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8083 	beq.w	8005128 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	4b44      	ldr	r3, [pc, #272]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	4a43      	ldr	r2, [pc, #268]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800502c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005030:	6413      	str	r3, [r2, #64]	; 0x40
 8005032:	4b41      	ldr	r3, [pc, #260]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800503e:	4b3f      	ldr	r3, [pc, #252]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a3e      	ldr	r2, [pc, #248]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005048:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800504a:	f7fe fb4f 	bl	80036ec <HAL_GetTick>
 800504e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005050:	e008      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005052:	f7fe fb4b 	bl	80036ec <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e062      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005064:	4b35      	ldr	r3, [pc, #212]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005070:	4b31      	ldr	r3, [pc, #196]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005078:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d02f      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	429a      	cmp	r2, r3
 800508c:	d028      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800508e:	4b2a      	ldr	r3, [pc, #168]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005096:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005098:	4b29      	ldr	r3, [pc, #164]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800509a:	2201      	movs	r2, #1
 800509c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800509e:	4b28      	ldr	r3, [pc, #160]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050a4:	4a24      	ldr	r2, [pc, #144]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050aa:	4b23      	ldr	r3, [pc, #140]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d114      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050b6:	f7fe fb19 	bl	80036ec <HAL_GetTick>
 80050ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050bc:	e00a      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050be:	f7fe fb15 	bl	80036ec <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e02a      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d4:	4b18      	ldr	r3, [pc, #96]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0ee      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ec:	d10d      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80050ee:	4b12      	ldr	r3, [pc, #72]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005102:	490d      	ldr	r1, [pc, #52]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005104:	4313      	orrs	r3, r2
 8005106:	608b      	str	r3, [r1, #8]
 8005108:	e005      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800510a:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	4a0a      	ldr	r2, [pc, #40]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005110:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005114:	6093      	str	r3, [r2, #8]
 8005116:	4b08      	ldr	r3, [pc, #32]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005118:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005122:	4905      	ldr	r1, [pc, #20]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005124:	4313      	orrs	r3, r2
 8005126:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	42470068 	.word	0x42470068
 8005138:	40023800 	.word	0x40023800
 800513c:	40007000 	.word	0x40007000
 8005140:	42470e40 	.word	0x42470e40

08005144 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e083      	b.n	800525e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	7f5b      	ldrb	r3, [r3, #29]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d105      	bne.n	800516c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fb fd72 	bl	8000c50 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	22ca      	movs	r2, #202	; 0xca
 8005178:	625a      	str	r2, [r3, #36]	; 0x24
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2253      	movs	r2, #83	; 0x53
 8005180:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f897 	bl	80052b6 <RTC_EnterInitMode>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	22ff      	movs	r2, #255	; 0xff
 8005194:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2204      	movs	r2, #4
 800519a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e05e      	b.n	800525e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80051ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6899      	ldr	r1, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	68d2      	ldr	r2, [r2, #12]
 80051da:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6919      	ldr	r1, [r3, #16]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	041a      	lsls	r2, r3, #16
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10e      	bne.n	800522c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f829 	bl	8005266 <HAL_RTC_WaitForSynchro>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d008      	beq.n	800522c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	22ff      	movs	r2, #255	; 0xff
 8005220:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2204      	movs	r2, #4
 8005226:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e018      	b.n	800525e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800523a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	22ff      	movs	r2, #255	; 0xff
 8005254:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800525c:	2300      	movs	r3, #0
  }
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005280:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005282:	f7fe fa33 	bl	80036ec <HAL_GetTick>
 8005286:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005288:	e009      	b.n	800529e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800528a:	f7fe fa2f 	bl	80036ec <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005298:	d901      	bls.n	800529e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e007      	b.n	80052ae <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0ee      	beq.n	800528a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d119      	bne.n	8005304 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f04f 32ff 	mov.w	r2, #4294967295
 80052d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052da:	f7fe fa07 	bl	80036ec <HAL_GetTick>
 80052de:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80052e0:	e009      	b.n	80052f6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80052e2:	f7fe fa03 	bl	80036ec <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052f0:	d901      	bls.n	80052f6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e007      	b.n	8005306 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ee      	beq.n	80052e2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e041      	b.n	80053a4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d106      	bne.n	800533a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7fb fd8f 	bl	8000e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3304      	adds	r3, #4
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f000 f967 	bl	8005620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d122      	bne.n	8005408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d11b      	bne.n	8005408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0202 	mvn.w	r2, #2
 80053d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f8f8 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 80053f4:	e005      	b.n	8005402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f8ea 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f8fb 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b04      	cmp	r3, #4
 8005414:	d122      	bne.n	800545c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b04      	cmp	r3, #4
 8005422:	d11b      	bne.n	800545c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0204 	mvn.w	r2, #4
 800542c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2202      	movs	r2, #2
 8005432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f8ce 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 8005448:	e005      	b.n	8005456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f8c0 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f8d1 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b08      	cmp	r3, #8
 8005468:	d122      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b08      	cmp	r3, #8
 8005476:	d11b      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0208 	mvn.w	r2, #8
 8005480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2204      	movs	r2, #4
 8005486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f8a4 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 800549c:	e005      	b.n	80054aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f896 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f8a7 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	2b10      	cmp	r3, #16
 80054bc:	d122      	bne.n	8005504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d11b      	bne.n	8005504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0210 	mvn.w	r2, #16
 80054d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2208      	movs	r2, #8
 80054da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f87a 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 80054f0:	e005      	b.n	80054fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f86c 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f87d 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b01      	cmp	r3, #1
 8005510:	d10e      	bne.n	8005530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b01      	cmp	r3, #1
 800551e:	d107      	bne.n	8005530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0201 	mvn.w	r2, #1
 8005528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f846 	bl	80055bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553a:	2b80      	cmp	r3, #128	; 0x80
 800553c:	d10e      	bne.n	800555c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005548:	2b80      	cmp	r3, #128	; 0x80
 800554a:	d107      	bne.n	800555c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f988 	bl	800586c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b40      	cmp	r3, #64	; 0x40
 8005568:	d10e      	bne.n	8005588 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005574:	2b40      	cmp	r3, #64	; 0x40
 8005576:	d107      	bne.n	8005588 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f842 	bl	800560c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b20      	cmp	r3, #32
 8005594:	d10e      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d107      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0220 	mvn.w	r2, #32
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f952 	bl	8005858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055b4:	bf00      	nop
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a40      	ldr	r2, [pc, #256]	; (8005734 <TIM_Base_SetConfig+0x114>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d013      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563e:	d00f      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a3d      	ldr	r2, [pc, #244]	; (8005738 <TIM_Base_SetConfig+0x118>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00b      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a3c      	ldr	r2, [pc, #240]	; (800573c <TIM_Base_SetConfig+0x11c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d007      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a3b      	ldr	r2, [pc, #236]	; (8005740 <TIM_Base_SetConfig+0x120>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a3a      	ldr	r2, [pc, #232]	; (8005744 <TIM_Base_SetConfig+0x124>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d108      	bne.n	8005672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a2f      	ldr	r2, [pc, #188]	; (8005734 <TIM_Base_SetConfig+0x114>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d02b      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005680:	d027      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2c      	ldr	r2, [pc, #176]	; (8005738 <TIM_Base_SetConfig+0x118>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d023      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2b      	ldr	r2, [pc, #172]	; (800573c <TIM_Base_SetConfig+0x11c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01f      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a2a      	ldr	r2, [pc, #168]	; (8005740 <TIM_Base_SetConfig+0x120>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d01b      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a29      	ldr	r2, [pc, #164]	; (8005744 <TIM_Base_SetConfig+0x124>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d017      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a28      	ldr	r2, [pc, #160]	; (8005748 <TIM_Base_SetConfig+0x128>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d013      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a27      	ldr	r2, [pc, #156]	; (800574c <TIM_Base_SetConfig+0x12c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00f      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a26      	ldr	r2, [pc, #152]	; (8005750 <TIM_Base_SetConfig+0x130>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00b      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a25      	ldr	r2, [pc, #148]	; (8005754 <TIM_Base_SetConfig+0x134>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a24      	ldr	r2, [pc, #144]	; (8005758 <TIM_Base_SetConfig+0x138>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a23      	ldr	r2, [pc, #140]	; (800575c <TIM_Base_SetConfig+0x13c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d108      	bne.n	80056e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a0a      	ldr	r2, [pc, #40]	; (8005734 <TIM_Base_SetConfig+0x114>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_Base_SetConfig+0xf8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a0c      	ldr	r2, [pc, #48]	; (8005744 <TIM_Base_SetConfig+0x124>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d103      	bne.n	8005720 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	615a      	str	r2, [r3, #20]
}
 8005726:	bf00      	nop
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40010000 	.word	0x40010000
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800
 8005740:	40000c00 	.word	0x40000c00
 8005744:	40010400 	.word	0x40010400
 8005748:	40014000 	.word	0x40014000
 800574c:	40014400 	.word	0x40014400
 8005750:	40014800 	.word	0x40014800
 8005754:	40001800 	.word	0x40001800
 8005758:	40001c00 	.word	0x40001c00
 800575c:	40002000 	.word	0x40002000

08005760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005774:	2302      	movs	r3, #2
 8005776:	e05a      	b.n	800582e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a21      	ldr	r2, [pc, #132]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d022      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c4:	d01d      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1d      	ldr	r2, [pc, #116]	; (8005840 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d018      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1b      	ldr	r2, [pc, #108]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a1a      	ldr	r2, [pc, #104]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00e      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a18      	ldr	r2, [pc, #96]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d009      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a17      	ldr	r2, [pc, #92]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d004      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a15      	ldr	r2, [pc, #84]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d10c      	bne.n	800581c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	4313      	orrs	r3, r2
 8005812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40010000 	.word	0x40010000
 8005840:	40000400 	.word	0x40000400
 8005844:	40000800 	.word	0x40000800
 8005848:	40000c00 	.word	0x40000c00
 800584c:	40010400 	.word	0x40010400
 8005850:	40014000 	.word	0x40014000
 8005854:	40001800 	.word	0x40001800

08005858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e03f      	b.n	8005912 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fb fc38 	bl	800111c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2224      	movs	r2, #36	; 0x24
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fb3f 	bl	8005f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695a      	ldr	r2, [r3, #20]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08a      	sub	sp, #40	; 0x28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800593c:	2300      	movs	r3, #0
 800593e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10d      	bne.n	800596e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <HAL_UART_IRQHandler+0x52>
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fa57 	bl	8005e1a <UART_Receive_IT>
      return;
 800596c:	e17c      	b.n	8005c68 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 80b1 	beq.w	8005ad8 <HAL_UART_IRQHandler+0x1bc>
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d105      	bne.n	800598c <HAL_UART_IRQHandler+0x70>
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 80a6 	beq.w	8005ad8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <HAL_UART_IRQHandler+0x90>
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	f043 0201 	orr.w	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <HAL_UART_IRQHandler+0xb0>
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	f043 0202 	orr.w	r2, r3, #2
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <HAL_UART_IRQHandler+0xd0>
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d005      	beq.n	80059ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e4:	f043 0204 	orr.w	r2, r3, #4
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00f      	beq.n	8005a16 <HAL_UART_IRQHandler+0xfa>
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d104      	bne.n	8005a0a <HAL_UART_IRQHandler+0xee>
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d005      	beq.n	8005a16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f043 0208 	orr.w	r2, r3, #8
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 811f 	beq.w	8005c5e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d007      	beq.n	8005a3a <HAL_UART_IRQHandler+0x11e>
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	f003 0320 	and.w	r3, r3, #32
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f9f0 	bl	8005e1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a44:	2b40      	cmp	r3, #64	; 0x40
 8005a46:	bf0c      	ite	eq
 8005a48:	2301      	moveq	r3, #1
 8005a4a:	2300      	movne	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d102      	bne.n	8005a62 <HAL_UART_IRQHandler+0x146>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d031      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f930 	bl	8005cc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d123      	bne.n	8005abe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695a      	ldr	r2, [r3, #20]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a84:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d013      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	4a77      	ldr	r2, [pc, #476]	; (8005c70 <HAL_UART_IRQHandler+0x354>)
 8005a94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fd ffd7 	bl	8003a4e <HAL_DMA_Abort_IT>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d016      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab4:	e00e      	b.n	8005ad4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f8f0 	bl	8005c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005abc:	e00a      	b.n	8005ad4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f8ec 	bl	8005c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac4:	e006      	b.n	8005ad4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f8e8 	bl	8005c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ad2:	e0c4      	b.n	8005c5e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad4:	bf00      	nop
    return;
 8005ad6:	e0c2      	b.n	8005c5e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	f040 80a2 	bne.w	8005c26 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 809c 	beq.w	8005c26 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8096 	beq.w	8005c26 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1a:	2b40      	cmp	r3, #64	; 0x40
 8005b1c:	d14f      	bne.n	8005bbe <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005b28:	8a3b      	ldrh	r3, [r7, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 8099 	beq.w	8005c62 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b34:	8a3a      	ldrh	r2, [r7, #16]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	f080 8093 	bcs.w	8005c62 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8a3a      	ldrh	r2, [r7, #16]
 8005b40:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b4c:	d02b      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b5c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695a      	ldr	r2, [r3, #20]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0201 	bic.w	r2, r2, #1
 8005b6c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	695a      	ldr	r2, [r3, #20]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b7c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0210 	bic.w	r2, r2, #16
 8005b9a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fd fee4 	bl	800396e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f87a 	bl	8005cb0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005bbc:	e051      	b.n	8005c62 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d047      	beq.n	8005c66 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005bd6:	8a7b      	ldrh	r3, [r7, #18]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d044      	beq.n	8005c66 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bea:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695a      	ldr	r2, [r3, #20]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0210 	bic.w	r2, r2, #16
 8005c18:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c1a:	8a7b      	ldrh	r3, [r7, #18]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f846 	bl	8005cb0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c24:	e01f      	b.n	8005c66 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <HAL_UART_IRQHandler+0x326>
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f885 	bl	8005d4a <UART_Transmit_IT>
    return;
 8005c40:	e012      	b.n	8005c68 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00d      	beq.n	8005c68 <HAL_UART_IRQHandler+0x34c>
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d008      	beq.n	8005c68 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f8c7 	bl	8005dea <UART_EndTransmit_IT>
    return;
 8005c5c:	e004      	b.n	8005c68 <HAL_UART_IRQHandler+0x34c>
    return;
 8005c5e:	bf00      	nop
 8005c60:	e002      	b.n	8005c68 <HAL_UART_IRQHandler+0x34c>
      return;
 8005c62:	bf00      	nop
 8005c64:	e000      	b.n	8005c68 <HAL_UART_IRQHandler+0x34c>
      return;
 8005c66:	bf00      	nop
  }
}
 8005c68:	3728      	adds	r7, #40	; 0x28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	08005d23 	.word	0x08005d23

08005c74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cde:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d107      	bne.n	8005d08 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0210 	bic.w	r2, r2, #16
 8005d06:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f7ff ffad 	bl	8005c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b085      	sub	sp, #20
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b21      	cmp	r3, #33	; 0x21
 8005d5c:	d13e      	bne.n	8005ddc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d66:	d114      	bne.n	8005d92 <UART_Transmit_IT+0x48>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d110      	bne.n	8005d92 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	1c9a      	adds	r2, r3, #2
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	621a      	str	r2, [r3, #32]
 8005d90:	e008      	b.n	8005da4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	1c59      	adds	r1, r3, #1
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6211      	str	r1, [r2, #32]
 8005d9c:	781a      	ldrb	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	4619      	mov	r1, r3
 8005db2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10f      	bne.n	8005dd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	e000      	b.n	8005dde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ddc:	2302      	movs	r3, #2
  }
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff ff32 	bl	8005c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b22      	cmp	r3, #34	; 0x22
 8005e2c:	f040 8087 	bne.w	8005f3e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e38:	d117      	bne.n	8005e6a <UART_Receive_IT+0x50>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d113      	bne.n	8005e6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e62:	1c9a      	adds	r2, r3, #2
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	629a      	str	r2, [r3, #40]	; 0x28
 8005e68:	e026      	b.n	8005eb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7c:	d007      	beq.n	8005e8e <UART_Receive_IT+0x74>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <UART_Receive_IT+0x82>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	e008      	b.n	8005eae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d136      	bne.n	8005f3a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0220 	bic.w	r2, r2, #32
 8005eda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0201 	bic.w	r2, r2, #1
 8005efa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d10e      	bne.n	8005f2a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0210 	bic.w	r2, r2, #16
 8005f1a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f20:	4619      	mov	r1, r3
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7ff fec4 	bl	8005cb0 <HAL_UARTEx_RxEventCallback>
 8005f28:	e002      	b.n	8005f30 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff feac 	bl	8005c88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	e002      	b.n	8005f40 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e000      	b.n	8005f40 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005f3e:	2302      	movs	r3, #2
  }
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	b09f      	sub	sp, #124	; 0x7c
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f5e:	68d9      	ldr	r1, [r3, #12]
 8005f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	ea40 0301 	orr.w	r3, r0, r1
 8005f68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f8c:	f021 010c 	bic.w	r1, r1, #12
 8005f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f96:	430b      	orrs	r3, r1
 8005f98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa6:	6999      	ldr	r1, [r3, #24]
 8005fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	ea40 0301 	orr.w	r3, r0, r1
 8005fb0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	4bc5      	ldr	r3, [pc, #788]	; (80062cc <UART_SetConfig+0x384>)
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d004      	beq.n	8005fc6 <UART_SetConfig+0x7e>
 8005fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	4bc3      	ldr	r3, [pc, #780]	; (80062d0 <UART_SetConfig+0x388>)
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d103      	bne.n	8005fce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fc6:	f7fe ffc7 	bl	8004f58 <HAL_RCC_GetPCLK2Freq>
 8005fca:	6778      	str	r0, [r7, #116]	; 0x74
 8005fcc:	e002      	b.n	8005fd4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fce:	f7fe ffaf 	bl	8004f30 <HAL_RCC_GetPCLK1Freq>
 8005fd2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fdc:	f040 80b6 	bne.w	800614c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fe2:	461c      	mov	r4, r3
 8005fe4:	f04f 0500 	mov.w	r5, #0
 8005fe8:	4622      	mov	r2, r4
 8005fea:	462b      	mov	r3, r5
 8005fec:	1891      	adds	r1, r2, r2
 8005fee:	6439      	str	r1, [r7, #64]	; 0x40
 8005ff0:	415b      	adcs	r3, r3
 8005ff2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ff8:	1912      	adds	r2, r2, r4
 8005ffa:	eb45 0303 	adc.w	r3, r5, r3
 8005ffe:	f04f 0000 	mov.w	r0, #0
 8006002:	f04f 0100 	mov.w	r1, #0
 8006006:	00d9      	lsls	r1, r3, #3
 8006008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800600c:	00d0      	lsls	r0, r2, #3
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	1911      	adds	r1, r2, r4
 8006014:	6639      	str	r1, [r7, #96]	; 0x60
 8006016:	416b      	adcs	r3, r5
 8006018:	667b      	str	r3, [r7, #100]	; 0x64
 800601a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	461a      	mov	r2, r3
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	1891      	adds	r1, r2, r2
 8006026:	63b9      	str	r1, [r7, #56]	; 0x38
 8006028:	415b      	adcs	r3, r3
 800602a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800602c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006030:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006034:	f7fa f8c8 	bl	80001c8 <__aeabi_uldivmod>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4ba5      	ldr	r3, [pc, #660]	; (80062d4 <UART_SetConfig+0x38c>)
 800603e:	fba3 2302 	umull	r2, r3, r3, r2
 8006042:	095b      	lsrs	r3, r3, #5
 8006044:	011e      	lsls	r6, r3, #4
 8006046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006048:	461c      	mov	r4, r3
 800604a:	f04f 0500 	mov.w	r5, #0
 800604e:	4622      	mov	r2, r4
 8006050:	462b      	mov	r3, r5
 8006052:	1891      	adds	r1, r2, r2
 8006054:	6339      	str	r1, [r7, #48]	; 0x30
 8006056:	415b      	adcs	r3, r3
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
 800605a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800605e:	1912      	adds	r2, r2, r4
 8006060:	eb45 0303 	adc.w	r3, r5, r3
 8006064:	f04f 0000 	mov.w	r0, #0
 8006068:	f04f 0100 	mov.w	r1, #0
 800606c:	00d9      	lsls	r1, r3, #3
 800606e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006072:	00d0      	lsls	r0, r2, #3
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	1911      	adds	r1, r2, r4
 800607a:	65b9      	str	r1, [r7, #88]	; 0x58
 800607c:	416b      	adcs	r3, r5
 800607e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	461a      	mov	r2, r3
 8006086:	f04f 0300 	mov.w	r3, #0
 800608a:	1891      	adds	r1, r2, r2
 800608c:	62b9      	str	r1, [r7, #40]	; 0x28
 800608e:	415b      	adcs	r3, r3
 8006090:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006092:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006096:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800609a:	f7fa f895 	bl	80001c8 <__aeabi_uldivmod>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4b8c      	ldr	r3, [pc, #560]	; (80062d4 <UART_SetConfig+0x38c>)
 80060a4:	fba3 1302 	umull	r1, r3, r3, r2
 80060a8:	095b      	lsrs	r3, r3, #5
 80060aa:	2164      	movs	r1, #100	; 0x64
 80060ac:	fb01 f303 	mul.w	r3, r1, r3
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	3332      	adds	r3, #50	; 0x32
 80060b6:	4a87      	ldr	r2, [pc, #540]	; (80062d4 <UART_SetConfig+0x38c>)
 80060b8:	fba2 2303 	umull	r2, r3, r2, r3
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060c4:	441e      	add	r6, r3
 80060c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060c8:	4618      	mov	r0, r3
 80060ca:	f04f 0100 	mov.w	r1, #0
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	1894      	adds	r4, r2, r2
 80060d4:	623c      	str	r4, [r7, #32]
 80060d6:	415b      	adcs	r3, r3
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
 80060da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060de:	1812      	adds	r2, r2, r0
 80060e0:	eb41 0303 	adc.w	r3, r1, r3
 80060e4:	f04f 0400 	mov.w	r4, #0
 80060e8:	f04f 0500 	mov.w	r5, #0
 80060ec:	00dd      	lsls	r5, r3, #3
 80060ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060f2:	00d4      	lsls	r4, r2, #3
 80060f4:	4622      	mov	r2, r4
 80060f6:	462b      	mov	r3, r5
 80060f8:	1814      	adds	r4, r2, r0
 80060fa:	653c      	str	r4, [r7, #80]	; 0x50
 80060fc:	414b      	adcs	r3, r1
 80060fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	461a      	mov	r2, r3
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	1891      	adds	r1, r2, r2
 800610c:	61b9      	str	r1, [r7, #24]
 800610e:	415b      	adcs	r3, r3
 8006110:	61fb      	str	r3, [r7, #28]
 8006112:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006116:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800611a:	f7fa f855 	bl	80001c8 <__aeabi_uldivmod>
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	4b6c      	ldr	r3, [pc, #432]	; (80062d4 <UART_SetConfig+0x38c>)
 8006124:	fba3 1302 	umull	r1, r3, r3, r2
 8006128:	095b      	lsrs	r3, r3, #5
 800612a:	2164      	movs	r1, #100	; 0x64
 800612c:	fb01 f303 	mul.w	r3, r1, r3
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	3332      	adds	r3, #50	; 0x32
 8006136:	4a67      	ldr	r2, [pc, #412]	; (80062d4 <UART_SetConfig+0x38c>)
 8006138:	fba2 2303 	umull	r2, r3, r2, r3
 800613c:	095b      	lsrs	r3, r3, #5
 800613e:	f003 0207 	and.w	r2, r3, #7
 8006142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4432      	add	r2, r6
 8006148:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800614a:	e0b9      	b.n	80062c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800614c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800614e:	461c      	mov	r4, r3
 8006150:	f04f 0500 	mov.w	r5, #0
 8006154:	4622      	mov	r2, r4
 8006156:	462b      	mov	r3, r5
 8006158:	1891      	adds	r1, r2, r2
 800615a:	6139      	str	r1, [r7, #16]
 800615c:	415b      	adcs	r3, r3
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006164:	1912      	adds	r2, r2, r4
 8006166:	eb45 0303 	adc.w	r3, r5, r3
 800616a:	f04f 0000 	mov.w	r0, #0
 800616e:	f04f 0100 	mov.w	r1, #0
 8006172:	00d9      	lsls	r1, r3, #3
 8006174:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006178:	00d0      	lsls	r0, r2, #3
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	eb12 0804 	adds.w	r8, r2, r4
 8006182:	eb43 0905 	adc.w	r9, r3, r5
 8006186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	4618      	mov	r0, r3
 800618c:	f04f 0100 	mov.w	r1, #0
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	008b      	lsls	r3, r1, #2
 800619a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800619e:	0082      	lsls	r2, r0, #2
 80061a0:	4640      	mov	r0, r8
 80061a2:	4649      	mov	r1, r9
 80061a4:	f7fa f810 	bl	80001c8 <__aeabi_uldivmod>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4b49      	ldr	r3, [pc, #292]	; (80062d4 <UART_SetConfig+0x38c>)
 80061ae:	fba3 2302 	umull	r2, r3, r3, r2
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	011e      	lsls	r6, r3, #4
 80061b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061b8:	4618      	mov	r0, r3
 80061ba:	f04f 0100 	mov.w	r1, #0
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	1894      	adds	r4, r2, r2
 80061c4:	60bc      	str	r4, [r7, #8]
 80061c6:	415b      	adcs	r3, r3
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061ce:	1812      	adds	r2, r2, r0
 80061d0:	eb41 0303 	adc.w	r3, r1, r3
 80061d4:	f04f 0400 	mov.w	r4, #0
 80061d8:	f04f 0500 	mov.w	r5, #0
 80061dc:	00dd      	lsls	r5, r3, #3
 80061de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061e2:	00d4      	lsls	r4, r2, #3
 80061e4:	4622      	mov	r2, r4
 80061e6:	462b      	mov	r3, r5
 80061e8:	1814      	adds	r4, r2, r0
 80061ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80061ec:	414b      	adcs	r3, r1
 80061ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f04f 0100 	mov.w	r1, #0
 80061fa:	f04f 0200 	mov.w	r2, #0
 80061fe:	f04f 0300 	mov.w	r3, #0
 8006202:	008b      	lsls	r3, r1, #2
 8006204:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006208:	0082      	lsls	r2, r0, #2
 800620a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800620e:	f7f9 ffdb 	bl	80001c8 <__aeabi_uldivmod>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4b2f      	ldr	r3, [pc, #188]	; (80062d4 <UART_SetConfig+0x38c>)
 8006218:	fba3 1302 	umull	r1, r3, r3, r2
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	2164      	movs	r1, #100	; 0x64
 8006220:	fb01 f303 	mul.w	r3, r1, r3
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	3332      	adds	r3, #50	; 0x32
 800622a:	4a2a      	ldr	r2, [pc, #168]	; (80062d4 <UART_SetConfig+0x38c>)
 800622c:	fba2 2303 	umull	r2, r3, r2, r3
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006236:	441e      	add	r6, r3
 8006238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800623a:	4618      	mov	r0, r3
 800623c:	f04f 0100 	mov.w	r1, #0
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	1894      	adds	r4, r2, r2
 8006246:	603c      	str	r4, [r7, #0]
 8006248:	415b      	adcs	r3, r3
 800624a:	607b      	str	r3, [r7, #4]
 800624c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006250:	1812      	adds	r2, r2, r0
 8006252:	eb41 0303 	adc.w	r3, r1, r3
 8006256:	f04f 0400 	mov.w	r4, #0
 800625a:	f04f 0500 	mov.w	r5, #0
 800625e:	00dd      	lsls	r5, r3, #3
 8006260:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006264:	00d4      	lsls	r4, r2, #3
 8006266:	4622      	mov	r2, r4
 8006268:	462b      	mov	r3, r5
 800626a:	eb12 0a00 	adds.w	sl, r2, r0
 800626e:	eb43 0b01 	adc.w	fp, r3, r1
 8006272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	4618      	mov	r0, r3
 8006278:	f04f 0100 	mov.w	r1, #0
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	008b      	lsls	r3, r1, #2
 8006286:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800628a:	0082      	lsls	r2, r0, #2
 800628c:	4650      	mov	r0, sl
 800628e:	4659      	mov	r1, fp
 8006290:	f7f9 ff9a 	bl	80001c8 <__aeabi_uldivmod>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	4b0e      	ldr	r3, [pc, #56]	; (80062d4 <UART_SetConfig+0x38c>)
 800629a:	fba3 1302 	umull	r1, r3, r3, r2
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	2164      	movs	r1, #100	; 0x64
 80062a2:	fb01 f303 	mul.w	r3, r1, r3
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	3332      	adds	r3, #50	; 0x32
 80062ac:	4a09      	ldr	r2, [pc, #36]	; (80062d4 <UART_SetConfig+0x38c>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	f003 020f 	and.w	r2, r3, #15
 80062b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4432      	add	r2, r6
 80062be:	609a      	str	r2, [r3, #8]
}
 80062c0:	bf00      	nop
 80062c2:	377c      	adds	r7, #124	; 0x7c
 80062c4:	46bd      	mov	sp, r7
 80062c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ca:	bf00      	nop
 80062cc:	40011000 	.word	0x40011000
 80062d0:	40011400 	.word	0x40011400
 80062d4:	51eb851f 	.word	0x51eb851f

080062d8 <__libc_init_array>:
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	4d0d      	ldr	r5, [pc, #52]	; (8006310 <__libc_init_array+0x38>)
 80062dc:	4c0d      	ldr	r4, [pc, #52]	; (8006314 <__libc_init_array+0x3c>)
 80062de:	1b64      	subs	r4, r4, r5
 80062e0:	10a4      	asrs	r4, r4, #2
 80062e2:	2600      	movs	r6, #0
 80062e4:	42a6      	cmp	r6, r4
 80062e6:	d109      	bne.n	80062fc <__libc_init_array+0x24>
 80062e8:	4d0b      	ldr	r5, [pc, #44]	; (8006318 <__libc_init_array+0x40>)
 80062ea:	4c0c      	ldr	r4, [pc, #48]	; (800631c <__libc_init_array+0x44>)
 80062ec:	f000 f820 	bl	8006330 <_init>
 80062f0:	1b64      	subs	r4, r4, r5
 80062f2:	10a4      	asrs	r4, r4, #2
 80062f4:	2600      	movs	r6, #0
 80062f6:	42a6      	cmp	r6, r4
 80062f8:	d105      	bne.n	8006306 <__libc_init_array+0x2e>
 80062fa:	bd70      	pop	{r4, r5, r6, pc}
 80062fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006300:	4798      	blx	r3
 8006302:	3601      	adds	r6, #1
 8006304:	e7ee      	b.n	80062e4 <__libc_init_array+0xc>
 8006306:	f855 3b04 	ldr.w	r3, [r5], #4
 800630a:	4798      	blx	r3
 800630c:	3601      	adds	r6, #1
 800630e:	e7f2      	b.n	80062f6 <__libc_init_array+0x1e>
 8006310:	080092e4 	.word	0x080092e4
 8006314:	080092e4 	.word	0x080092e4
 8006318:	080092e4 	.word	0x080092e4
 800631c:	080092e8 	.word	0x080092e8

08006320 <memset>:
 8006320:	4402      	add	r2, r0
 8006322:	4603      	mov	r3, r0
 8006324:	4293      	cmp	r3, r2
 8006326:	d100      	bne.n	800632a <memset+0xa>
 8006328:	4770      	bx	lr
 800632a:	f803 1b01 	strb.w	r1, [r3], #1
 800632e:	e7f9      	b.n	8006324 <memset+0x4>

08006330 <_init>:
 8006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006332:	bf00      	nop
 8006334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006336:	bc08      	pop	{r3}
 8006338:	469e      	mov	lr, r3
 800633a:	4770      	bx	lr

0800633c <_fini>:
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633e:	bf00      	nop
 8006340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006342:	bc08      	pop	{r3}
 8006344:	469e      	mov	lr, r3
 8006346:	4770      	bx	lr
