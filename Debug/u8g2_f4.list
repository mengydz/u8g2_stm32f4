
u8g2_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ddc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f6c  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ed0  08008ed0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ed0  08008ed0  00018ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ed8  08008ed8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ed8  08008ed8  00018ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008edc  08008edc  00018edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  2000000c  08008eec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00001200  20000668  08008eec  00020668  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007dc56  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004aeb  00000000  00000000  0009dc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d18  00000000  00000000  000a2780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002af8  00000000  00000000  000a5498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024462  00000000  00000000  000a7f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000230b2  00000000  00000000  000cc3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3b46  00000000  00000000  000ef4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d2fea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c218  00000000  00000000  001d3040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f4c 	.word	0x08005f4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005f4c 	.word	0x08005f4c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
 80004da:	4b2d      	ldr	r3, [pc, #180]	; (8000590 <MX_GPIO_Init+0xd0>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a2c      	ldr	r2, [pc, #176]	; (8000590 <MX_GPIO_Init+0xd0>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b2a      	ldr	r3, [pc, #168]	; (8000590 <MX_GPIO_Init+0xd0>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	4b26      	ldr	r3, [pc, #152]	; (8000590 <MX_GPIO_Init+0xd0>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a25      	ldr	r2, [pc, #148]	; (8000590 <MX_GPIO_Init+0xd0>)
 80004fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b23      	ldr	r3, [pc, #140]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a17      	ldr	r2, [pc, #92]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000534:	f043 0308 	orr.w	r3, r3, #8
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <MX_GPIO_Init+0xd0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0308 	and.w	r3, r3, #8
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_GPIO_Init+0xd0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a10      	ldr	r2, [pc, #64]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <MX_GPIO_Init+0xd0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2102      	movs	r1, #2
 8000566:	480b      	ldr	r0, [pc, #44]	; (8000594 <MX_GPIO_Init+0xd4>)
 8000568:	f003 fa3e 	bl	80039e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800056c:	2302      	movs	r3, #2
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	2300      	movs	r3, #0
 800057a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4619      	mov	r1, r3
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <MX_GPIO_Init+0xd4>)
 8000584:	f003 f894 	bl	80036b0 <HAL_GPIO_Init>

}
 8000588:	bf00      	nop
 800058a:	3728      	adds	r7, #40	; 0x28
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40023800 	.word	0x40023800
 8000594:	40020000 	.word	0x40020000

08000598 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <MX_I2C1_Init+0x50>)
 800059e:	4a13      	ldr	r2, [pc, #76]	; (80005ec <MX_I2C1_Init+0x54>)
 80005a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005a4:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <MX_I2C1_Init+0x58>)
 80005a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005be:	2200      	movs	r2, #0
 80005c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005d6:	f003 fa21 	bl	8003a1c <HAL_I2C_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005e0:	f000 fa8a 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200004d8 	.word	0x200004d8
 80005ec:	40005400 	.word	0x40005400
 80005f0:	00061a80 	.word	0x00061a80

080005f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a19      	ldr	r2, [pc, #100]	; (8000678 <HAL_I2C_MspInit+0x84>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d12b      	bne.n	800066e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <HAL_I2C_MspInit+0x88>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <HAL_I2C_MspInit+0x88>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_I2C_MspInit+0x88>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000632:	23c0      	movs	r3, #192	; 0xc0
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000636:	2312      	movs	r3, #18
 8000638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800063a:	2301      	movs	r3, #1
 800063c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000642:	2304      	movs	r3, #4
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <HAL_I2C_MspInit+0x8c>)
 800064e:	f003 f82f 	bl	80036b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_I2C_MspInit+0x88>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a08      	ldr	r2, [pc, #32]	; (800067c <HAL_I2C_MspInit+0x88>)
 800065c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_I2C_MspInit+0x88>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	; 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40005400 	.word	0x40005400
 800067c:	40023800 	.word	0x40023800
 8000680:	40020400 	.word	0x40020400

08000684 <u8g2_prepare>:

/*
  Function which responds for drawing
  */
void u8g2_prepare()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  u8g2_SetFont(&u8g2, u8g2_font_courB10_tr);
 8000688:	4909      	ldr	r1, [pc, #36]	; (80006b0 <u8g2_prepare+0x2c>)
 800068a:	480a      	ldr	r0, [pc, #40]	; (80006b4 <u8g2_prepare+0x30>)
 800068c:	f001 fd5a 	bl	8002144 <u8g2_SetFont>
  u8g2_SetFontRefHeightExtendedText(&u8g2);
 8000690:	4808      	ldr	r0, [pc, #32]	; (80006b4 <u8g2_prepare+0x30>)
 8000692:	f001 fd0b 	bl	80020ac <u8g2_SetFontRefHeightExtendedText>
  u8g2_SetDrawColor(&u8g2, 1);
 8000696:	2101      	movs	r1, #1
 8000698:	4806      	ldr	r0, [pc, #24]	; (80006b4 <u8g2_prepare+0x30>)
 800069a:	f001 fed4 	bl	8002446 <u8g2_SetDrawColor>
  u8g2_SetFontPosTop(&u8g2);
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <u8g2_prepare+0x30>)
 80006a0:	f001 fd40 	bl	8002124 <u8g2_SetFontPosTop>
  u8g2_SetFontDirection(&u8g2, 0);
 80006a4:	2100      	movs	r1, #0
 80006a6:	4803      	ldr	r0, [pc, #12]	; (80006b4 <u8g2_prepare+0x30>)
 80006a8:	f001 fd66 	bl	8002178 <u8g2_SetFontDirection>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	08006350 	.word	0x08006350
 80006b4:	20000028 	.word	0x20000028

080006b8 <u8g2_drawLogo>:

void u8g2_drawLogo(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
    u8g2_SetFontMode(&u8g2,1);	// Transparent
 80006bc:	2101      	movs	r1, #1
 80006be:	482d      	ldr	r0, [pc, #180]	; (8000774 <u8g2_drawLogo+0xbc>)
 80006c0:	f001 fbaf 	bl	8001e22 <u8g2_SetFontMode>
    u8g2_SetDrawColor(&u8g2,1);
 80006c4:	2101      	movs	r1, #1
 80006c6:	482b      	ldr	r0, [pc, #172]	; (8000774 <u8g2_drawLogo+0xbc>)
 80006c8:	f001 febd 	bl	8002446 <u8g2_SetDrawColor>

   u8g2_SetFontDirection(&u8g2, 0);
 80006cc:	2100      	movs	r1, #0
 80006ce:	4829      	ldr	r0, [pc, #164]	; (8000774 <u8g2_drawLogo+0xbc>)
 80006d0:	f001 fd52 	bl	8002178 <u8g2_SetFontDirection>
   u8g2_SetFont(&u8g2, u8g2_font_inb24_mf);
 80006d4:	4928      	ldr	r1, [pc, #160]	; (8000778 <u8g2_drawLogo+0xc0>)
 80006d6:	4827      	ldr	r0, [pc, #156]	; (8000774 <u8g2_drawLogo+0xbc>)
 80006d8:	f001 fd34 	bl	8002144 <u8g2_SetFont>
   u8g2_DrawStr(&u8g2, 0, 5, "U");
 80006dc:	4b27      	ldr	r3, [pc, #156]	; (800077c <u8g2_drawLogo+0xc4>)
 80006de:	2205      	movs	r2, #5
 80006e0:	2100      	movs	r1, #0
 80006e2:	4824      	ldr	r0, [pc, #144]	; (8000774 <u8g2_drawLogo+0xbc>)
 80006e4:	f001 fc5c 	bl	8001fa0 <u8g2_DrawStr>

   u8g2_SetFontDirection(&u8g2, 1);
 80006e8:	2101      	movs	r1, #1
 80006ea:	4822      	ldr	r0, [pc, #136]	; (8000774 <u8g2_drawLogo+0xbc>)
 80006ec:	f001 fd44 	bl	8002178 <u8g2_SetFontDirection>
   u8g2_SetFont(&u8g2, u8g2_font_inb30_mn);
 80006f0:	4923      	ldr	r1, [pc, #140]	; (8000780 <u8g2_drawLogo+0xc8>)
 80006f2:	4820      	ldr	r0, [pc, #128]	; (8000774 <u8g2_drawLogo+0xbc>)
 80006f4:	f001 fd26 	bl	8002144 <u8g2_SetFont>
   u8g2_DrawStr(&u8g2, 51,8,"8");
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <u8g2_drawLogo+0xcc>)
 80006fa:	2208      	movs	r2, #8
 80006fc:	2133      	movs	r1, #51	; 0x33
 80006fe:	481d      	ldr	r0, [pc, #116]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000700:	f001 fc4e 	bl	8001fa0 <u8g2_DrawStr>

   u8g2_SetFontDirection(&u8g2, 0);
 8000704:	2100      	movs	r1, #0
 8000706:	481b      	ldr	r0, [pc, #108]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000708:	f001 fd36 	bl	8002178 <u8g2_SetFontDirection>
   u8g2_SetFont(&u8g2, u8g2_font_inb24_mf);
 800070c:	491a      	ldr	r1, [pc, #104]	; (8000778 <u8g2_drawLogo+0xc0>)
 800070e:	4819      	ldr	r0, [pc, #100]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000710:	f001 fd18 	bl	8002144 <u8g2_SetFont>
   u8g2_DrawStr(&u8g2, 51,5,"g");
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <u8g2_drawLogo+0xd0>)
 8000716:	2205      	movs	r2, #5
 8000718:	2133      	movs	r1, #51	; 0x33
 800071a:	4816      	ldr	r0, [pc, #88]	; (8000774 <u8g2_drawLogo+0xbc>)
 800071c:	f001 fc40 	bl	8001fa0 <u8g2_DrawStr>
   u8g2_DrawStr(&u8g2, 67,5,"\xb2");
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <u8g2_drawLogo+0xd4>)
 8000722:	2205      	movs	r2, #5
 8000724:	2143      	movs	r1, #67	; 0x43
 8000726:	4813      	ldr	r0, [pc, #76]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000728:	f001 fc3a 	bl	8001fa0 <u8g2_DrawStr>

   u8g2_DrawHLine(&u8g2, 2, 35, 47);
 800072c:	232f      	movs	r3, #47	; 0x2f
 800072e:	2223      	movs	r2, #35	; 0x23
 8000730:	2102      	movs	r1, #2
 8000732:	4810      	ldr	r0, [pc, #64]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000734:	f001 fe22 	bl	800237c <u8g2_DrawHLine>
   u8g2_DrawHLine(&u8g2, 3, 36, 47);
 8000738:	232f      	movs	r3, #47	; 0x2f
 800073a:	2224      	movs	r2, #36	; 0x24
 800073c:	2103      	movs	r1, #3
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000740:	f001 fe1c 	bl	800237c <u8g2_DrawHLine>
   u8g2_DrawVLine(&u8g2, 45, 32, 12);
 8000744:	230c      	movs	r3, #12
 8000746:	2220      	movs	r2, #32
 8000748:	212d      	movs	r1, #45	; 0x2d
 800074a:	480a      	ldr	r0, [pc, #40]	; (8000774 <u8g2_drawLogo+0xbc>)
 800074c:	f001 fe2f 	bl	80023ae <u8g2_DrawVLine>
   u8g2_DrawVLine(&u8g2, 46, 33, 12);
 8000750:	230c      	movs	r3, #12
 8000752:	2221      	movs	r2, #33	; 0x21
 8000754:	212e      	movs	r1, #46	; 0x2e
 8000756:	4807      	ldr	r0, [pc, #28]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000758:	f001 fe29 	bl	80023ae <u8g2_DrawVLine>

   u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);
 800075c:	490c      	ldr	r1, [pc, #48]	; (8000790 <u8g2_drawLogo+0xd8>)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <u8g2_drawLogo+0xbc>)
 8000760:	f001 fcf0 	bl	8002144 <u8g2_SetFont>

   u8g2_DrawStr(&u8g2, 1,54,"github.com/olikraus/u8g2");
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <u8g2_drawLogo+0xdc>)
 8000766:	2236      	movs	r2, #54	; 0x36
 8000768:	2101      	movs	r1, #1
 800076a:	4802      	ldr	r0, [pc, #8]	; (8000774 <u8g2_drawLogo+0xbc>)
 800076c:	f001 fc18 	bl	8001fa0 <u8g2_DrawStr>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000028 	.word	0x20000028
 8000778:	080068a4 	.word	0x080068a4
 800077c:	08005f64 	.word	0x08005f64
 8000780:	08008b20 	.word	0x08008b20
 8000784:	08005f68 	.word	0x08005f68
 8000788:	08005f6c 	.word	0x08005f6c
 800078c:	08005f70 	.word	0x08005f70
 8000790:	08005fd8 	.word	0x08005fd8
 8000794:	08005f74 	.word	0x08005f74

08000798 <u8g2_box_frame>:

void u8g2_box_frame(uint8_t a)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af02      	add	r7, sp, #8
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  u8g2_DrawStr(&u8g2, 0,0, "DrawBox");
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <u8g2_box_frame+0x40>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <u8g2_box_frame+0x44>)
 80007aa:	f001 fbf9 	bl	8001fa0 <u8g2_DrawStr>
  u8g2_DrawBox(&u8g2,0,15,20,10);
 80007ae:	230a      	movs	r3, #10
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	2314      	movs	r3, #20
 80007b4:	220f      	movs	r2, #15
 80007b6:	2100      	movs	r1, #0
 80007b8:	4808      	ldr	r0, [pc, #32]	; (80007dc <u8g2_box_frame+0x44>)
 80007ba:	f000 fcb7 	bl	800112c <u8g2_DrawBox>
  u8g2_DrawBox(&u8g2,0+a,15,30,7);
 80007be:	79f9      	ldrb	r1, [r7, #7]
 80007c0:	2307      	movs	r3, #7
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	231e      	movs	r3, #30
 80007c6:	220f      	movs	r2, #15
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <u8g2_box_frame+0x44>)
 80007ca:	f000 fcaf 	bl	800112c <u8g2_DrawBox>
//  u8g2_DrawStr(&u8g2, 0, 32, "DrawFrame");
//  u8g2_DrawFrame(&u8g2,0,15+32,20,10);
//  u8g2_DrawFrame(&u8g2,0+a,15+32,30,7);
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	08005f90 	.word	0x08005f90
 80007dc:	20000028 	.word	0x20000028

080007e0 <u8g2_disc_circle>:

void u8g2_disc_circle(uint8_t a)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af02      	add	r7, sp, #8
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
  u8g2_DrawStr(&u8g2, 0, 0, "DrawDisc");
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <u8g2_disc_circle+0x44>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <u8g2_disc_circle+0x48>)
 80007f2:	f001 fbd5 	bl	8001fa0 <u8g2_DrawStr>
  u8g2_DrawDisc(&u8g2,10,22,7,U8G2_DRAW_ALL);
 80007f6:	230f      	movs	r3, #15
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2307      	movs	r3, #7
 80007fc:	2216      	movs	r2, #22
 80007fe:	210a      	movs	r1, #10
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <u8g2_disc_circle+0x48>)
 8000802:	f000 fe80 	bl	8001506 <u8g2_DrawDisc>
  u8g2_DrawDisc(&u8g2,24+a,20,5,U8G2_DRAW_ALL);
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	3318      	adds	r3, #24
 800080a:	b2d9      	uxtb	r1, r3
 800080c:	230f      	movs	r3, #15
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2305      	movs	r3, #5
 8000812:	2214      	movs	r2, #20
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <u8g2_disc_circle+0x48>)
 8000816:	f000 fe76 	bl	8001506 <u8g2_DrawDisc>
//  u8g2_DrawStr(&u8g2, 0, 32, "DrawCircle");
//  u8g2_DrawCircle(&u8g2,10,22+32,7,U8G2_DRAW_ALL);
//  u8g2_DrawCircle(&u8g2,24+a,20+32,5,U8G2_DRAW_ALL);
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	08005f98 	.word	0x08005f98
 8000828:	20000028 	.word	0x20000028

0800082c <u8g2_string>:

void u8g2_string(uint8_t a)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  u8g2_SetFontDirection(&u8g2,0);
 8000836:	2100      	movs	r1, #0
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <u8g2_string+0x40>)
 800083a:	f001 fc9d 	bl	8002178 <u8g2_SetFontDirection>
  u8g2_DrawStr(&u8g2,70+a,31, " 0");
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	3346      	adds	r3, #70	; 0x46
 8000842:	b2d9      	uxtb	r1, r3
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <u8g2_string+0x44>)
 8000846:	221f      	movs	r2, #31
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <u8g2_string+0x40>)
 800084a:	f001 fba9 	bl	8001fa0 <u8g2_DrawStr>
  u8g2_SetFontDirection(&u8g2,1);
 800084e:	2101      	movs	r1, #1
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <u8g2_string+0x40>)
 8000852:	f001 fc91 	bl	8002178 <u8g2_SetFontDirection>
  u8g2_DrawStr(&u8g2,68,0+a, " 90");
 8000856:	79fa      	ldrb	r2, [r7, #7]
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <u8g2_string+0x48>)
 800085a:	2144      	movs	r1, #68	; 0x44
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <u8g2_string+0x40>)
 800085e:	f001 fb9f 	bl	8001fa0 <u8g2_DrawStr>
//  u8g2_SetFontDirection(&u8g2,2);
//  u8g2_DrawStr(&u8g2,70-a,31, " 180");
//  u8g2_SetFontDirection(&u8g2,3);
//  u8g2_DrawStr(&u8g2,72,64-a, " 270");
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000028 	.word	0x20000028
 8000870:	08005fa4 	.word	0x08005fa4
 8000874:	08005fa8 	.word	0x08005fa8

08000878 <u8g2_line>:

void u8g2_line(uint8_t a)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af02      	add	r7, sp, #8
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  u8g2_DrawStr(&u8g2, 0, 0, "DrawLine");
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <u8g2_line+0x38>)
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	480a      	ldr	r0, [pc, #40]	; (80008b4 <u8g2_line+0x3c>)
 800088a:	f001 fb89 	bl	8001fa0 <u8g2_DrawStr>
  u8g2_DrawLine(&u8g2,7+a, 15, 60-a, 60);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	3307      	adds	r3, #7
 8000892:	b2d9      	uxtb	r1, r3
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800089a:	b2db      	uxtb	r3, r3
 800089c:	223c      	movs	r2, #60	; 0x3c
 800089e:	9200      	str	r2, [sp, #0]
 80008a0:	220f      	movs	r2, #15
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <u8g2_line+0x3c>)
 80008a4:	f001 fe44 	bl	8002530 <u8g2_DrawLine>
//  u8g2_DrawLine(&u8g2,7+a*2, 15, 80-a, 60);
//  u8g2_DrawLine(&u8g2,7+a*3, 15, 100-a, 60);
//  u8g2_DrawLine(&u8g2,7+a*4, 15, 120-a, 60);
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	08005fac 	.word	0x08005fac
 80008b4:	20000028 	.word	0x20000028

080008b8 <draw>:
uint8_t max = 0;
uint8_t step = 0;
uint8_t picture =0;

void draw(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	u8g2_prepare();
 80008bc:	f7ff fee2 	bl	8000684 <u8g2_prepare>
	switch(picture)
 80008c0:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <draw+0x80>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d834      	bhi.n	8000932 <draw+0x7a>
 80008c8:	a201      	add	r2, pc, #4	; (adr r2, 80008d0 <draw+0x18>)
 80008ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ce:	bf00      	nop
 80008d0:	080008e5 	.word	0x080008e5
 80008d4:	080008eb 	.word	0x080008eb
 80008d8:	080008fd 	.word	0x080008fd
 80008dc:	0800090f 	.word	0x0800090f
 80008e0:	08000921 	.word	0x08000921
	{
		case 0:
			u8g2_drawLogo();
 80008e4:	f7ff fee8 	bl	80006b8 <u8g2_drawLogo>
		break;
 80008e8:	e023      	b.n	8000932 <draw+0x7a>
		case 1:
			max = 80;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <draw+0x84>)
 80008ec:	2250      	movs	r2, #80	; 0x50
 80008ee:	701a      	strb	r2, [r3, #0]
			u8g2_box_frame(step);
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <draw+0x88>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff4f 	bl	8000798 <u8g2_box_frame>
		break;
 80008fa:	e01a      	b.n	8000932 <draw+0x7a>
		case 2:
			max = 70;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <draw+0x84>)
 80008fe:	2246      	movs	r2, #70	; 0x46
 8000900:	701a      	strb	r2, [r3, #0]
			u8g2_disc_circle(step);
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <draw+0x88>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff6a 	bl	80007e0 <u8g2_disc_circle>
		break;
 800090c:	e011      	b.n	8000932 <draw+0x7a>
		case 3:
			max = 60;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <draw+0x84>)
 8000910:	223c      	movs	r2, #60	; 0x3c
 8000912:	701a      	strb	r2, [r3, #0]
			u8g2_string(step);
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <draw+0x88>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff87 	bl	800082c <u8g2_string>
		break;
 800091e:	e008      	b.n	8000932 <draw+0x7a>
		case 4:
			max = 50;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <draw+0x84>)
 8000922:	2232      	movs	r2, #50	; 0x32
 8000924:	701a      	strb	r2, [r3, #0]
			u8g2_line(step);
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <draw+0x88>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ffa4 	bl	8000878 <u8g2_line>
		break;
 8000930:	bf00      	nop
	}
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000b2 	.word	0x200000b2
 800093c:	200000b0 	.word	0x200000b0
 8000940:	200000b1 	.word	0x200000b1

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000948:	f002 fc78 	bl	800323c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094c:	f000 f852 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000950:	f7ff fdb6 	bl	80004c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000954:	f000 fb0e 	bl	8000f74 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8000958:	f000 f9c8 	bl	8000cec <MX_TIM7_Init>
  MX_TIM6_Init();
 800095c:	f000 f990 	bl	8000c80 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000960:	f000 fb32 	bl	8000fc8 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000964:	f000 f8ce 	bl	8000b04 <MX_RTC_Init>
  MX_I2C1_Init();
 8000968:	f7ff fe16 	bl	8000598 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  u8g2_Setup_ssd1306_i2c_128x32_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_i2c, u8x8_stm32_gpio_and_delay);
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <main+0x94>)
 800096e:	4a1b      	ldr	r2, [pc, #108]	; (80009dc <main+0x98>)
 8000970:	491b      	ldr	r1, [pc, #108]	; (80009e0 <main+0x9c>)
 8000972:	481c      	ldr	r0, [pc, #112]	; (80009e4 <main+0xa0>)
 8000974:	f000 fe10 	bl	8001598 <u8g2_Setup_ssd1306_i2c_128x32_noname_f>
  u8g2_InitDisplay(&u8g2);
 8000978:	481a      	ldr	r0, [pc, #104]	; (80009e4 <main+0xa0>)
 800097a:	f002 fb93 	bl	80030a4 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 800097e:	2100      	movs	r1, #0
 8000980:	4818      	ldr	r0, [pc, #96]	; (80009e4 <main+0xa0>)
 8000982:	f002 fb9e 	bl	80030c2 <u8x8_SetPowerSave>
//			u8g2_SetBitmapMode(&u8g2,1);
//			u8g2_DrawBitmap(&u8g2, 0, 0, bitmap_height, bitmap_width,  bitmap);
//
//		} while (u8g2_NextPage(&u8g2));

		u8g2_FirstPage(&u8g2);
 8000986:	4817      	ldr	r0, [pc, #92]	; (80009e4 <main+0xa0>)
 8000988:	f000 fc91 	bl	80012ae <u8g2_FirstPage>
		do
		{
			draw();
 800098c:	f7ff ff94 	bl	80008b8 <draw>
		}
		while ( u8g2_NextPage(&u8g2) ); // 8 times running
 8000990:	4814      	ldr	r0, [pc, #80]	; (80009e4 <main+0xa0>)
 8000992:	f000 fca0 	bl	80012d6 <u8g2_NextPage>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1f7      	bne.n	800098c <main+0x48>

		if (step <= max)
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <main+0xa4>)
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <main+0xa8>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d806      	bhi.n	80009b6 <main+0x72>
			step += 3;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <main+0xa4>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	3303      	adds	r3, #3
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <main+0xa4>)
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e7e7      	b.n	8000986 <main+0x42>
		else
		{
			step = 0;
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <main+0xa4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
			picture++;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <main+0xac>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <main+0xac>)
 80009c6:	701a      	strb	r2, [r3, #0]
			if ( picture >= 5)
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <main+0xac>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b04      	cmp	r3, #4
 80009ce:	d9da      	bls.n	8000986 <main+0x42>
				picture = 0;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <main+0xac>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
		u8g2_FirstPage(&u8g2);
 80009d6:	e7d6      	b.n	8000986 <main+0x42>
 80009d8:	08000de5 	.word	0x08000de5
 80009dc:	08000ea9 	.word	0x08000ea9
 80009e0:	08008e54 	.word	0x08008e54
 80009e4:	20000028 	.word	0x20000028
 80009e8:	200000b1 	.word	0x200000b1
 80009ec:	200000b0 	.word	0x200000b0
 80009f0:	200000b2 	.word	0x200000b2

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b098      	sub	sp, #96	; 0x60
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009fe:	2230      	movs	r2, #48	; 0x30
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f005 fa9a 	bl	8005f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b31      	ldr	r3, [pc, #196]	; (8000af0 <SystemClock_Config+0xfc>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a30      	ldr	r2, [pc, #192]	; (8000af0 <SystemClock_Config+0xfc>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <SystemClock_Config+0xfc>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <SystemClock_Config+0x100>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <SystemClock_Config+0x100>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6013      	str	r3, [r2, #0]
 8000a52:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <SystemClock_Config+0x100>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a5e:	2309      	movs	r3, #9
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a76:	2304      	movs	r3, #4
 8000a78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a7a:	23a8      	movs	r3, #168	; 0xa8
 8000a7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a82:	2307      	movs	r3, #7
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f003 fc12 	bl	80042b4 <HAL_RCC_OscConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a96:	f000 f82f 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aa6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	2105      	movs	r1, #5
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 fe73 	bl	80047a4 <HAL_RCC_ClockConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000ac4:	f000 f818 	bl	8000af8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f004 f860 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000ae2:	f000 f809 	bl	8000af8 <Error_Handler>
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3760      	adds	r7, #96	; 0x60
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40007000 	.word	0x40007000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <MX_RTC_Init+0x48>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b16:	227f      	movs	r2, #127	; 0x7f
 8000b18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b1c:	22ff      	movs	r2, #255	; 0xff
 8000b1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_RTC_Init+0x44>)
 8000b34:	f004 f914 	bl	8004d60 <HAL_RTC_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b3e:	f7ff ffdb 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000052c 	.word	0x2000052c
 8000b4c:	40002800 	.word	0x40002800

08000b50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <HAL_RTC_MspInit+0x24>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d102      	bne.n	8000b68 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_RTC_MspInit+0x28>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	40002800 	.word	0x40002800
 8000b78:	42470e3c 	.word	0x42470e3c

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f002 fb62 	bl	80032e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <USART3_IRQHandler+0x10>)
 8000c26:	f004 fc87 	bl	8005538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000620 	.word	0x20000620

08000c34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <TIM6_DAC_IRQHandler+0x10>)
 8000c3a:	f004 f9c5 	bl	8004fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000054c 	.word	0x2000054c

08000c48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <TIM7_IRQHandler+0x10>)
 8000c4e:	f004 f9bb 	bl	8004fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000594 	.word	0x20000594

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c86:	463b      	mov	r3, r7
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_TIM6_Init+0x64>)
 8000c90:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <MX_TIM6_Init+0x68>)
 8000c92:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_TIM6_Init+0x64>)
 8000c96:	2253      	movs	r2, #83	; 0x53
 8000c98:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_TIM6_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_TIM6_Init+0x64>)
 8000ca2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ca6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_TIM6_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_TIM6_Init+0x64>)
 8000cb0:	f004 f93b 	bl	8004f2a <HAL_TIM_Base_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000cba:	f7ff ff1d 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <MX_TIM6_Init+0x64>)
 8000ccc:	f004 fb56 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000cd6:	f7ff ff0f 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000054c 	.word	0x2000054c
 8000ce8:	40001000 	.word	0x40001000

08000cec <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_TIM7_Init+0x64>)
 8000cfc:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <MX_TIM7_Init+0x68>)
 8000cfe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <MX_TIM7_Init+0x64>)
 8000d02:	2253      	movs	r2, #83	; 0x53
 8000d04:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_TIM7_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 8000d0c:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_TIM7_Init+0x64>)
 8000d0e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000d12:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_TIM7_Init+0x64>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d1a:	480d      	ldr	r0, [pc, #52]	; (8000d50 <MX_TIM7_Init+0x64>)
 8000d1c:	f004 f905 	bl	8004f2a <HAL_TIM_Base_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000d26:	f7ff fee7 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d32:	463b      	mov	r3, r7
 8000d34:	4619      	mov	r1, r3
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <MX_TIM7_Init+0x64>)
 8000d38:	f004 fb20 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000d42:	f7ff fed9 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000594 	.word	0x20000594
 8000d54:	40001400 	.word	0x40001400

08000d58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <HAL_TIM_Base_MspInit+0x80>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d116      	bne.n	8000d98 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000d74:	f043 0310 	orr.w	r3, r3, #16
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f003 0310 	and.w	r3, r3, #16
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2036      	movs	r0, #54	; 0x36
 8000d8c:	f002 fbc7 	bl	800351e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d90:	2036      	movs	r0, #54	; 0x36
 8000d92:	f002 fbe0 	bl	8003556 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000d96:	e01a      	b.n	8000dce <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <HAL_TIM_Base_MspInit+0x88>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d115      	bne.n	8000dce <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000dac:	f043 0320 	orr.w	r3, r3, #32
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 0320 	and.w	r3, r3, #32
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2037      	movs	r0, #55	; 0x37
 8000dc4:	f002 fbab 	bl	800351e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000dc8:	2037      	movs	r0, #55	; 0x37
 8000dca:	f002 fbc4 	bl	8003556 <HAL_NVIC_EnableIRQ>
}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40001000 	.word	0x40001000
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40001400 	.word	0x40001400

08000de4 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern I2C_HandleTypeDef hi2c1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	72fb      	strb	r3, [r7, #11]
 8000df2:	4613      	mov	r3, r2
 8000df4:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8000df6:	7afb      	ldrb	r3, [r7, #11]
 8000df8:	3b28      	subs	r3, #40	; 0x28
 8000dfa:	2b23      	cmp	r3, #35	; 0x23
 8000dfc:	d84f      	bhi.n	8000e9e <u8x8_stm32_gpio_and_delay+0xba>
 8000dfe:	a201      	add	r2, pc, #4	; (adr r2, 8000e04 <u8x8_stm32_gpio_and_delay+0x20>)
 8000e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e04:	08000e9f 	.word	0x08000e9f
 8000e08:	08000e95 	.word	0x08000e95
 8000e0c:	08000e9f 	.word	0x08000e9f
 8000e10:	08000e9f 	.word	0x08000e9f
 8000e14:	08000e9f 	.word	0x08000e9f
 8000e18:	08000e9f 	.word	0x08000e9f
 8000e1c:	08000e9f 	.word	0x08000e9f
 8000e20:	08000e9f 	.word	0x08000e9f
 8000e24:	08000e9f 	.word	0x08000e9f
 8000e28:	08000e9f 	.word	0x08000e9f
 8000e2c:	08000e9f 	.word	0x08000e9f
 8000e30:	08000e9f 	.word	0x08000e9f
 8000e34:	08000e9f 	.word	0x08000e9f
 8000e38:	08000e9f 	.word	0x08000e9f
 8000e3c:	08000e9f 	.word	0x08000e9f
 8000e40:	08000e9f 	.word	0x08000e9f
 8000e44:	08000e9f 	.word	0x08000e9f
 8000e48:	08000e9f 	.word	0x08000e9f
 8000e4c:	08000e9f 	.word	0x08000e9f
 8000e50:	08000e9f 	.word	0x08000e9f
 8000e54:	08000e9f 	.word	0x08000e9f
 8000e58:	08000e9f 	.word	0x08000e9f
 8000e5c:	08000e9f 	.word	0x08000e9f
 8000e60:	08000e9f 	.word	0x08000e9f
 8000e64:	08000e9f 	.word	0x08000e9f
 8000e68:	08000e9f 	.word	0x08000e9f
 8000e6c:	08000e9f 	.word	0x08000e9f
 8000e70:	08000e9f 	.word	0x08000e9f
 8000e74:	08000e9f 	.word	0x08000e9f
 8000e78:	08000e9f 	.word	0x08000e9f
 8000e7c:	08000e9f 	.word	0x08000e9f
 8000e80:	08000e9f 	.word	0x08000e9f
 8000e84:	08000e9f 	.word	0x08000e9f
 8000e88:	08000e9f 	.word	0x08000e9f
 8000e8c:	08000e9f 	.word	0x08000e9f
 8000e90:	08000e9f 	.word	0x08000e9f
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8000e94:	7abb      	ldrb	r3, [r7, #10]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fa42 	bl	8003320 <HAL_Delay>
		break;
 8000e9c:	bf00      	nop
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */

		break;
	}
	return 1;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <u8x8_byte_stm32_hw_i2c>:

uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	72fb      	strb	r3, [r7, #11]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	72bb      	strb	r3, [r7, #10]
	/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch(msg)
 8000eba:	7afb      	ldrb	r3, [r7, #11]
 8000ebc:	3b14      	subs	r3, #20
 8000ebe:	2b0c      	cmp	r3, #12
 8000ec0:	d847      	bhi.n	8000f52 <u8x8_byte_stm32_hw_i2c+0xaa>
 8000ec2:	a201      	add	r2, pc, #4	; (adr r2, 8000ec8 <u8x8_byte_stm32_hw_i2c+0x20>)
 8000ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec8:	08000f57 	.word	0x08000f57
 8000ecc:	08000f53 	.word	0x08000f53
 8000ed0:	08000f53 	.word	0x08000f53
 8000ed4:	08000efd 	.word	0x08000efd
 8000ed8:	08000f2d 	.word	0x08000f2d
 8000edc:	08000f35 	.word	0x08000f35
 8000ee0:	08000f53 	.word	0x08000f53
 8000ee4:	08000f53 	.word	0x08000f53
 8000ee8:	08000f53 	.word	0x08000f53
 8000eec:	08000f53 	.word	0x08000f53
 8000ef0:	08000f53 	.word	0x08000f53
 8000ef4:	08000f53 	.word	0x08000f53
 8000ef8:	08000f57 	.word	0x08000f57
	{
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	617b      	str	r3, [r7, #20]
		while( arg_int > 0 )
 8000f00:	e010      	b.n	8000f24 <u8x8_byte_stm32_hw_i2c+0x7c>
		{
			buffer[buf_idx++] = *data;
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <u8x8_byte_stm32_hw_i2c+0xc0>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	b2d1      	uxtb	r1, r2
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <u8x8_byte_stm32_hw_i2c+0xc0>)
 8000f0c:	7011      	strb	r1, [r2, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	7819      	ldrb	r1, [r3, #0]
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <u8x8_byte_stm32_hw_i2c+0xc4>)
 8000f16:	5499      	strb	r1, [r3, r2]
			data++;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
			arg_int--;
 8000f1e:	7abb      	ldrb	r3, [r7, #10]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	72bb      	strb	r3, [r7, #10]
		while( arg_int > 0 )
 8000f24:	7abb      	ldrb	r3, [r7, #10]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1eb      	bne.n	8000f02 <u8x8_byte_stm32_hw_i2c+0x5a>
		}
		break;
 8000f2a:	e017      	b.n	8000f5c <u8x8_byte_stm32_hw_i2c+0xb4>
		/* add your custom code to init i2c subsystem */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <u8x8_byte_stm32_hw_i2c+0xc0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
		break;
 8000f32:	e013      	b.n	8000f5c <u8x8_byte_stm32_hw_i2c+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		if(HAL_I2C_Master_Transmit(&hi2c1, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <u8x8_byte_stm32_hw_i2c+0xc0>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	2264      	movs	r2, #100	; 0x64
 8000f3c:	9200      	str	r2, [sp, #0]
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <u8x8_byte_stm32_hw_i2c+0xc4>)
 8000f40:	2178      	movs	r1, #120	; 0x78
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <u8x8_byte_stm32_hw_i2c+0xc8>)
 8000f44:	f002 feae 	bl	8003ca4 <HAL_I2C_Master_Transmit>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d005      	beq.n	8000f5a <u8x8_byte_stm32_hw_i2c+0xb2>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e005      	b.n	8000f5e <u8x8_byte_stm32_hw_i2c+0xb6>
		break;
	default:
		return 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e003      	b.n	8000f5e <u8x8_byte_stm32_hw_i2c+0xb6>
		break;
 8000f56:	bf00      	nop
 8000f58:	e000      	b.n	8000f5c <u8x8_byte_stm32_hw_i2c+0xb4>
		break;
 8000f5a:	bf00      	nop
	}
	return 1;
 8000f5c:	2301      	movs	r3, #1
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000b3 	.word	0x200000b3
 8000f6c:	200000b4 	.word	0x200000b4
 8000f70:	200004d8 	.word	0x200004d8

08000f74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <MX_USART1_UART_Init+0x50>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_USART1_UART_Init+0x4c>)
 8000fac:	f004 fa76 	bl	800549c <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fb6:	f7ff fd9f 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200005dc 	.word	0x200005dc
 8000fc4:	40011000 	.word	0x40011000

08000fc8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <MX_USART3_UART_Init+0x50>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8001000:	f004 fa4c 	bl	800549c <HAL_UART_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800100a:	f7ff fd75 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000620 	.word	0x20000620
 8001018:	40004800 	.word	0x40004800

0800101c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a37      	ldr	r2, [pc, #220]	; (8001118 <HAL_UART_MspInit+0xfc>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d12d      	bne.n	800109a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	4b36      	ldr	r3, [pc, #216]	; (800111c <HAL_UART_MspInit+0x100>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a35      	ldr	r2, [pc, #212]	; (800111c <HAL_UART_MspInit+0x100>)
 8001048:	f043 0310 	orr.w	r3, r3, #16
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b33      	ldr	r3, [pc, #204]	; (800111c <HAL_UART_MspInit+0x100>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	4b2f      	ldr	r3, [pc, #188]	; (800111c <HAL_UART_MspInit+0x100>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a2e      	ldr	r2, [pc, #184]	; (800111c <HAL_UART_MspInit+0x100>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <HAL_UART_MspInit+0x100>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001076:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800107a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001088:	2307      	movs	r3, #7
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4823      	ldr	r0, [pc, #140]	; (8001120 <HAL_UART_MspInit+0x104>)
 8001094:	f002 fb0c 	bl	80036b0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001098:	e039      	b.n	800110e <HAL_UART_MspInit+0xf2>
  else if(uartHandle->Instance==USART3)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a21      	ldr	r2, [pc, #132]	; (8001124 <HAL_UART_MspInit+0x108>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d134      	bne.n	800110e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <HAL_UART_MspInit+0x100>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	4a1b      	ldr	r2, [pc, #108]	; (800111c <HAL_UART_MspInit+0x100>)
 80010ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b2:	6413      	str	r3, [r2, #64]	; 0x40
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_UART_MspInit+0x100>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_UART_MspInit+0x100>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_UART_MspInit+0x100>)
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	6313      	str	r3, [r2, #48]	; 0x30
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_UART_MspInit+0x100>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010ee:	2307      	movs	r3, #7
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4619      	mov	r1, r3
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <HAL_UART_MspInit+0x10c>)
 80010fa:	f002 fad9 	bl	80036b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2027      	movs	r0, #39	; 0x27
 8001104:	f002 fa0b 	bl	800351e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001108:	2027      	movs	r0, #39	; 0x27
 800110a:	f002 fa24 	bl	8003556 <HAL_NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3730      	adds	r7, #48	; 0x30
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40011000 	.word	0x40011000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000
 8001124:	40004800 	.word	0x40004800
 8001128:	40020c00 	.word	0x40020c00

0800112c <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af02      	add	r7, sp, #8
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	4608      	mov	r0, r1
 8001136:	4611      	mov	r1, r2
 8001138:	461a      	mov	r2, r3
 800113a:	4603      	mov	r3, r0
 800113c:	70fb      	strb	r3, [r7, #3]
 800113e:	460b      	mov	r3, r1
 8001140:	70bb      	strb	r3, [r7, #2]
 8001142:	4613      	mov	r3, r2
 8001144:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001146:	78fa      	ldrb	r2, [r7, #3]
 8001148:	787b      	ldrb	r3, [r7, #1]
 800114a:	4413      	add	r3, r2
 800114c:	b2d8      	uxtb	r0, r3
 800114e:	78ba      	ldrb	r2, [r7, #2]
 8001150:	7c3b      	ldrb	r3, [r7, #16]
 8001152:	4413      	add	r3, r2
 8001154:	b2db      	uxtb	r3, r3
 8001156:	78ba      	ldrb	r2, [r7, #2]
 8001158:	78f9      	ldrb	r1, [r7, #3]
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	4603      	mov	r3, r0
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f001 f9bb 	bl	80024da <u8g2_IsIntersection>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d012      	beq.n	8001190 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 800116a:	e00d      	b.n	8001188 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	78ba      	ldrb	r2, [r7, #2]
 8001170:	78f9      	ldrb	r1, [r7, #3]
 8001172:	2000      	movs	r0, #0
 8001174:	9000      	str	r0, [sp, #0]
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f001 f87d 	bl	8002276 <u8g2_DrawHVLine>
    y++;    
 800117c:	78bb      	ldrb	r3, [r7, #2]
 800117e:	3301      	adds	r3, #1
 8001180:	70bb      	strb	r3, [r7, #2]
    h--;
 8001182:	7c3b      	ldrb	r3, [r7, #16]
 8001184:	3b01      	subs	r3, #1
 8001186:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8001188:	7c3b      	ldrb	r3, [r7, #16]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1ee      	bne.n	800116c <u8g2_DrawBox+0x40>
 800118e:	e000      	b.n	8001192 <u8g2_DrawBox+0x66>
    return;
 8001190:	bf00      	nop
  }
}
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	7c1b      	ldrb	r3, [r3, #16]
 80011a6:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	fb02 f303 	mul.w	r3, r2, r3
 80011b6:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f004 feb8 	bl	8005f3c <memset>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af02      	add	r7, sp, #8
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
 80011e0:	4613      	mov	r3, r2
 80011e2:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	7c1b      	ldrb	r3, [r3, #16]
 80011ea:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f4:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	89ba      	ldrh	r2, [r7, #12]
 80011fc:	fb12 f303 	smulbb	r3, r2, r3
 8001200:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001202:	89bb      	ldrh	r3, [r7, #12]
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001208:	89bb      	ldrh	r3, [r7, #12]
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	4413      	add	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001210:	7bf9      	ldrb	r1, [r7, #15]
 8001212:	78ba      	ldrb	r2, [r7, #2]
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	460b      	mov	r3, r1
 800121a:	2100      	movs	r1, #0
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f001 ff10 	bl	8003042 <u8x8_DrawTile>
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800123c:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001244:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	7c5b      	ldrb	r3, [r3, #17]
 800124c:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800124e:	7bba      	ldrb	r2, [r7, #14]
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	4619      	mov	r1, r3
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ffbd 	bl	80011d4 <u8g2_send_tile_row>
    src_row++;
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	3301      	adds	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	3301      	adds	r3, #1
 8001264:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	7b7b      	ldrb	r3, [r7, #13]
 800126a:	429a      	cmp	r2, r3
 800126c:	d203      	bcs.n	8001276 <u8g2_send_buffer+0x4c>
 800126e:	7bba      	ldrb	r2, [r7, #14]
 8001270:	7b3b      	ldrb	r3, [r7, #12]
 8001272:	429a      	cmp	r2, r3
 8001274:	d3eb      	bcc.n	800124e <u8g2_send_buffer+0x24>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	78fa      	ldrb	r2, [r7, #3]
 800128e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	4798      	blx	r3
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d002      	beq.n	80012c6 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff69 	bl	8001198 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80012c6:	2100      	movs	r1, #0
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ffd8 	bl	800127e <u8g2_SetBufferCurrTileRow>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffa3 	bl	800122a <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012ea:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	4413      	add	r3, r2
 80012f6:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	7c5b      	ldrb	r3, [r3, #17]
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	429a      	cmp	r2, r3
 8001302:	d304      	bcc.n	800130e <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f001 feed 	bl	80030e4 <u8x8_RefreshDisplay>
    return 0;
 800130a:	2300      	movs	r3, #0
 800130c:	e00d      	b.n	800132a <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff3d 	bl	8001198 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	4619      	mov	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffab 	bl	800127e <u8g2_SetBufferCurrTileRow>
  return 1;
 8001328:	2301      	movs	r3, #1
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <u8g2_draw_disc_section>:
/* Disk */

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	4608      	mov	r0, r1
 800133c:	4611      	mov	r1, r2
 800133e:	461a      	mov	r2, r3
 8001340:	4603      	mov	r3, r0
 8001342:	70fb      	strb	r3, [r7, #3]
 8001344:	460b      	mov	r3, r1
 8001346:	70bb      	strb	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 800134c:	7d3b      	ldrb	r3, [r7, #20]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01b      	beq.n	800138e <u8g2_draw_disc_section+0x5c>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 8001356:	787a      	ldrb	r2, [r7, #1]
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	4413      	add	r3, r2
 800135c:	b2d9      	uxtb	r1, r3
 800135e:	7c3a      	ldrb	r2, [r7, #16]
 8001360:	78bb      	ldrb	r3, [r7, #2]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b2da      	uxtb	r2, r3
 8001366:	78bb      	ldrb	r3, [r7, #2]
 8001368:	3301      	adds	r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f001 f81e 	bl	80023ae <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0-x, x+1);
 8001372:	787a      	ldrb	r2, [r7, #1]
 8001374:	78bb      	ldrb	r3, [r7, #2]
 8001376:	4413      	add	r3, r2
 8001378:	b2d9      	uxtb	r1, r3
 800137a:	7c3a      	ldrb	r2, [r7, #16]
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b2da      	uxtb	r2, r3
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	3301      	adds	r3, #1
 8001386:	b2db      	uxtb	r3, r3
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f001 f810 	bl	80023ae <u8g2_DrawVLine>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 800138e:	7d3b      	ldrb	r3, [r7, #20]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d01b      	beq.n	80013d0 <u8g2_draw_disc_section+0x9e>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 8001398:	787a      	ldrb	r2, [r7, #1]
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	b2d9      	uxtb	r1, r3
 80013a0:	7c3a      	ldrb	r2, [r7, #16]
 80013a2:	78bb      	ldrb	r3, [r7, #2]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	78bb      	ldrb	r3, [r7, #2]
 80013aa:	3301      	adds	r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fffd 	bl	80023ae <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0-x, x+1);
 80013b4:	787a      	ldrb	r2, [r7, #1]
 80013b6:	78bb      	ldrb	r3, [r7, #2]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	b2d9      	uxtb	r1, r3
 80013bc:	7c3a      	ldrb	r2, [r7, #16]
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	3301      	adds	r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 ffef 	bl	80023ae <u8g2_DrawVLine>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 80013d0:	7d3b      	ldrb	r3, [r7, #20]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d015      	beq.n	8001406 <u8g2_draw_disc_section+0xd4>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 80013da:	787a      	ldrb	r2, [r7, #1]
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	4413      	add	r3, r2
 80013e0:	b2d9      	uxtb	r1, r3
 80013e2:	78bb      	ldrb	r3, [r7, #2]
 80013e4:	3301      	adds	r3, #1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	7c3a      	ldrb	r2, [r7, #16]
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 ffdf 	bl	80023ae <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0, x+1);
 80013f0:	787a      	ldrb	r2, [r7, #1]
 80013f2:	78bb      	ldrb	r3, [r7, #2]
 80013f4:	4413      	add	r3, r2
 80013f6:	b2d9      	uxtb	r1, r3
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	3301      	adds	r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	7c3a      	ldrb	r2, [r7, #16]
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 ffd4 	bl	80023ae <u8g2_DrawVLine>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8001406:	7d3b      	ldrb	r3, [r7, #20]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	d015      	beq.n	800143c <u8g2_draw_disc_section+0x10a>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 8001410:	787a      	ldrb	r2, [r7, #1]
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	b2d9      	uxtb	r1, r3
 8001418:	78bb      	ldrb	r3, [r7, #2]
 800141a:	3301      	adds	r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	7c3a      	ldrb	r2, [r7, #16]
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 ffc4 	bl	80023ae <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 8001426:	787a      	ldrb	r2, [r7, #1]
 8001428:	78bb      	ldrb	r3, [r7, #2]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	b2d9      	uxtb	r1, r3
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	3301      	adds	r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	7c3a      	ldrb	r2, [r7, #16]
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 ffb9 	bl	80023ae <u8g2_DrawVLine>
    }
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <u8g2_draw_disc>:

static void u8g2_draw_disc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af02      	add	r7, sp, #8
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	4608      	mov	r0, r1
 800144e:	4611      	mov	r1, r2
 8001450:	461a      	mov	r2, r3
 8001452:	4603      	mov	r3, r0
 8001454:	70fb      	strb	r3, [r7, #3]
 8001456:	460b      	mov	r3, r1
 8001458:	70bb      	strb	r3, [r7, #2]
 800145a:	4613      	mov	r3, r2
 800145c:	707b      	strb	r3, [r7, #1]
  u8g2_int_t ddF_x;
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
 800145e:	2301      	movs	r3, #1
 8001460:	73fb      	strb	r3, [r7, #15]
  f -= rad;
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	73fb      	strb	r3, [r7, #15]
  ddF_x = 1;
 800146c:	2301      	movs	r3, #1
 800146e:	73bb      	strb	r3, [r7, #14]
  ddF_y = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	737b      	strb	r3, [r7, #13]
  ddF_y -= rad;
 8001474:	7b7a      	ldrb	r2, [r7, #13]
 8001476:	787b      	ldrb	r3, [r7, #1]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	737b      	strb	r3, [r7, #13]
  ddF_y *= 2;
 800147e:	7b7b      	ldrb	r3, [r7, #13]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	b2db      	uxtb	r3, r3
 8001484:	737b      	strb	r3, [r7, #13]
  x = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	733b      	strb	r3, [r7, #12]
  y = rad;
 800148a:	787b      	ldrb	r3, [r7, #1]
 800148c:	72fb      	strb	r3, [r7, #11]

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 800148e:	78f8      	ldrb	r0, [r7, #3]
 8001490:	7afa      	ldrb	r2, [r7, #11]
 8001492:	7b39      	ldrb	r1, [r7, #12]
 8001494:	7e3b      	ldrb	r3, [r7, #24]
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	78bb      	ldrb	r3, [r7, #2]
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	4603      	mov	r3, r0
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ff47 	bl	8001332 <u8g2_draw_disc_section>
  
  while ( x < y )
 80014a4:	e026      	b.n	80014f4 <u8g2_draw_disc+0xb0>
  {
    if (f >= 0) 
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <u8g2_draw_disc+0x82>
    {
      y--;
 80014ae:	7afb      	ldrb	r3, [r7, #11]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	72fb      	strb	r3, [r7, #11]
      ddF_y += 2;
 80014b4:	7b7b      	ldrb	r3, [r7, #13]
 80014b6:	3302      	adds	r3, #2
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	737b      	strb	r3, [r7, #13]
      f += ddF_y;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	7b7b      	ldrb	r3, [r7, #13]
 80014c0:	4413      	add	r3, r2
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	73fb      	strb	r3, [r7, #15]
    }
    x++;
 80014c6:	7b3b      	ldrb	r3, [r7, #12]
 80014c8:	3301      	adds	r3, #1
 80014ca:	733b      	strb	r3, [r7, #12]
    ddF_x += 2;
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	3302      	adds	r3, #2
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	73bb      	strb	r3, [r7, #14]
    f += ddF_x;
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	4413      	add	r3, r2
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	73fb      	strb	r3, [r7, #15]

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 80014de:	78f8      	ldrb	r0, [r7, #3]
 80014e0:	7afa      	ldrb	r2, [r7, #11]
 80014e2:	7b39      	ldrb	r1, [r7, #12]
 80014e4:	7e3b      	ldrb	r3, [r7, #24]
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	78bb      	ldrb	r3, [r7, #2]
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	4603      	mov	r3, r0
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ff1f 	bl	8001332 <u8g2_draw_disc_section>
  while ( x < y )
 80014f4:	7b3a      	ldrb	r2, [r7, #12]
 80014f6:	7afb      	ldrb	r3, [r7, #11]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d3d4      	bcc.n	80014a6 <u8g2_draw_disc+0x62>
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <u8g2_DrawDisc>:

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8001506:	b590      	push	{r4, r7, lr}
 8001508:	b085      	sub	sp, #20
 800150a:	af02      	add	r7, sp, #8
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	4608      	mov	r0, r1
 8001510:	4611      	mov	r1, r2
 8001512:	461a      	mov	r2, r3
 8001514:	4603      	mov	r3, r0
 8001516:	70fb      	strb	r3, [r7, #3]
 8001518:	460b      	mov	r3, r1
 800151a:	70bb      	strb	r3, [r7, #2]
 800151c:	4613      	mov	r3, r2
 800151e:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8001520:	78fa      	ldrb	r2, [r7, #3]
 8001522:	787b      	ldrb	r3, [r7, #1]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	b2d9      	uxtb	r1, r3
 8001528:	78ba      	ldrb	r2, [r7, #2]
 800152a:	787b      	ldrb	r3, [r7, #1]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	b2d8      	uxtb	r0, r3
 8001530:	78fa      	ldrb	r2, [r7, #3]
 8001532:	787b      	ldrb	r3, [r7, #1]
 8001534:	4413      	add	r3, r2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	3301      	adds	r3, #1
 800153a:	b2dc      	uxtb	r4, r3
 800153c:	78ba      	ldrb	r2, [r7, #2]
 800153e:	787b      	ldrb	r3, [r7, #1]
 8001540:	4413      	add	r3, r2
 8001542:	b2db      	uxtb	r3, r3
 8001544:	3301      	adds	r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	4623      	mov	r3, r4
 800154c:	4602      	mov	r2, r0
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 ffc3 	bl	80024da <u8g2_IsIntersection>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <u8g2_DrawDisc+0x68>
      return;
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
 800155a:	7878      	ldrb	r0, [r7, #1]
 800155c:	78ba      	ldrb	r2, [r7, #2]
 800155e:	78f9      	ldrb	r1, [r7, #3]
 8001560:	7e3b      	ldrb	r3, [r7, #24]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	4603      	mov	r3, r0
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ff6c 	bl	8001444 <u8g2_draw_disc>
 800156c:	e000      	b.n	8001570 <u8g2_DrawDisc+0x6a>
      return;
 800156e:	bf00      	nop
}
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}
	...

08001578 <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2208      	movs	r2, #8
 8001584:	701a      	strb	r2, [r3, #0]
  return buf;
 8001586:	4b03      	ldr	r3, [pc, #12]	; (8001594 <u8g2_m_16_8_f+0x1c>)
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	200000d4 	.word	0x200000d4

08001598 <u8g2_Setup_ssd1306_i2c_128x32_noname_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_alt0, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_ssd1306_i2c_128x32_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af02      	add	r7, sp, #8
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <u8g2_Setup_ssd1306_i2c_128x32_noname_f+0x44>)
 80015ae:	490c      	ldr	r1, [pc, #48]	; (80015e0 <u8g2_Setup_ssd1306_i2c_128x32_noname_f+0x48>)
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f001 fdfb 	bl	80031ac <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80015b6:	f107 0313 	add.w	r3, r7, #19
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ffdc 	bl	8001578 <u8g2_m_16_8_f>
 80015c0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80015c2:	7cfa      	ldrb	r2, [r7, #19]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <u8g2_Setup_ssd1306_i2c_128x32_noname_f+0x4c>)
 80015ca:	6979      	ldr	r1, [r7, #20]
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f001 f904 	bl	80027da <u8g2_SetupBuffer>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	08002ce1 	.word	0x08002ce1
 80015e0:	08002f3d 	.word	0x08002f3d
 80015e4:	0800265f 	.word	0x0800265f

080015e8 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	781b      	ldrb	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	81fb      	strh	r3, [r7, #14]
    font++;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3301      	adds	r3, #1
 800162a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800162c:	89fb      	ldrh	r3, [r7, #14]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b29a      	uxth	r2, r3
 8001638:	89fb      	ldrh	r3, [r7, #14]
 800163a:	4413      	add	r3, r2
 800163c:	81fb      	strh	r3, [r7, #14]
    return pos;
 800163e:	89fb      	ldrh	r3, [r7, #14]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001656:	2100      	movs	r1, #0
 8001658:	6838      	ldr	r0, [r7, #0]
 800165a:	f7ff ffc5 	bl	80015e8 <u8g2_font_get_byte>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001666:	2101      	movs	r1, #1
 8001668:	6838      	ldr	r0, [r7, #0]
 800166a:	f7ff ffbd 	bl	80015e8 <u8g2_font_get_byte>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001676:	2102      	movs	r1, #2
 8001678:	6838      	ldr	r0, [r7, #0]
 800167a:	f7ff ffb5 	bl	80015e8 <u8g2_font_get_byte>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001686:	2103      	movs	r1, #3
 8001688:	6838      	ldr	r0, [r7, #0]
 800168a:	f7ff ffad 	bl	80015e8 <u8g2_font_get_byte>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001696:	2104      	movs	r1, #4
 8001698:	6838      	ldr	r0, [r7, #0]
 800169a:	f7ff ffa5 	bl	80015e8 <u8g2_font_get_byte>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80016a6:	2105      	movs	r1, #5
 80016a8:	6838      	ldr	r0, [r7, #0]
 80016aa:	f7ff ff9d 	bl	80015e8 <u8g2_font_get_byte>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80016b6:	2106      	movs	r1, #6
 80016b8:	6838      	ldr	r0, [r7, #0]
 80016ba:	f7ff ff95 	bl	80015e8 <u8g2_font_get_byte>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80016c6:	2107      	movs	r1, #7
 80016c8:	6838      	ldr	r0, [r7, #0]
 80016ca:	f7ff ff8d 	bl	80015e8 <u8g2_font_get_byte>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80016d6:	2108      	movs	r1, #8
 80016d8:	6838      	ldr	r0, [r7, #0]
 80016da:	f7ff ff85 	bl	80015e8 <u8g2_font_get_byte>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80016e6:	2109      	movs	r1, #9
 80016e8:	6838      	ldr	r0, [r7, #0]
 80016ea:	f7ff ff7d 	bl	80015e8 <u8g2_font_get_byte>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80016f6:	210a      	movs	r1, #10
 80016f8:	6838      	ldr	r0, [r7, #0]
 80016fa:	f7ff ff75 	bl	80015e8 <u8g2_font_get_byte>
 80016fe:	4603      	mov	r3, r0
 8001700:	b25a      	sxtb	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001706:	210b      	movs	r1, #11
 8001708:	6838      	ldr	r0, [r7, #0]
 800170a:	f7ff ff6d 	bl	80015e8 <u8g2_font_get_byte>
 800170e:	4603      	mov	r3, r0
 8001710:	b25a      	sxtb	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001716:	210c      	movs	r1, #12
 8001718:	6838      	ldr	r0, [r7, #0]
 800171a:	f7ff ff65 	bl	80015e8 <u8g2_font_get_byte>
 800171e:	4603      	mov	r3, r0
 8001720:	b25a      	sxtb	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001726:	210d      	movs	r1, #13
 8001728:	6838      	ldr	r0, [r7, #0]
 800172a:	f7ff ff5d 	bl	80015e8 <u8g2_font_get_byte>
 800172e:	4603      	mov	r3, r0
 8001730:	b25a      	sxtb	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001736:	210e      	movs	r1, #14
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f7ff ff55 	bl	80015e8 <u8g2_font_get_byte>
 800173e:	4603      	mov	r3, r0
 8001740:	b25a      	sxtb	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001746:	210f      	movs	r1, #15
 8001748:	6838      	ldr	r0, [r7, #0]
 800174a:	f7ff ff4d 	bl	80015e8 <u8g2_font_get_byte>
 800174e:	4603      	mov	r3, r0
 8001750:	b25a      	sxtb	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001756:	2110      	movs	r1, #16
 8001758:	6838      	ldr	r0, [r7, #0]
 800175a:	f7ff ff45 	bl	80015e8 <u8g2_font_get_byte>
 800175e:	4603      	mov	r3, r0
 8001760:	b25a      	sxtb	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001766:	2111      	movs	r1, #17
 8001768:	6838      	ldr	r0, [r7, #0]
 800176a:	f7ff ff4f 	bl	800160c <u8g2_font_get_word>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001776:	2113      	movs	r1, #19
 8001778:	6838      	ldr	r0, [r7, #0]
 800177a:	f7ff ff47 	bl	800160c <u8g2_font_get_word>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001786:	2115      	movs	r1, #21
 8001788:	6838      	ldr	r0, [r7, #0]
 800178a:	f7ff ff3f 	bl	800160c <u8g2_font_get_word>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	82da      	strh	r2, [r3, #22]
#endif
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7a9b      	ldrb	r3, [r3, #10]
 80017ae:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80017b8:	7bfa      	ldrb	r2, [r7, #15]
 80017ba:	7b7b      	ldrb	r3, [r7, #13]
 80017bc:	fa42 f303 	asr.w	r3, r2, r3
 80017c0:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80017c2:	7b7b      	ldrb	r3, [r7, #13]
 80017c4:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80017c6:	7bba      	ldrb	r2, [r7, #14]
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	4413      	add	r3, r2
 80017cc:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80017ce:	7bbb      	ldrb	r3, [r7, #14]
 80017d0:	2b07      	cmp	r3, #7
 80017d2:	d91a      	bls.n	800180a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80017d4:	2308      	movs	r3, #8
 80017d6:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80017d8:	7b3a      	ldrb	r2, [r7, #12]
 80017da:	7b7b      	ldrb	r3, [r7, #13]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	7b3b      	ldrb	r3, [r7, #12]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	b25a      	sxtb	r2, r3
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4313      	orrs	r3, r2
 8001800:	b25b      	sxtb	r3, r3
 8001802:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001804:	7bbb      	ldrb	r3, [r7, #14]
 8001806:	3b08      	subs	r3, #8
 8001808:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	b2da      	uxtb	r2, r3
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	4013      	ands	r3, r2
 800181e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7bba      	ldrb	r2, [r7, #14]
 8001824:	729a      	strb	r2, [r3, #10]
  return val;
 8001826:	7bfb      	ldrb	r3, [r7, #15]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	4619      	mov	r1, r3
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ffaa 	bl	800179e <u8g2_font_decode_get_unsigned_bits>
 800184a:	4603      	mov	r3, r0
 800184c:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800184e:	2301      	movs	r3, #1
 8001850:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	3b01      	subs	r3, #1
 8001856:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001858:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	7bbb      	ldrb	r3, [r7, #14]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	73fb      	strb	r3, [r7, #15]
  return v;
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800187a:	b490      	push	{r4, r7}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	4604      	mov	r4, r0
 8001882:	4608      	mov	r0, r1
 8001884:	4611      	mov	r1, r2
 8001886:	461a      	mov	r2, r3
 8001888:	4623      	mov	r3, r4
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	4603      	mov	r3, r0
 800188e:	71bb      	strb	r3, [r7, #6]
 8001890:	460b      	mov	r3, r1
 8001892:	717b      	strb	r3, [r7, #5]
 8001894:	4613      	mov	r3, r2
 8001896:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8001898:	793b      	ldrb	r3, [r7, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d010      	beq.n	80018c0 <u8g2_add_vector_y+0x46>
 800189e:	2b02      	cmp	r3, #2
 80018a0:	dc13      	bgt.n	80018ca <u8g2_add_vector_y+0x50>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <u8g2_add_vector_y+0x32>
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d005      	beq.n	80018b6 <u8g2_add_vector_y+0x3c>
 80018aa:	e00e      	b.n	80018ca <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 80018ac:	797a      	ldrb	r2, [r7, #5]
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	4413      	add	r3, r2
 80018b2:	71fb      	strb	r3, [r7, #7]
      break;
 80018b4:	e00e      	b.n	80018d4 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 80018b6:	79ba      	ldrb	r2, [r7, #6]
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	4413      	add	r3, r2
 80018bc:	71fb      	strb	r3, [r7, #7]
      break;
 80018be:	e009      	b.n	80018d4 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 80018c0:	797b      	ldrb	r3, [r7, #5]
 80018c2:	79fa      	ldrb	r2, [r7, #7]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	71fb      	strb	r3, [r7, #7]
      break;
 80018c8:	e004      	b.n	80018d4 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 80018ca:	79bb      	ldrb	r3, [r7, #6]
 80018cc:	79fa      	ldrb	r2, [r7, #7]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	71fb      	strb	r3, [r7, #7]
      break;      
 80018d2:	bf00      	nop
  }
  return dy;
 80018d4:	79fb      	ldrb	r3, [r7, #7]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc90      	pop	{r4, r7}
 80018de:	4770      	bx	lr

080018e0 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80018e0:	b490      	push	{r4, r7}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4604      	mov	r4, r0
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4623      	mov	r3, r4
 80018f0:	71fb      	strb	r3, [r7, #7]
 80018f2:	4603      	mov	r3, r0
 80018f4:	71bb      	strb	r3, [r7, #6]
 80018f6:	460b      	mov	r3, r1
 80018f8:	717b      	strb	r3, [r7, #5]
 80018fa:	4613      	mov	r3, r2
 80018fc:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80018fe:	793b      	ldrb	r3, [r7, #4]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d010      	beq.n	8001926 <u8g2_add_vector_x+0x46>
 8001904:	2b02      	cmp	r3, #2
 8001906:	dc13      	bgt.n	8001930 <u8g2_add_vector_x+0x50>
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <u8g2_add_vector_x+0x32>
 800190c:	2b01      	cmp	r3, #1
 800190e:	d005      	beq.n	800191c <u8g2_add_vector_x+0x3c>
 8001910:	e00e      	b.n	8001930 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 8001912:	79ba      	ldrb	r2, [r7, #6]
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	4413      	add	r3, r2
 8001918:	71fb      	strb	r3, [r7, #7]
      break;
 800191a:	e00e      	b.n	800193a <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 800191c:	797b      	ldrb	r3, [r7, #5]
 800191e:	79fa      	ldrb	r2, [r7, #7]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	71fb      	strb	r3, [r7, #7]
      break;
 8001924:	e009      	b.n	800193a <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 8001926:	79bb      	ldrb	r3, [r7, #6]
 8001928:	79fa      	ldrb	r2, [r7, #7]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	71fb      	strb	r3, [r7, #7]
      break;
 800192e:	e004      	b.n	800193a <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8001930:	797a      	ldrb	r2, [r7, #5]
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4413      	add	r3, r2
 8001936:	71fb      	strb	r3, [r7, #7]
      break;      
 8001938:	bf00      	nop
  }
  return dx;
 800193a:	79fb      	ldrb	r3, [r7, #7]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bc90      	pop	{r4, r7}
 8001944:	4770      	bx	lr

08001946 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b088      	sub	sp, #32
 800194a:	af02      	add	r7, sp, #8
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	70fb      	strb	r3, [r7, #3]
 8001952:	4613      	mov	r3, r2
 8001954:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3358      	adds	r3, #88	; 0x58
 800195a:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001966:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800196e:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001976:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	7d7b      	ldrb	r3, [r7, #21]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001984:	7dfa      	ldrb	r2, [r7, #23]
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	429a      	cmp	r2, r3
 800198a:	d201      	bcs.n	8001990 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800198c:	7dfb      	ldrb	r3, [r7, #23]
 800198e:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	791b      	ldrb	r3, [r3, #4]
 8001994:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	795b      	ldrb	r3, [r3, #5]
 800199a:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800199c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80019a0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	7b9b      	ldrb	r3, [r3, #14]
 80019a8:	7bb8      	ldrb	r0, [r7, #14]
 80019aa:	f7ff ff99 	bl	80018e0 <u8g2_add_vector_x>
 80019ae:	4603      	mov	r3, r0
 80019b0:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80019b2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80019b6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	7b9b      	ldrb	r3, [r3, #14]
 80019be:	7b78      	ldrb	r0, [r7, #13]
 80019c0:	f7ff ff5b 	bl	800187a <u8g2_add_vector_y>
 80019c4:	4603      	mov	r3, r0
 80019c6:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80019c8:	78bb      	ldrb	r3, [r7, #2]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00f      	beq.n	80019ee <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	7b1a      	ldrb	r2, [r3, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	7b9b      	ldrb	r3, [r3, #14]
 80019dc:	7db8      	ldrb	r0, [r7, #22]
 80019de:	7b7a      	ldrb	r2, [r7, #13]
 80019e0:	7bb9      	ldrb	r1, [r7, #14]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	4603      	mov	r3, r0
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fc45 	bl	8002276 <u8g2_DrawHVLine>
 80019ec:	e012      	b.n	8001a14 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	7adb      	ldrb	r3, [r3, #11]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10e      	bne.n	8001a14 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	7b5a      	ldrb	r2, [r3, #13]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	7b9b      	ldrb	r3, [r3, #14]
 8001a04:	7db8      	ldrb	r0, [r7, #22]
 8001a06:	7b7a      	ldrb	r2, [r7, #13]
 8001a08:	7bb9      	ldrb	r1, [r7, #14]
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fc31 	bl	8002276 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001a14:	7dfa      	ldrb	r2, [r7, #23]
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d309      	bcc.n	8001a30 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8001a1c:	7dfa      	ldrb	r2, [r7, #23]
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	757b      	strb	r3, [r7, #21]
    ly++;
 8001a28:	7d3b      	ldrb	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001a2e:	e79f      	b.n	8001970 <u8g2_font_decode_len+0x2a>
      break;
 8001a30:	bf00      	nop
  }
  lx += cnt;
 8001a32:	7d7a      	ldrb	r2, [r7, #21]
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	4413      	add	r3, r2
 8001a38:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001a3a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8001a42:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	71da      	strb	r2, [r3, #7]
  
}
 8001a4a:	bf00      	nop
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b084      	sub	sp, #16
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3358      	adds	r3, #88	; 0x58
 8001a60:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001a74:	4619      	mov	r1, r3
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f7ff fe91 	bl	800179e <u8g2_font_decode_get_unsigned_bits>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b25a      	sxtb	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f7ff fe86 	bl	800179e <u8g2_font_decode_get_unsigned_bits>
 8001a92:	4603      	mov	r3, r0
 8001a94:	b25a      	sxtb	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	7b1b      	ldrb	r3, [r3, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf0c      	ite	eq
 8001aac:	2301      	moveq	r3, #1
 8001aae:	2300      	movne	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	735a      	strb	r2, [r3, #13]
}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3358      	adds	r3, #88	; 0x58
 8001ace:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffbd 	bl	8001a52 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001ade:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6938      	ldr	r0, [r7, #16]
 8001aea:	f7ff fea3 	bl	8001834 <u8g2_font_decode_get_signed_bits>
 8001aee:	4603      	mov	r3, r0
 8001af0:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8001af8:	4619      	mov	r1, r3
 8001afa:	6938      	ldr	r0, [r7, #16]
 8001afc:	f7ff fe9a 	bl	8001834 <u8g2_font_decode_get_signed_bits>
 8001b00:	4603      	mov	r3, r0
 8001b02:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6938      	ldr	r0, [r7, #16]
 8001b0e:	f7ff fe91 	bl	8001834 <u8g2_font_decode_get_signed_bits>
 8001b12:	4603      	mov	r3, r0
 8001b14:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f340 80cf 	ble.w	8001cc0 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	7918      	ldrb	r0, [r3, #4]
 8001b26:	7bfa      	ldrb	r2, [r7, #15]
 8001b28:	7b7b      	ldrb	r3, [r7, #13]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	425b      	negs	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	7b9b      	ldrb	r3, [r3, #14]
 8001b38:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001b3c:	f7ff fed0 	bl	80018e0 <u8g2_add_vector_x>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	7958      	ldrb	r0, [r3, #5]
 8001b4c:	7bfa      	ldrb	r2, [r7, #15]
 8001b4e:	7b7b      	ldrb	r3, [r7, #13]
 8001b50:	4413      	add	r3, r2
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	425b      	negs	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	b25a      	sxtb	r2, r3
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	7b9b      	ldrb	r3, [r3, #14]
 8001b5e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001b62:	f7ff fe8a 	bl	800187a <u8g2_add_vector_y>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	791b      	ldrb	r3, [r3, #4]
 8001b72:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	795b      	ldrb	r3, [r3, #5]
 8001b78:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8001b7e:	7d7b      	ldrb	r3, [r7, #21]
 8001b80:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	7b9b      	ldrb	r3, [r3, #14]
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d852      	bhi.n	8001c30 <u8g2_font_decode_glyph+0x170>
 8001b8a:	a201      	add	r2, pc, #4	; (adr r2, 8001b90 <u8g2_font_decode_glyph+0xd0>)
 8001b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b90:	08001ba1 	.word	0x08001ba1
 8001b94:	08001bb9 	.word	0x08001bb9
 8001b98:	08001bdd 	.word	0x08001bdd
 8001b9c:	08001c0d 	.word	0x08001c0d
      {
	case 0:
	    x1 += decode->glyph_width;
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	7dbb      	ldrb	r3, [r7, #22]
 8001baa:	4413      	add	r3, r2
 8001bac:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	7d3b      	ldrb	r3, [r7, #20]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	753b      	strb	r3, [r7, #20]
	    break;
 8001bb6:	e03b      	b.n	8001c30 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	7dfa      	ldrb	r2, [r7, #23]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001bc6:	7dbb      	ldrb	r3, [r7, #22]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	7d3b      	ldrb	r3, [r7, #20]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	753b      	strb	r3, [r7, #20]
	    break;
 8001bda:	e029      	b.n	8001c30 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	7dfa      	ldrb	r2, [r7, #23]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	3301      	adds	r3, #1
 8001bee:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8001bf0:	7dbb      	ldrb	r3, [r7, #22]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	7d7a      	ldrb	r2, [r7, #21]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001bfe:	7d7b      	ldrb	r3, [r7, #21]
 8001c00:	3301      	adds	r3, #1
 8001c02:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001c04:	7d3b      	ldrb	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001c0a:	e011      	b.n	8001c30 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	7dbb      	ldrb	r3, [r7, #22]
 8001c10:	4413      	add	r3, r2
 8001c12:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	7d7a      	ldrb	r2, [r7, #21]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c22:	7d7b      	ldrb	r3, [r7, #21]
 8001c24:	3301      	adds	r3, #1
 8001c26:	757b      	strb	r3, [r7, #21]
	    y1++;
 8001c28:	7d3b      	ldrb	r3, [r7, #20]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	753b      	strb	r3, [r7, #20]
	    break;	  
 8001c2e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001c30:	7db8      	ldrb	r0, [r7, #22]
 8001c32:	7d7a      	ldrb	r2, [r7, #21]
 8001c34:	7df9      	ldrb	r1, [r7, #23]
 8001c36:	7d3b      	ldrb	r3, [r7, #20]
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fc4c 	bl	80024da <u8g2_IsIntersection>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <u8g2_font_decode_glyph+0x18e>
	return d;
 8001c48:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001c4c:	e03a      	b.n	8001cc4 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2200      	movs	r2, #0
 8001c52:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	2200      	movs	r2, #0
 8001c58:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001c60:	4619      	mov	r1, r3
 8001c62:	6938      	ldr	r0, [r7, #16]
 8001c64:	f7ff fd9b 	bl	800179e <u8g2_font_decode_get_unsigned_bits>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001c72:	4619      	mov	r1, r3
 8001c74:	6938      	ldr	r0, [r7, #16]
 8001c76:	f7ff fd92 	bl	800179e <u8g2_font_decode_get_unsigned_bits>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff fe5e 	bl	8001946 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001c8a:	7abb      	ldrb	r3, [r7, #10]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff fe58 	bl	8001946 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001c96:	2101      	movs	r1, #1
 8001c98:	6938      	ldr	r0, [r7, #16]
 8001c9a:	f7ff fd80 	bl	800179e <u8g2_font_decode_get_unsigned_bits>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1ec      	bne.n	8001c7e <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001caa:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	dd00      	ble.n	8001cb4 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001cb2:	e7d2      	b.n	8001c5a <u8g2_font_decode_glyph+0x19a>
	break;
 8001cb4:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	7b1a      	ldrb	r2, [r3, #12]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 8001cc0:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cdc:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3317      	adds	r3, #23
 8001ce2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001ce4:	887b      	ldrh	r3, [r7, #2]
 8001ce6:	2bff      	cmp	r3, #255	; 0xff
 8001ce8:	d82a      	bhi.n	8001d40 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001cea:	887b      	ldrh	r3, [r7, #2]
 8001cec:	2b60      	cmp	r3, #96	; 0x60
 8001cee:	d907      	bls.n	8001d00 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e009      	b.n	8001d14 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	2b40      	cmp	r3, #64	; 0x40
 8001d04:	d906      	bls.n	8001d14 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	4413      	add	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	3301      	adds	r3, #1
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d04e      	beq.n	8001dbc <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	887a      	ldrh	r2, [r7, #2]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d102      	bne.n	8001d30 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	e049      	b.n	8001dc4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	3301      	adds	r3, #1
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001d3e:	e7e9      	b.n	8001d14 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8001d46:	461a      	mov	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001d52:	2100      	movs	r1, #0
 8001d54:	6938      	ldr	r0, [r7, #16]
 8001d56:	f7ff fc59 	bl	800160c <u8g2_font_get_word>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	4413      	add	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001d64:	2102      	movs	r1, #2
 8001d66:	6938      	ldr	r0, [r7, #16]
 8001d68:	f7ff fc50 	bl	800160c <u8g2_font_get_word>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	3304      	adds	r3, #4
 8001d74:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001d76:	89fa      	ldrh	r2, [r7, #14]
 8001d78:	887b      	ldrh	r3, [r7, #2]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d3e9      	bcc.n	8001d52 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001d84:	89fb      	ldrh	r3, [r7, #14]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	89fb      	ldrh	r3, [r7, #14]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001d98:	89fb      	ldrh	r3, [r7, #14]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d010      	beq.n	8001dc0 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001d9e:	89fa      	ldrh	r2, [r7, #14]
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d102      	bne.n	8001dac <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3303      	adds	r3, #3
 8001daa:	e00b      	b.n	8001dc4 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	3302      	adds	r3, #2
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	4413      	add	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001dba:	e7e0      	b.n	8001d7e <u8g2_font_get_glyph_data+0xb2>
	break;
 8001dbc:	bf00      	nop
 8001dbe:	e000      	b.n	8001dc2 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001dc0:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	70fb      	strb	r3, [r7, #3]
 8001dde:	460b      	mov	r3, r1
 8001de0:	70bb      	strb	r3, [r7, #2]
 8001de2:	4613      	mov	r3, r2
 8001de4:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	78ba      	ldrb	r2, [r7, #2]
 8001df6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001dfa:	883b      	ldrh	r3, [r7, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ff64 	bl	8001ccc <u8g2_font_get_glyph_data>
 8001e04:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fe56 	bl	8001ac0 <u8g2_font_decode_glyph>
 8001e14:	4603      	mov	r3, r0
 8001e16:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	4611      	mov	r1, r2
 8001e50:	461a      	mov	r2, r3
 8001e52:	4603      	mov	r3, r0
 8001e54:	70fb      	strb	r3, [r7, #3]
 8001e56:	460b      	mov	r3, r1
 8001e58:	70bb      	strb	r3, [r7, #2]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d833      	bhi.n	8001ed0 <u8g2_DrawGlyph+0x8c>
 8001e68:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <u8g2_DrawGlyph+0x2c>)
 8001e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6e:	bf00      	nop
 8001e70:	08001e81 	.word	0x08001e81
 8001e74:	08001e95 	.word	0x08001e95
 8001e78:	08001ea9 	.word	0x08001ea9
 8001e7c:	08001ebd 	.word	0x08001ebd
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	4798      	blx	r3
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	78bb      	ldrb	r3, [r7, #2]
 8001e8e:	4413      	add	r3, r2
 8001e90:	70bb      	strb	r3, [r7, #2]
      break;
 8001e92:	e01d      	b.n	8001ed0 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	70fb      	strb	r3, [r7, #3]
      break;
 8001ea6:	e013      	b.n	8001ed0 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	4798      	blx	r3
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	78bb      	ldrb	r3, [r7, #2]
 8001eb6:	1a9b      	subs	r3, r3, r2
 8001eb8:	70bb      	strb	r3, [r7, #2]
      break;
 8001eba:	e009      	b.n	8001ed0 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	4413      	add	r3, r2
 8001ecc:	70fb      	strb	r3, [r7, #3]
      break;
 8001ece:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001ed0:	883b      	ldrh	r3, [r7, #0]
 8001ed2:	78ba      	ldrb	r2, [r7, #2]
 8001ed4:	78f9      	ldrb	r1, [r7, #3]
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ff78 	bl	8001dcc <u8g2_font_draw_glyph>
 8001edc:	4603      	mov	r3, r0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop

08001ee8 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	72fb      	strb	r3, [r7, #11]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fdc1 	bl	8002a82 <u8x8_utf8_init>
  sum = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	7812      	ldrb	r2, [r2, #0]
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	4798      	blx	r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001f16:	8abb      	ldrh	r3, [r7, #20]
 8001f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d038      	beq.n	8001f92 <u8g2_draw_string+0xaa>
      break;
    str++;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3301      	adds	r3, #1
 8001f24:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001f26:	8abb      	ldrh	r3, [r7, #20]
 8001f28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d0e9      	beq.n	8001f04 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001f30:	8abb      	ldrh	r3, [r7, #20]
 8001f32:	7aba      	ldrb	r2, [r7, #10]
 8001f34:	7af9      	ldrb	r1, [r7, #11]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f7ff ff84 	bl	8001e44 <u8g2_DrawGlyph>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d81e      	bhi.n	8001f88 <u8g2_draw_string+0xa0>
 8001f4a:	a201      	add	r2, pc, #4	; (adr r2, 8001f50 <u8g2_draw_string+0x68>)
 8001f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f50:	08001f61 	.word	0x08001f61
 8001f54:	08001f6b 	.word	0x08001f6b
 8001f58:	08001f75 	.word	0x08001f75
 8001f5c:	08001f7f 	.word	0x08001f7f
      {
	case 0:
	  x += delta;
 8001f60:	7afa      	ldrb	r2, [r7, #11]
 8001f62:	7cfb      	ldrb	r3, [r7, #19]
 8001f64:	4413      	add	r3, r2
 8001f66:	72fb      	strb	r3, [r7, #11]
	  break;
 8001f68:	e00e      	b.n	8001f88 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001f6a:	7aba      	ldrb	r2, [r7, #10]
 8001f6c:	7cfb      	ldrb	r3, [r7, #19]
 8001f6e:	4413      	add	r3, r2
 8001f70:	72bb      	strb	r3, [r7, #10]
	  break;
 8001f72:	e009      	b.n	8001f88 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001f74:	7afa      	ldrb	r2, [r7, #11]
 8001f76:	7cfb      	ldrb	r3, [r7, #19]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	72fb      	strb	r3, [r7, #11]
	  break;
 8001f7c:	e004      	b.n	8001f88 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001f7e:	7aba      	ldrb	r2, [r7, #10]
 8001f80:	7cfb      	ldrb	r3, [r7, #19]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	72bb      	strb	r3, [r7, #10]
	  break;
 8001f86:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8001f88:	7dfa      	ldrb	r2, [r7, #23]
 8001f8a:	7cfb      	ldrb	r3, [r7, #19]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001f90:	e7b8      	b.n	8001f04 <u8g2_draw_string+0x1c>
      break;
 8001f92:	bf00      	nop
    }
  }
  return sum;
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop

08001fa0 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	72fb      	strb	r3, [r7, #11]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <u8g2_DrawStr+0x30>)
 8001fb6:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001fb8:	7aba      	ldrb	r2, [r7, #10]
 8001fba:	7af9      	ldrb	r1, [r7, #11]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7ff ff92 	bl	8001ee8 <u8g2_draw_string>
 8001fc4:	4603      	mov	r3, r0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	08002a9f 	.word	0x08002a9f

08001fd4 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d05d      	beq.n	80020a0 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002002:	2b00      	cmp	r3, #0
 8002004:	d04d      	beq.n	80020a2 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800200c:	2b01      	cmp	r3, #1
 800200e:	d11c      	bne.n	800204a <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 800201c:	429a      	cmp	r2, r3
 800201e:	da05      	bge.n	800202c <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 8002038:	429a      	cmp	r2, r3
 800203a:	dd32      	ble.n	80020a2 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8002048:	e02b      	b.n	80020a2 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8002050:	461a      	mov	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8002058:	4619      	mov	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8002060:	440b      	add	r3, r1
 8002062:	429a      	cmp	r2, r3
 8002064:	da0d      	bge.n	8002082 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800206c:	b2da      	uxtb	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8002074:	b2db      	uxtb	r3, r3
 8002076:	4413      	add	r3, r2
 8002078:	b2db      	uxtb	r3, r3
 800207a:	b25a      	sxtb	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800208e:	429a      	cmp	r2, r3
 8002090:	dd07      	ble.n	80020a2 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800209e:	e000      	b.n	80020a2 <u8g2_UpdateRefHeight+0xce>
    return;
 80020a0:	bf00      	nop
  }  
}
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <u8g2_SetFontRefHeightExtendedText>:
  u8g2->font_height_mode = U8G2_FONT_HEIGHT_MODE_TEXT;
  u8g2_UpdateRefHeight(u8g2);
}

void u8g2_SetFontRefHeightExtendedText(u8g2_t *u8g2)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  u8g2->font_height_mode = U8G2_FONT_HEIGHT_MODE_XTEXT;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  u8g2_UpdateRefHeight(u8g2);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff89 	bl	8001fd4 <u8g2_UpdateRefHeight>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  return 0;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a04      	ldr	r2, [pc, #16]	; (80020fc <u8g2_SetFontPosBaseline+0x1c>)
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	080020cb 	.word	0x080020cb

08002100 <u8g2_font_calc_vref_top>:
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  u8g2_uint_t tmp;
  /* reference pos is one pixel above the upper edge of the reference glyph */
  tmp = (u8g2_uint_t)(u8g2->font_ref_ascent);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 800210e:	73fb      	strb	r3, [r7, #15]
  tmp++;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	3301      	adds	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
  return tmp;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a04      	ldr	r2, [pc, #16]	; (8002140 <u8g2_SetFontPosTop+0x1c>)
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	08002101 	.word	0x08002101

08002144 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d00b      	beq.n	8002170 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3368      	adds	r3, #104	; 0x68
 8002162:	6839      	ldr	r1, [r7, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fa71 	bl	800164c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ff32 	bl	8001fd4 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <u8g2_SetFontDirection>:
}



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	78fa      	ldrb	r2, [r7, #3]
 8002188:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	4611      	mov	r1, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	460b      	mov	r3, r1
 80021a8:	71fb      	strb	r3, [r7, #7]
 80021aa:	4613      	mov	r3, r2
 80021ac:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 80021b4:	7dfb      	ldrb	r3, [r7, #23]
 80021b6:	75bb      	strb	r3, [r7, #22]
  b += *len;
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	781a      	ldrb	r2, [r3, #0]
 80021bc:	7dbb      	ldrb	r3, [r7, #22]
 80021be:	4413      	add	r3, r2
 80021c0:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80021c2:	7dfa      	ldrb	r2, [r7, #23]
 80021c4:	7dbb      	ldrb	r3, [r7, #22]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d90b      	bls.n	80021e2 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80021ca:	7dfa      	ldrb	r2, [r7, #23]
 80021cc:	79bb      	ldrb	r3, [r7, #6]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d205      	bcs.n	80021de <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80021d2:	79bb      	ldrb	r3, [r7, #6]
 80021d4:	75bb      	strb	r3, [r7, #22]
      b--;
 80021d6:	7dbb      	ldrb	r3, [r7, #22]
 80021d8:	3b01      	subs	r3, #1
 80021da:	75bb      	strb	r3, [r7, #22]
 80021dc:	e001      	b.n	80021e2 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80021e2:	7dfa      	ldrb	r2, [r7, #23]
 80021e4:	79bb      	ldrb	r3, [r7, #6]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d301      	bcc.n	80021ee <u8g2_clip_intersection2+0x56>
    return 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e01c      	b.n	8002228 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80021ee:	7dba      	ldrb	r2, [r7, #22]
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d801      	bhi.n	80021fa <u8g2_clip_intersection2+0x62>
    return 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e016      	b.n	8002228 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80021fa:	7dfa      	ldrb	r2, [r7, #23]
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d201      	bcs.n	8002206 <u8g2_clip_intersection2+0x6e>
    a = c;
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8002206:	7dba      	ldrb	r2, [r7, #22]
 8002208:	79bb      	ldrb	r3, [r7, #6]
 800220a:	429a      	cmp	r2, r3
 800220c:	d901      	bls.n	8002212 <u8g2_clip_intersection2+0x7a>
    b = d;
 800220e:	79bb      	ldrb	r3, [r7, #6]
 8002210:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	7dfa      	ldrb	r2, [r7, #23]
 8002216:	701a      	strb	r2, [r3, #0]
  b -= a;
 8002218:	7dba      	ldrb	r2, [r7, #22]
 800221a:	7dfb      	ldrb	r3, [r7, #23]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	7dba      	ldrb	r2, [r7, #22]
 8002224:	701a      	strb	r2, [r3, #0]
  return 1;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	371c      	adds	r7, #28
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b085      	sub	sp, #20
 8002238:	af02      	add	r7, sp, #8
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	4608      	mov	r0, r1
 800223e:	4611      	mov	r1, r2
 8002240:	461a      	mov	r2, r3
 8002242:	4603      	mov	r3, r0
 8002244:	70fb      	strb	r3, [r7, #3]
 8002246:	460b      	mov	r3, r1
 8002248:	70bb      	strb	r3, [r7, #2]
 800224a:	4613      	mov	r3, r2
 800224c:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002254:	78ba      	ldrb	r2, [r7, #2]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800225e:	7878      	ldrb	r0, [r7, #1]
 8002260:	78ba      	ldrb	r2, [r7, #2]
 8002262:	78f9      	ldrb	r1, [r7, #3]
 8002264:	7e3b      	ldrb	r3, [r7, #24]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	4603      	mov	r3, r0
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	47a0      	blx	r4
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bd90      	pop	{r4, r7, pc}

08002276 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002276:	b590      	push	{r4, r7, lr}
 8002278:	b085      	sub	sp, #20
 800227a:	af02      	add	r7, sp, #8
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	4608      	mov	r0, r1
 8002280:	4611      	mov	r1, r2
 8002282:	461a      	mov	r2, r3
 8002284:	4603      	mov	r3, r0
 8002286:	70fb      	strb	r3, [r7, #3]
 8002288:	460b      	mov	r3, r1
 800228a:	70bb      	strb	r3, [r7, #2]
 800228c:	4613      	mov	r3, r2
 800228e:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002296:	2b00      	cmp	r3, #0
 8002298:	d06d      	beq.n	8002376 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800229a:	787b      	ldrb	r3, [r7, #1]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d06a      	beq.n	8002376 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80022a0:	787b      	ldrb	r3, [r7, #1]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d918      	bls.n	80022d8 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 80022a6:	7e3b      	ldrb	r3, [r7, #24]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d109      	bne.n	80022c0 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	787b      	ldrb	r3, [r7, #1]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	70fb      	strb	r3, [r7, #3]
	  x++;
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	3301      	adds	r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	70fb      	strb	r3, [r7, #3]
 80022be:	e00b      	b.n	80022d8 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80022c0:	7e3b      	ldrb	r3, [r7, #24]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d108      	bne.n	80022d8 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80022c6:	78ba      	ldrb	r2, [r7, #2]
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	70bb      	strb	r3, [r7, #2]
	  y++;
 80022d0:	78bb      	ldrb	r3, [r7, #2]
 80022d2:	3301      	adds	r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80022d8:	7e3b      	ldrb	r3, [r7, #24]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 80022e0:	7e3b      	ldrb	r3, [r7, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d119      	bne.n	800231a <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80022ec:	78bb      	ldrb	r3, [r7, #2]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d838      	bhi.n	8002364 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80022f8:	78bb      	ldrb	r3, [r7, #2]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d934      	bls.n	8002368 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800230a:	1c79      	adds	r1, r7, #1
 800230c:	1cf8      	adds	r0, r7, #3
 800230e:	f7ff ff43 	bl	8002198 <u8g2_clip_intersection2>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d119      	bne.n	800234c <u8g2_DrawHVLine+0xd6>
	  return;
 8002318:	e02d      	b.n	8002376 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	429a      	cmp	r2, r3
 8002324:	d822      	bhi.n	800236c <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	429a      	cmp	r2, r3
 8002330:	d91e      	bls.n	8002370 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800233e:	1c79      	adds	r1, r7, #1
 8002340:	1cb8      	adds	r0, r7, #2
 8002342:	f7ff ff29 	bl	8002198 <u8g2_clip_intersection2>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d013      	beq.n	8002374 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002350:	689c      	ldr	r4, [r3, #8]
 8002352:	78f9      	ldrb	r1, [r7, #3]
 8002354:	78ba      	ldrb	r2, [r7, #2]
 8002356:	7878      	ldrb	r0, [r7, #1]
 8002358:	7e3b      	ldrb	r3, [r7, #24]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4603      	mov	r3, r0
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	47a0      	blx	r4
 8002362:	e008      	b.n	8002376 <u8g2_DrawHVLine+0x100>
	  return;
 8002364:	bf00      	nop
 8002366:	e006      	b.n	8002376 <u8g2_DrawHVLine+0x100>
	  return;
 8002368:	bf00      	nop
 800236a:	e004      	b.n	8002376 <u8g2_DrawHVLine+0x100>
	  return;
 800236c:	bf00      	nop
 800236e:	e002      	b.n	8002376 <u8g2_DrawHVLine+0x100>
	  return;
 8002370:	bf00      	nop
 8002372:	e000      	b.n	8002376 <u8g2_DrawHVLine+0x100>
	  return;
 8002374:	bf00      	nop
    }
}
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bd90      	pop	{r4, r7, pc}

0800237c <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af02      	add	r7, sp, #8
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	4608      	mov	r0, r1
 8002386:	4611      	mov	r1, r2
 8002388:	461a      	mov	r2, r3
 800238a:	4603      	mov	r3, r0
 800238c:	70fb      	strb	r3, [r7, #3]
 800238e:	460b      	mov	r3, r1
 8002390:	70bb      	strb	r3, [r7, #2]
 8002392:	4613      	mov	r3, r2
 8002394:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8002396:	787b      	ldrb	r3, [r7, #1]
 8002398:	78ba      	ldrb	r2, [r7, #2]
 800239a:	78f9      	ldrb	r1, [r7, #3]
 800239c:	2000      	movs	r0, #0
 800239e:	9000      	str	r0, [sp, #0]
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff68 	bl	8002276 <u8g2_DrawHVLine>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af02      	add	r7, sp, #8
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	4608      	mov	r0, r1
 80023b8:	4611      	mov	r1, r2
 80023ba:	461a      	mov	r2, r3
 80023bc:	4603      	mov	r3, r0
 80023be:	70fb      	strb	r3, [r7, #3]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70bb      	strb	r3, [r7, #2]
 80023c4:	4613      	mov	r3, r2
 80023c6:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 80023c8:	787b      	ldrb	r3, [r7, #1]
 80023ca:	78ba      	ldrb	r2, [r7, #2]
 80023cc:	78f9      	ldrb	r1, [r7, #3]
 80023ce:	2001      	movs	r0, #1
 80023d0:	9000      	str	r0, [sp, #0]
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ff4f 	bl	8002276 <u8g2_DrawHVLine>
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	70fb      	strb	r3, [r7, #3]
 80023ec:	4613      	mov	r3, r2
 80023ee:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80023f6:	78ba      	ldrb	r2, [r7, #2]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d31a      	bcc.n	8002432 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002402:	78ba      	ldrb	r2, [r7, #2]
 8002404:	429a      	cmp	r2, r3
 8002406:	d216      	bcs.n	8002436 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	429a      	cmp	r2, r3
 8002412:	d312      	bcc.n	800243a <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	429a      	cmp	r2, r3
 800241e:	d20e      	bcs.n	800243e <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002420:	78ba      	ldrb	r2, [r7, #2]
 8002422:	78f9      	ldrb	r1, [r7, #3]
 8002424:	2300      	movs	r3, #0
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2301      	movs	r3, #1
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ff23 	bl	8002276 <u8g2_DrawHVLine>
 8002430:	e006      	b.n	8002440 <u8g2_DrawPixel+0x60>
    return;
 8002432:	bf00      	nop
 8002434:	e004      	b.n	8002440 <u8g2_DrawPixel+0x60>
    return;
 8002436:	bf00      	nop
 8002438:	e002      	b.n	8002440 <u8g2_DrawPixel+0x60>
    return;
 800243a:	bf00      	nop
 800243c:	e000      	b.n	8002440 <u8g2_DrawPixel+0x60>
    return;
 800243e:	bf00      	nop
}
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  if ( color >= 3 )
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d903      	bls.n	8002468 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002474:	b490      	push	{r4, r7}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	4604      	mov	r4, r0
 800247c:	4608      	mov	r0, r1
 800247e:	4611      	mov	r1, r2
 8002480:	461a      	mov	r2, r3
 8002482:	4623      	mov	r3, r4
 8002484:	71fb      	strb	r3, [r7, #7]
 8002486:	4603      	mov	r3, r0
 8002488:	71bb      	strb	r3, [r7, #6]
 800248a:	460b      	mov	r3, r1
 800248c:	717b      	strb	r3, [r7, #5]
 800248e:	4613      	mov	r3, r2
 8002490:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8002492:	797a      	ldrb	r2, [r7, #5]
 8002494:	79bb      	ldrb	r3, [r7, #6]
 8002496:	429a      	cmp	r2, r3
 8002498:	d20d      	bcs.n	80024b6 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800249a:	793a      	ldrb	r2, [r7, #4]
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d901      	bls.n	80024a6 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e014      	b.n	80024d0 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80024a6:	797a      	ldrb	r2, [r7, #5]
 80024a8:	793b      	ldrb	r3, [r7, #4]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d901      	bls.n	80024b2 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00e      	b.n	80024d0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e00c      	b.n	80024d0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80024b6:	793a      	ldrb	r2, [r7, #4]
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d907      	bls.n	80024ce <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80024be:	797a      	ldrb	r2, [r7, #5]
 80024c0:	793b      	ldrb	r3, [r7, #4]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d901      	bls.n	80024ca <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e002      	b.n	80024d0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e000      	b.n	80024d0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80024ce:	2300      	movs	r3, #0
    }
  }
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc90      	pop	{r4, r7}
 80024d8:	4770      	bx	lr

080024da <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	4608      	mov	r0, r1
 80024e4:	4611      	mov	r1, r2
 80024e6:	461a      	mov	r2, r3
 80024e8:	4603      	mov	r3, r0
 80024ea:	70fb      	strb	r3, [r7, #3]
 80024ec:	460b      	mov	r3, r1
 80024ee:	70bb      	strb	r3, [r7, #2]
 80024f0:	4613      	mov	r3, r2
 80024f2:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8002500:	7c3b      	ldrb	r3, [r7, #16]
 8002502:	78ba      	ldrb	r2, [r7, #2]
 8002504:	f7ff ffb6 	bl	8002474 <u8g2_is_intersection_decision_tree>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <u8g2_IsIntersection+0x38>
    return 0; 
 800250e:	2300      	movs	r3, #0
 8002510:	e00a      	b.n	8002528 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 800251e:	787b      	ldrb	r3, [r7, #1]
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	f7ff ffa7 	bl	8002474 <u8g2_is_intersection_decision_tree>
 8002526:	4603      	mov	r3, r0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	4608      	mov	r0, r1
 800253a:	4611      	mov	r1, r2
 800253c:	461a      	mov	r2, r3
 800253e:	4603      	mov	r3, r0
 8002540:	70fb      	strb	r3, [r7, #3]
 8002542:	460b      	mov	r3, r1
 8002544:	70bb      	strb	r3, [r7, #2]
 8002546:	4613      	mov	r3, r2
 8002548:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	727b      	strb	r3, [r7, #9]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 800254e:	78fa      	ldrb	r2, [r7, #3]
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	429a      	cmp	r2, r3
 8002554:	d904      	bls.n	8002560 <u8g2_DrawLine+0x30>
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	787b      	ldrb	r3, [r7, #1]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	737b      	strb	r3, [r7, #13]
 800255e:	e003      	b.n	8002568 <u8g2_DrawLine+0x38>
 8002560:	787a      	ldrb	r2, [r7, #1]
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	737b      	strb	r3, [r7, #13]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 8002568:	78ba      	ldrb	r2, [r7, #2]
 800256a:	7e3b      	ldrb	r3, [r7, #24]
 800256c:	429a      	cmp	r2, r3
 800256e:	d904      	bls.n	800257a <u8g2_DrawLine+0x4a>
 8002570:	78ba      	ldrb	r2, [r7, #2]
 8002572:	7e3b      	ldrb	r3, [r7, #24]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	733b      	strb	r3, [r7, #12]
 8002578:	e003      	b.n	8002582 <u8g2_DrawLine+0x52>
 800257a:	7e3a      	ldrb	r2, [r7, #24]
 800257c:	78bb      	ldrb	r3, [r7, #2]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	733b      	strb	r3, [r7, #12]

  if ( dy > dx ) 
 8002582:	7b3a      	ldrb	r2, [r7, #12]
 8002584:	7b7b      	ldrb	r3, [r7, #13]
 8002586:	429a      	cmp	r2, r3
 8002588:	d913      	bls.n	80025b2 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 800258a:	2301      	movs	r3, #1
 800258c:	727b      	strb	r3, [r7, #9]
    tmp = dx; dx =dy; dy = tmp;
 800258e:	7b7b      	ldrb	r3, [r7, #13]
 8002590:	723b      	strb	r3, [r7, #8]
 8002592:	7b3b      	ldrb	r3, [r7, #12]
 8002594:	737b      	strb	r3, [r7, #13]
 8002596:	7a3b      	ldrb	r3, [r7, #8]
 8002598:	733b      	strb	r3, [r7, #12]
    tmp = x1; x1 =y1; y1 = tmp;
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	723b      	strb	r3, [r7, #8]
 800259e:	78bb      	ldrb	r3, [r7, #2]
 80025a0:	70fb      	strb	r3, [r7, #3]
 80025a2:	7a3b      	ldrb	r3, [r7, #8]
 80025a4:	70bb      	strb	r3, [r7, #2]
    tmp = x2; x2 =y2; y2 = tmp;
 80025a6:	787b      	ldrb	r3, [r7, #1]
 80025a8:	723b      	strb	r3, [r7, #8]
 80025aa:	7e3b      	ldrb	r3, [r7, #24]
 80025ac:	707b      	strb	r3, [r7, #1]
 80025ae:	7a3b      	ldrb	r3, [r7, #8]
 80025b0:	763b      	strb	r3, [r7, #24]
  }
  if ( x1 > x2 ) 
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d90b      	bls.n	80025d2 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	723b      	strb	r3, [r7, #8]
 80025be:	787b      	ldrb	r3, [r7, #1]
 80025c0:	70fb      	strb	r3, [r7, #3]
 80025c2:	7a3b      	ldrb	r3, [r7, #8]
 80025c4:	707b      	strb	r3, [r7, #1]
    tmp = y1; y1 =y2; y2 = tmp;
 80025c6:	78bb      	ldrb	r3, [r7, #2]
 80025c8:	723b      	strb	r3, [r7, #8]
 80025ca:	7e3b      	ldrb	r3, [r7, #24]
 80025cc:	70bb      	strb	r3, [r7, #2]
 80025ce:	7a3b      	ldrb	r3, [r7, #8]
 80025d0:	763b      	strb	r3, [r7, #24]
  }
  err = dx >> 1;
 80025d2:	7b7b      	ldrb	r3, [r7, #13]
 80025d4:	085b      	lsrs	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	72fb      	strb	r3, [r7, #11]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 80025da:	7e3a      	ldrb	r2, [r7, #24]
 80025dc:	78bb      	ldrb	r3, [r7, #2]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d902      	bls.n	80025e8 <u8g2_DrawLine+0xb8>
 80025e2:	2301      	movs	r3, #1
 80025e4:	72bb      	strb	r3, [r7, #10]
 80025e6:	e001      	b.n	80025ec <u8g2_DrawLine+0xbc>
 80025e8:	23ff      	movs	r3, #255	; 0xff
 80025ea:	72bb      	strb	r3, [r7, #10]
  y = y1;
 80025ec:	78bb      	ldrb	r3, [r7, #2]
 80025ee:	73bb      	strb	r3, [r7, #14]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
 80025f0:	787b      	ldrb	r3, [r7, #1]
 80025f2:	2bff      	cmp	r3, #255	; 0xff
 80025f4:	d102      	bne.n	80025fc <u8g2_DrawLine+0xcc>
    x2--;
 80025f6:	787b      	ldrb	r3, [r7, #1]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	707b      	strb	r3, [r7, #1]
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	e024      	b.n	800264c <u8g2_DrawLine+0x11c>
  {
    if ( swapxy == 0 ) 
 8002602:	7a7b      	ldrb	r3, [r7, #9]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d106      	bne.n	8002616 <u8g2_DrawLine+0xe6>
      u8g2_DrawPixel(u8g2, x, y); 
 8002608:	7bba      	ldrb	r2, [r7, #14]
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	4619      	mov	r1, r3
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff fee6 	bl	80023e0 <u8g2_DrawPixel>
 8002614:	e005      	b.n	8002622 <u8g2_DrawLine+0xf2>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	7bbb      	ldrb	r3, [r7, #14]
 800261a:	4619      	mov	r1, r3
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff fedf 	bl	80023e0 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 8002622:	7afa      	ldrb	r2, [r7, #11]
 8002624:	7b3b      	ldrb	r3, [r7, #12]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	b2db      	uxtb	r3, r3
 800262a:	72fb      	strb	r3, [r7, #11]
    if ( err < 0 ) 
 800262c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002630:	2b00      	cmp	r3, #0
 8002632:	da08      	bge.n	8002646 <u8g2_DrawLine+0x116>
    {
      y += (u8g2_uint_t)ystep;
 8002634:	7aba      	ldrb	r2, [r7, #10]
 8002636:	7bbb      	ldrb	r3, [r7, #14]
 8002638:	4413      	add	r3, r2
 800263a:	73bb      	strb	r3, [r7, #14]
      err += (u8g2_uint_t)dx;
 800263c:	7afa      	ldrb	r2, [r7, #11]
 800263e:	7b7b      	ldrb	r3, [r7, #13]
 8002640:	4413      	add	r3, r2
 8002642:	b2db      	uxtb	r3, r3
 8002644:	72fb      	strb	r3, [r7, #11]
  for( x = x1; x <= x2; x++ )
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	3301      	adds	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	787b      	ldrb	r3, [r7, #1]
 8002650:	429a      	cmp	r2, r3
 8002652:	d9d6      	bls.n	8002602 <u8g2_DrawLine+0xd2>
    }
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800265e:	b480      	push	{r7}
 8002660:	b087      	sub	sp, #28
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	4608      	mov	r0, r1
 8002668:	4611      	mov	r1, r2
 800266a:	461a      	mov	r2, r3
 800266c:	4603      	mov	r3, r0
 800266e:	70fb      	strb	r3, [r7, #3]
 8002670:	460b      	mov	r3, r1
 8002672:	70bb      	strb	r3, [r7, #2]
 8002674:	4613      	mov	r3, r2
 8002676:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002678:	78bb      	ldrb	r3, [r7, #2]
 800267a:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8002684:	2301      	movs	r3, #1
 8002686:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8002688:	7c3a      	ldrb	r2, [r7, #16]
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d801      	bhi.n	80026a8 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80026a4:	7c3b      	ldrb	r3, [r7, #16]
 80026a6:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d001      	beq.n	80026b6 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80026b2:	7c3b      	ldrb	r3, [r7, #16]
 80026b4:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80026b6:	78bb      	ldrb	r3, [r7, #2]
 80026b8:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 80026ba:	89fb      	ldrh	r3, [r7, #14]
 80026bc:	f023 0307 	bic.w	r3, r3, #7
 80026c0:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	7c1b      	ldrb	r3, [r3, #16]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	89fa      	ldrh	r2, [r7, #14]
 80026cc:	fb12 f303 	smulbb	r3, r2, r3
 80026d0:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	617b      	str	r3, [r7, #20]
  ptr += offset;
 80026d8:	89fb      	ldrh	r3, [r7, #14]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4413      	add	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
  ptr += x;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4413      	add	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80026e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d117      	bne.n	8002720 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	7cbb      	ldrb	r3, [r7, #18]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	7c7b      	ldrb	r3, [r7, #17]
 8002704:	4053      	eors	r3, r2
 8002706:	b2da      	uxtb	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	701a      	strb	r2, [r3, #0]
	ptr++;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	3301      	adds	r3, #1
 8002710:	617b      	str	r3, [r7, #20]
	len--;
 8002712:	787b      	ldrb	r3, [r7, #1]
 8002714:	3b01      	subs	r3, #1
 8002716:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8002718:	787b      	ldrb	r3, [r7, #1]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1e8      	bne.n	80026f0 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800271e:	e039      	b.n	8002794 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	7cbb      	ldrb	r3, [r7, #18]
 8002726:	4313      	orrs	r3, r2
 8002728:	b2da      	uxtb	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	7c7b      	ldrb	r3, [r7, #17]
 8002734:	4053      	eors	r3, r2
 8002736:	b2da      	uxtb	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	3301      	adds	r3, #1
 8002740:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	74fb      	strb	r3, [r7, #19]
      len--;
 800274a:	787b      	ldrb	r3, [r7, #1]
 800274c:	3b01      	subs	r3, #1
 800274e:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d115      	bne.n	8002782 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800275c:	461a      	mov	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	4413      	add	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800276a:	2b01      	cmp	r3, #1
 800276c:	d801      	bhi.n	8002772 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 800276e:	2301      	movs	r3, #1
 8002770:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002778:	2b01      	cmp	r3, #1
 800277a:	d008      	beq.n	800278e <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 800277c:	2301      	movs	r3, #1
 800277e:	747b      	strb	r3, [r7, #17]
 8002780:	e005      	b.n	800278e <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8002782:	7cbb      	ldrb	r3, [r7, #18]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8002788:	7c7b      	ldrb	r3, [r7, #17]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 800278e:	787b      	ldrb	r3, [r7, #1]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1c5      	bne.n	8002720 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002794:	bf00      	nop
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	22ff      	movs	r2, #255	; 0xff
 80027bc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	22ff      	movs	r2, #255	; 0xff
 80027c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	4798      	blx	r3
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	603b      	str	r3, [r7, #0]
 80027e6:	4613      	mov	r3, r2
 80027e8:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	79fa      	ldrb	r2, [r7, #7]
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f7ff ffaf 	bl	80027a0 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f7ff fc4c 	bl	80020e0 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286c:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	7c1b      	ldrb	r3, [r3, #16]
 8002880:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b1f      	cmp	r3, #31
 8002886:	d901      	bls.n	800288c <u8g2_update_dimension_common+0x34>
    t = 31;
 8002888:	231f      	movs	r3, #31
 800288a:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a0:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b6:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 80028c0:	4413      	add	r3, r2
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	7c52      	ldrb	r2, [r2, #17]
 80028c6:	4293      	cmp	r3, r2
 80028c8:	dd06      	ble.n	80028d8 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	7c5a      	ldrb	r2, [r3, #17]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	4413      	add	r3, r2
 8002900:	b2da      	uxtb	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	22f0      	movs	r2, #240	; 0xf0
 800290c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	8a9b      	ldrh	r3, [r3, #20]
 8002914:	2bf0      	cmp	r3, #240	; 0xf0
 8002916:	d805      	bhi.n	8002924 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	8a9b      	ldrh	r3, [r3, #20]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	8adb      	ldrh	r3, [r3, #22]
 8002928:	b2da      	uxtb	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af02      	add	r7, sp, #8
 8002942:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	4603      	mov	r3, r0
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff fdba 	bl	80024da <u8g2_IsIntersection>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d104      	bne.n	8002976 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002974:	e03b      	b.n	80029ee <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800298a:	429a      	cmp	r2, r3
 800298c:	d205      	bcs.n	800299a <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d905      	bls.n	80029b6 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d205      	bcs.n	80029d2 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80029de:	429a      	cmp	r2, r3
 80029e0:	d905      	bls.n	80029ee <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ff2a 	bl	8002858 <u8g2_update_dimension_common>
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff7b 	bl	800293c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b084      	sub	sp, #16
 8002a52:	af02      	add	r7, sp, #8
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	4608      	mov	r0, r1
 8002a58:	4611      	mov	r1, r2
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	70fb      	strb	r3, [r7, #3]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70bb      	strb	r3, [r7, #2]
 8002a64:	4613      	mov	r3, r2
 8002a66:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002a68:	7878      	ldrb	r0, [r7, #1]
 8002a6a:	78ba      	ldrb	r2, [r7, #2]
 8002a6c:	78f9      	ldrb	r1, [r7, #3]
 8002a6e:	7c3b      	ldrb	r3, [r7, #16]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	4603      	mov	r3, r0
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff fbdd 	bl	8002234 <u8g2_draw_hv_line_2dir>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <u8x8_ascii_next+0x18>
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	2b0a      	cmp	r3, #10
 8002ab4:	d102      	bne.n	8002abc <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aba:	e001      	b.n	8002ac0 <u8x8_ascii_next+0x22>
  return b;
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	b29b      	uxth	r3, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	691c      	ldr	r4, [r3, #16]
 8002ade:	7afa      	ldrb	r2, [r7, #11]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2117      	movs	r1, #23
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	47a0      	blx	r4
 8002ae8:	4603      	mov	r3, r0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd90      	pop	{r4, r7, pc}

08002af2 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	460b      	mov	r3, r1
 8002afc:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002afe:	1cfb      	adds	r3, r7, #3
 8002b00:	461a      	mov	r2, r3
 8002b02:	2101      	movs	r1, #1
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ffe1 	bl	8002acc <u8x8_byte_SendBytes>
 8002b0a:	4603      	mov	r3, r0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691c      	ldr	r4, [r3, #16]
 8002b20:	2300      	movs	r3, #0
 8002b22:	2200      	movs	r2, #0
 8002b24:	2118      	movs	r1, #24
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	47a0      	blx	r4
 8002b2a:	4603      	mov	r3, r0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd90      	pop	{r4, r7, pc}

08002b34 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691c      	ldr	r4, [r3, #16]
 8002b40:	2300      	movs	r3, #0
 8002b42:	2200      	movs	r2, #0
 8002b44:	2119      	movs	r1, #25
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	47a0      	blx	r4
 8002b4a:	4603      	mov	r3, r0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd90      	pop	{r4, r7, pc}

08002b54 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68dc      	ldr	r4, [r3, #12]
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	2300      	movs	r3, #0
 8002b68:	2115      	movs	r1, #21
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	47a0      	blx	r4
 8002b6e:	4603      	mov	r3, r0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd90      	pop	{r4, r7, pc}

08002b78 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68dc      	ldr	r4, [r3, #12]
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2116      	movs	r1, #22
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	47a0      	blx	r4
 8002b92:	4603      	mov	r3, r0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd90      	pop	{r4, r7, pc}

08002b9c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002b9c:	b590      	push	{r4, r7, lr}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	68dc      	ldr	r4, [r3, #12]
 8002bae:	7afa      	ldrb	r2, [r7, #11]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2117      	movs	r1, #23
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	47a0      	blx	r4
 8002bb8:	4603      	mov	r3, r0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd90      	pop	{r4, r7, pc}

08002bc2 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002bc2:	b590      	push	{r4, r7, lr}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68dc      	ldr	r4, [r3, #12]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2118      	movs	r1, #24
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	47a0      	blx	r4
 8002bd8:	4603      	mov	r3, r0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}

08002be2 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002be2:	b590      	push	{r4, r7, lr}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68dc      	ldr	r4, [r3, #12]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2119      	movs	r1, #25
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	47a0      	blx	r4
 8002bf8:	4603      	mov	r3, r0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd90      	pop	{r4, r7, pc}

08002c02 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002c02:	b590      	push	{r4, r7, lr}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	73fb      	strb	r3, [r7, #15]
    data++;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	3301      	adds	r3, #1
 8002c16:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	2bfe      	cmp	r3, #254	; 0xfe
 8002c1c:	d031      	beq.n	8002c82 <u8x8_cad_SendSequence+0x80>
 8002c1e:	2bfe      	cmp	r3, #254	; 0xfe
 8002c20:	dc3d      	bgt.n	8002c9e <u8x8_cad_SendSequence+0x9c>
 8002c22:	2b19      	cmp	r3, #25
 8002c24:	dc3b      	bgt.n	8002c9e <u8x8_cad_SendSequence+0x9c>
 8002c26:	2b18      	cmp	r3, #24
 8002c28:	da23      	bge.n	8002c72 <u8x8_cad_SendSequence+0x70>
 8002c2a:	2b16      	cmp	r3, #22
 8002c2c:	dc02      	bgt.n	8002c34 <u8x8_cad_SendSequence+0x32>
 8002c2e:	2b15      	cmp	r3, #21
 8002c30:	da03      	bge.n	8002c3a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002c32:	e034      	b.n	8002c9e <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002c34:	2b17      	cmp	r3, #23
 8002c36:	d00e      	beq.n	8002c56 <u8x8_cad_SendSequence+0x54>
	return;
 8002c38:	e031      	b.n	8002c9e <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68dc      	ldr	r4, [r3, #12]
 8002c44:	7bba      	ldrb	r2, [r7, #14]
 8002c46:	7bf9      	ldrb	r1, [r7, #15]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	47a0      	blx	r4
	  data++;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	603b      	str	r3, [r7, #0]
	  break;
 8002c54:	e022      	b.n	8002c9c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002c5c:	f107 030e 	add.w	r3, r7, #14
 8002c60:	461a      	mov	r2, r3
 8002c62:	2101      	movs	r1, #1
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ff99 	bl	8002b9c <u8x8_cad_SendData>
	  data++;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	603b      	str	r3, [r7, #0]
	  break;
 8002c70:	e014      	b.n	8002c9c <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68dc      	ldr	r4, [r3, #12]
 8002c76:	7bf9      	ldrb	r1, [r7, #15]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	47a0      	blx	r4
	  break;
 8002c80:	e00c      	b.n	8002c9c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002c88:	7bbb      	ldrb	r3, [r7, #14]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	2129      	movs	r1, #41	; 0x29
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fa37 	bl	8003102 <u8x8_gpio_call>
	  data++;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	3301      	adds	r3, #1
 8002c98:	603b      	str	r3, [r7, #0]
	  break;
 8002c9a:	bf00      	nop
    cmd = *data;
 8002c9c:	e7b6      	b.n	8002c0c <u8x8_cad_SendSequence+0xa>
	return;
 8002c9e:	bf00      	nop
    }
  }
}
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd90      	pop	{r4, r7, pc}

08002ca6 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002ca6:	b590      	push	{r4, r7, lr}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f7ff ff2d 	bl	8002b14 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002cba:	2140      	movs	r1, #64	; 0x40
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7ff ff18 	bl	8002af2 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	691c      	ldr	r4, [r3, #16]
 8002cc6:	7afa      	ldrb	r2, [r7, #11]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2117      	movs	r1, #23
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7ff ff2f 	bl	8002b34 <u8x8_byte_EndTransfer>
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd90      	pop	{r4, r7, pc}
	...

08002ce0 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	460b      	mov	r3, r1
 8002cec:	72fb      	strb	r3, [r7, #11]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8002cf2:	7afb      	ldrb	r3, [r7, #11]
 8002cf4:	3b14      	subs	r3, #20
 8002cf6:	2b05      	cmp	r3, #5
 8002cf8:	d86e      	bhi.n	8002dd8 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8002cfa:	a201      	add	r2, pc, #4	; (adr r2, 8002d00 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d97 	.word	0x08002d97
 8002d04:	08002d19 	.word	0x08002d19
 8002d08:	08002d47 	.word	0x08002d47
 8002d0c:	08002d53 	.word	0x08002d53
 8002d10:	08002dbb 	.word	0x08002dbb
 8002d14:	08002dc3 	.word	0x08002dc3
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8002d18:	4b33      	ldr	r3, [pc, #204]	; (8002de8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7ff ff07 	bl	8002b34 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f7ff fef4 	bl	8002b14 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f7ff fedf 	bl	8002af2 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002d34:	7abb      	ldrb	r3, [r7, #10]
 8002d36:	4619      	mov	r1, r3
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7ff feda 	bl	8002af2 <u8x8_byte_SendByte>
      in_transfer = 1;
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8002d44:	e04a      	b.n	8002ddc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8002d46:	7abb      	ldrb	r3, [r7, #10]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f7ff fed1 	bl	8002af2 <u8x8_byte_SendByte>
      break;      
 8002d50:	e044      	b.n	8002ddc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8002d52:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f7ff feea 	bl	8002b34 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002d64:	e00a      	b.n	8002d7c <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	2118      	movs	r1, #24
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff ff9b 	bl	8002ca6 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002d70:	7abb      	ldrb	r3, [r7, #10]
 8002d72:	3b18      	subs	r3, #24
 8002d74:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	3318      	adds	r3, #24
 8002d7a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002d7c:	7abb      	ldrb	r3, [r7, #10]
 8002d7e:	2b18      	cmp	r3, #24
 8002d80:	d8f1      	bhi.n	8002d66 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002d82:	7abb      	ldrb	r3, [r7, #10]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	4619      	mov	r1, r3
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7ff ff8c 	bl	8002ca6 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8002d8e:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
      break;
 8002d94:	e022      	b.n	8002ddc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d9c:	2bff      	cmp	r3, #255	; 0xff
 8002d9e:	d103      	bne.n	8002da8 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2278      	movs	r2, #120	; 0x78
 8002da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	691c      	ldr	r4, [r3, #16]
 8002dac:	7aba      	ldrb	r2, [r7, #10]
 8002dae:	7af9      	ldrb	r1, [r7, #11]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	47a0      	blx	r4
 8002db6:	4603      	mov	r3, r0
 8002db8:	e011      	b.n	8002dde <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
      break;
 8002dc0:	e00c      	b.n	8002ddc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f7ff feb2 	bl	8002b34 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
      break;
 8002dd6:	e001      	b.n	8002ddc <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e000      	b.n	8002dde <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8002ddc:	2301      	movs	r3, #1
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd90      	pop	{r4, r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200004d4 	.word	0x200004d4

08002dec <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	72fb      	strb	r3, [r7, #11]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002dfe:	7afb      	ldrb	r3, [r7, #11]
 8002e00:	3b0b      	subs	r3, #11
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	f200 808a 	bhi.w	8002f1c <u8x8_d_ssd1306_sh1106_generic+0x130>
 8002e08:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8002e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0e:	bf00      	nop
 8002e10:	08002e25 	.word	0x08002e25
 8002e14:	08002f1d 	.word	0x08002f1d
 8002e18:	08002e3f 	.word	0x08002e3f
 8002e1c:	08002e71 	.word	0x08002e71
 8002e20:	08002e91 	.word	0x08002e91
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002e24:	7abb      	ldrb	r3, [r7, #10]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_noname_powersave0_seq);
 8002e2a:	4940      	ldr	r1, [pc, #256]	; (8002f2c <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f7ff fee8 	bl	8002c02 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_noname_powersave1_seq);
      break;
 8002e32:	e075      	b.n	8002f20 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_noname_powersave1_seq);
 8002e34:	493e      	ldr	r1, [pc, #248]	; (8002f30 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff fee3 	bl	8002c02 <u8x8_cad_SendSequence>
      break;
 8002e3c:	e070      	b.n	8002f20 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002e3e:	7abb      	ldrb	r3, [r7, #10]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10a      	bne.n	8002e5a <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_noname_flip0_seq);
 8002e44:	493b      	ldr	r1, [pc, #236]	; (8002f34 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff fedb 	bl	8002c02 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	7c9a      	ldrb	r2, [r3, #18]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8002e58:	e062      	b.n	8002f20 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_noname_flip1_seq);
 8002e5a:	4937      	ldr	r1, [pc, #220]	; (8002f38 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7ff fed0 	bl	8002c02 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	7cda      	ldrb	r2, [r3, #19]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8002e6e:	e057      	b.n	8002f20 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f7ff fea6 	bl	8002bc2 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002e76:	2181      	movs	r1, #129	; 0x81
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff fe6b 	bl	8002b54 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8002e7e:	7abb      	ldrb	r3, [r7, #10]
 8002e80:	4619      	mov	r1, r3
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f7ff fe78 	bl	8002b78 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7ff feaa 	bl	8002be2 <u8x8_cad_EndTransfer>
      break;
 8002e8e:	e047      	b.n	8002f20 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f7ff fe96 	bl	8002bc2 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	795b      	ldrb	r3, [r3, #5]
 8002e9a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	4413      	add	r3, r2
 8002eac:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002eae:	2140      	movs	r1, #64	; 0x40
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7ff fe4f 	bl	8002b54 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002eb6:	7dfb      	ldrb	r3, [r7, #23]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	f043 0310 	orr.w	r3, r3, #16
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff fe45 	bl	8002b54 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8002eca:	7dfb      	ldrb	r3, [r7, #23]
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f7ff fe4f 	bl	8002b78 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	799b      	ldrb	r3, [r3, #6]
 8002ede:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff fe46 	bl	8002b78 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	791b      	ldrb	r3, [r3, #4]
 8002ef0:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002ef8:	7dbb      	ldrb	r3, [r7, #22]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4619      	mov	r1, r3
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f7ff fe4a 	bl	8002b9c <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8002f08:	7abb      	ldrb	r3, [r7, #10]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002f0e:	7abb      	ldrb	r3, [r7, #10]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1eb      	bne.n	8002eec <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff fe64 	bl	8002be2 <u8x8_cad_EndTransfer>
      break;
 8002f1a:	e001      	b.n	8002f20 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	e000      	b.n	8002f22 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8002f20:	2301      	movs	r3, #1
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	08008e98 	.word	0x08008e98
 8002f30:	08008ea0 	.word	0x08008ea0
 8002f34:	08008ea8 	.word	0x08008ea8
 8002f38:	08008eb0 	.word	0x08008eb0

08002f3c <u8x8_d_ssd1306_128x32_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	72fb      	strb	r3, [r7, #11]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002f4e:	7aba      	ldrb	r2, [r7, #10]
 8002f50:	7af9      	ldrb	r1, [r7, #11]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7ff ff49 	bl	8002dec <u8x8_d_ssd1306_sh1106_generic>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <u8x8_d_ssd1306_128x32_noname+0x28>
    return 1;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e014      	b.n	8002f8e <u8x8_d_ssd1306_128x32_noname+0x52>
  
  switch(msg)
 8002f64:	7afb      	ldrb	r3, [r7, #11]
 8002f66:	2b09      	cmp	r3, #9
 8002f68:	d009      	beq.n	8002f7e <u8x8_d_ssd1306_128x32_noname+0x42>
 8002f6a:	2b0a      	cmp	r3, #10
 8002f6c:	d10c      	bne.n	8002f88 <u8x8_d_ssd1306_128x32_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f82a 	bl	8002fc8 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_noname_init_seq);
 8002f74:	4908      	ldr	r1, [pc, #32]	; (8002f98 <u8x8_d_ssd1306_128x32_noname+0x5c>)
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f7ff fe43 	bl	8002c02 <u8x8_cad_SendSequence>
      break;
 8002f7c:	e006      	b.n	8002f8c <u8x8_d_ssd1306_128x32_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_noname_display_info);
 8002f7e:	4907      	ldr	r1, [pc, #28]	; (8002f9c <u8x8_d_ssd1306_128x32_noname+0x60>)
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f80d 	bl	8002fa0 <u8x8_d_helper_display_setup_memory>
      break;
 8002f86:	e001      	b.n	8002f8c <u8x8_d_ssd1306_128x32_noname+0x50>
    default:
      return 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e000      	b.n	8002f8e <u8x8_d_ssd1306_128x32_noname+0x52>
  }
  return 1;
 8002f8c:	2301      	movs	r3, #1
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	08008e60 	.word	0x08008e60
 8002f9c:	08008eb8 	.word	0x08008eb8

08002fa0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	7c9a      	ldrb	r2, [r3, #18]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695c      	ldr	r4, [r3, #20]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2128      	movs	r1, #40	; 0x28
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68dc      	ldr	r4, [r3, #12]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2114      	movs	r1, #20
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002fec:	2201      	movs	r2, #1
 8002fee:	214b      	movs	r1, #75	; 0x4b
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f886 	bl	8003102 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	791b      	ldrb	r3, [r3, #4]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2129      	movs	r1, #41	; 0x29
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f87e 	bl	8003102 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003006:	2200      	movs	r2, #0
 8003008:	214b      	movs	r1, #75	; 0x4b
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f879 	bl	8003102 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	791b      	ldrb	r3, [r3, #4]
 8003016:	461a      	mov	r2, r3
 8003018:	2129      	movs	r1, #41	; 0x29
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f871 	bl	8003102 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003020:	2201      	movs	r2, #1
 8003022:	214b      	movs	r1, #75	; 0x4b
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f86c 	bl	8003102 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	795b      	ldrb	r3, [r3, #5]
 8003030:	461a      	mov	r2, r3
 8003032:	2129      	movs	r1, #41	; 0x29
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f864 	bl	8003102 <u8x8_gpio_call>
}    
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bd90      	pop	{r4, r7, pc}

08003042 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003042:	b590      	push	{r4, r7, lr}
 8003044:	b085      	sub	sp, #20
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	4608      	mov	r0, r1
 800304c:	4611      	mov	r1, r2
 800304e:	461a      	mov	r2, r3
 8003050:	4603      	mov	r3, r0
 8003052:	70fb      	strb	r3, [r7, #3]
 8003054:	460b      	mov	r3, r1
 8003056:	70bb      	strb	r3, [r7, #2]
 8003058:	4613      	mov	r3, r2
 800305a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003060:	78bb      	ldrb	r3, [r7, #2]
 8003062:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003064:	787b      	ldrb	r3, [r7, #1]
 8003066:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689c      	ldr	r4, [r3, #8]
 8003070:	f107 0308 	add.w	r3, r7, #8
 8003074:	2201      	movs	r2, #1
 8003076:	210f      	movs	r1, #15
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	47a0      	blx	r4
 800307c:	4603      	mov	r3, r0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	bd90      	pop	{r4, r7, pc}

08003086 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003086:	b590      	push	{r4, r7, lr}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689c      	ldr	r4, [r3, #8]
 8003092:	2300      	movs	r3, #0
 8003094:	2200      	movs	r2, #0
 8003096:	2109      	movs	r1, #9
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	47a0      	blx	r4
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd90      	pop	{r4, r7, pc}

080030a4 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689c      	ldr	r4, [r3, #8]
 80030b0:	2300      	movs	r3, #0
 80030b2:	2200      	movs	r2, #0
 80030b4:	210a      	movs	r1, #10
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	47a0      	blx	r4
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}

080030c2 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80030c2:	b590      	push	{r4, r7, lr}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	460b      	mov	r3, r1
 80030cc:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689c      	ldr	r4, [r3, #8]
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	2300      	movs	r3, #0
 80030d6:	210b      	movs	r1, #11
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	47a0      	blx	r4
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd90      	pop	{r4, r7, pc}

080030e4 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689c      	ldr	r4, [r3, #8]
 80030f0:	2300      	movs	r3, #0
 80030f2:	2200      	movs	r2, #0
 80030f4:	2110      	movs	r1, #16
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	47a0      	blx	r4
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd90      	pop	{r4, r7, pc}

08003102 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003102:	b590      	push	{r4, r7, lr}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	460b      	mov	r3, r1
 800310c:	70fb      	strb	r3, [r7, #3]
 800310e:	4613      	mov	r3, r2
 8003110:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695c      	ldr	r4, [r3, #20]
 8003116:	78ba      	ldrb	r2, [r7, #2]
 8003118:	78f9      	ldrb	r1, [r7, #3]
 800311a:	2300      	movs	r3, #0
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	47a0      	blx	r4
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bd90      	pop	{r4, r7, pc}

08003128 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	460b      	mov	r3, r1
 8003134:	72fb      	strb	r3, [r7, #11]
 8003136:	4613      	mov	r3, r2
 8003138:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a13      	ldr	r2, [pc, #76]	; (80031a8 <u8x8_SetupDefaults+0x60>)
 800315a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <u8x8_SetupDefaults+0x60>)
 8003160:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a10      	ldr	r2, [pc, #64]	; (80031a8 <u8x8_SetupDefaults+0x60>)
 8003166:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a0f      	ldr	r2, [pc, #60]	; (80031a8 <u8x8_SetupDefaults+0x60>)
 800316c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	22ff      	movs	r2, #255	; 0xff
 8003190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	22ff      	movs	r2, #255	; 0xff
 8003198:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	08003129 	.word	0x08003129

080031ac <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f7ff ffc4 	bl	8003148 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7ff ff54 	bl	8003086 <u8x8_SetupMemory>
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003220 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031ec:	480d      	ldr	r0, [pc, #52]	; (8003224 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031ee:	490e      	ldr	r1, [pc, #56]	; (8003228 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031f0:	4a0e      	ldr	r2, [pc, #56]	; (800322c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031f4:	e002      	b.n	80031fc <LoopCopyDataInit>

080031f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031fa:	3304      	adds	r3, #4

080031fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003200:	d3f9      	bcc.n	80031f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003202:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003204:	4c0b      	ldr	r4, [pc, #44]	; (8003234 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003208:	e001      	b.n	800320e <LoopFillZerobss>

0800320a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800320a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800320c:	3204      	adds	r2, #4

0800320e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800320e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003210:	d3fb      	bcc.n	800320a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003212:	f7fd fd23 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003216:	f002 fe6d 	bl	8005ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800321a:	f7fd fb93 	bl	8000944 <main>
  bx  lr    
 800321e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003220:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003228:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800322c:	08008ee0 	.word	0x08008ee0
  ldr r2, =_sbss
 8003230:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003234:	20000668 	.word	0x20000668

08003238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003238:	e7fe      	b.n	8003238 <ADC_IRQHandler>
	...

0800323c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003240:	4b0e      	ldr	r3, [pc, #56]	; (800327c <HAL_Init+0x40>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a0d      	ldr	r2, [pc, #52]	; (800327c <HAL_Init+0x40>)
 8003246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800324a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_Init+0x40>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a0a      	ldr	r2, [pc, #40]	; (800327c <HAL_Init+0x40>)
 8003252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003258:	4b08      	ldr	r3, [pc, #32]	; (800327c <HAL_Init+0x40>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a07      	ldr	r2, [pc, #28]	; (800327c <HAL_Init+0x40>)
 800325e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003264:	2003      	movs	r0, #3
 8003266:	f000 f94f 	bl	8003508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800326a:	2000      	movs	r0, #0
 800326c:	f000 f808 	bl	8003280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003270:	f7fd fc84 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023c00 	.word	0x40023c00

08003280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003288:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <HAL_InitTick+0x54>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <HAL_InitTick+0x58>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	4619      	mov	r1, r3
 8003292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003296:	fbb3 f3f1 	udiv	r3, r3, r1
 800329a:	fbb2 f3f3 	udiv	r3, r2, r3
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 f967 	bl	8003572 <HAL_SYSTICK_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e00e      	b.n	80032cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b0f      	cmp	r3, #15
 80032b2:	d80a      	bhi.n	80032ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032b4:	2200      	movs	r2, #0
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295
 80032bc:	f000 f92f 	bl	800351e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032c0:	4a06      	ldr	r2, [pc, #24]	; (80032dc <HAL_InitTick+0x5c>)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e000      	b.n	80032cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000000 	.word	0x20000000
 80032d8:	20000008 	.word	0x20000008
 80032dc:	20000004 	.word	0x20000004

080032e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_IncTick+0x20>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_IncTick+0x24>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4413      	add	r3, r2
 80032f0:	4a04      	ldr	r2, [pc, #16]	; (8003304 <HAL_IncTick+0x24>)
 80032f2:	6013      	str	r3, [r2, #0]
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000008 	.word	0x20000008
 8003304:	20000664 	.word	0x20000664

08003308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return uwTick;
 800330c:	4b03      	ldr	r3, [pc, #12]	; (800331c <HAL_GetTick+0x14>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000664 	.word	0x20000664

08003320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003328:	f7ff ffee 	bl	8003308 <HAL_GetTick>
 800332c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d005      	beq.n	8003346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <HAL_Delay+0x44>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003346:	bf00      	nop
 8003348:	f7ff ffde 	bl	8003308 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	429a      	cmp	r2, r3
 8003356:	d8f7      	bhi.n	8003348 <HAL_Delay+0x28>
  {
  }
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000008 	.word	0x20000008

08003368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <__NVIC_SetPriorityGrouping+0x44>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003384:	4013      	ands	r3, r2
 8003386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800339a:	4a04      	ldr	r2, [pc, #16]	; (80033ac <__NVIC_SetPriorityGrouping+0x44>)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	60d3      	str	r3, [r2, #12]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <__NVIC_GetPriorityGrouping+0x18>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	0a1b      	lsrs	r3, r3, #8
 80033ba:	f003 0307 	and.w	r3, r3, #7
}
 80033be:	4618      	mov	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	db0b      	blt.n	80033f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	f003 021f 	and.w	r2, r3, #31
 80033e4:	4907      	ldr	r1, [pc, #28]	; (8003404 <__NVIC_EnableIRQ+0x38>)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	2001      	movs	r0, #1
 80033ee:	fa00 f202 	lsl.w	r2, r0, r2
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	e000e100 	.word	0xe000e100

08003408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	6039      	str	r1, [r7, #0]
 8003412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003418:	2b00      	cmp	r3, #0
 800341a:	db0a      	blt.n	8003432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	490c      	ldr	r1, [pc, #48]	; (8003454 <__NVIC_SetPriority+0x4c>)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	0112      	lsls	r2, r2, #4
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	440b      	add	r3, r1
 800342c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003430:	e00a      	b.n	8003448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	4908      	ldr	r1, [pc, #32]	; (8003458 <__NVIC_SetPriority+0x50>)
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	3b04      	subs	r3, #4
 8003440:	0112      	lsls	r2, r2, #4
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	440b      	add	r3, r1
 8003446:	761a      	strb	r2, [r3, #24]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000e100 	.word	0xe000e100
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800345c:	b480      	push	{r7}
 800345e:	b089      	sub	sp, #36	; 0x24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f1c3 0307 	rsb	r3, r3, #7
 8003476:	2b04      	cmp	r3, #4
 8003478:	bf28      	it	cs
 800347a:	2304      	movcs	r3, #4
 800347c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3304      	adds	r3, #4
 8003482:	2b06      	cmp	r3, #6
 8003484:	d902      	bls.n	800348c <NVIC_EncodePriority+0x30>
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3b03      	subs	r3, #3
 800348a:	e000      	b.n	800348e <NVIC_EncodePriority+0x32>
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	f04f 32ff 	mov.w	r2, #4294967295
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43da      	mvns	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	401a      	ands	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a4:	f04f 31ff 	mov.w	r1, #4294967295
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	43d9      	mvns	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b4:	4313      	orrs	r3, r2
         );
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3724      	adds	r7, #36	; 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034d4:	d301      	bcc.n	80034da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034d6:	2301      	movs	r3, #1
 80034d8:	e00f      	b.n	80034fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034da:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <SysTick_Config+0x40>)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034e2:	210f      	movs	r1, #15
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295
 80034e8:	f7ff ff8e 	bl	8003408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <SysTick_Config+0x40>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <SysTick_Config+0x40>)
 80034f4:	2207      	movs	r2, #7
 80034f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	e000e010 	.word	0xe000e010

08003508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ff29 	bl	8003368 <__NVIC_SetPriorityGrouping>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800351e:	b580      	push	{r7, lr}
 8003520:	b086      	sub	sp, #24
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003530:	f7ff ff3e 	bl	80033b0 <__NVIC_GetPriorityGrouping>
 8003534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	6978      	ldr	r0, [r7, #20]
 800353c:	f7ff ff8e 	bl	800345c <NVIC_EncodePriority>
 8003540:	4602      	mov	r2, r0
 8003542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff5d 	bl	8003408 <__NVIC_SetPriority>
}
 800354e:	bf00      	nop
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	4603      	mov	r3, r0
 800355e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff31 	bl	80033cc <__NVIC_EnableIRQ>
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff ffa2 	bl	80034c4 <SysTick_Config>
 8003580:	4603      	mov	r3, r0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003598:	f7ff feb6 	bl	8003308 <HAL_GetTick>
 800359c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d008      	beq.n	80035bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2280      	movs	r2, #128	; 0x80
 80035ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e052      	b.n	8003662 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0216 	bic.w	r2, r2, #22
 80035ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695a      	ldr	r2, [r3, #20]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d103      	bne.n	80035ec <HAL_DMA_Abort+0x62>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0208 	bic.w	r2, r2, #8
 80035fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0201 	bic.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800360c:	e013      	b.n	8003636 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800360e:	f7ff fe7b 	bl	8003308 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b05      	cmp	r3, #5
 800361a:	d90c      	bls.n	8003636 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2203      	movs	r2, #3
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e015      	b.n	8003662 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e4      	bne.n	800360e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	223f      	movs	r2, #63	; 0x3f
 800364a:	409a      	lsls	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d004      	beq.n	8003688 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2280      	movs	r2, #128	; 0x80
 8003682:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e00c      	b.n	80036a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2205      	movs	r2, #5
 800368c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b089      	sub	sp, #36	; 0x24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	e16b      	b.n	80039a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036cc:	2201      	movs	r2, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	f040 815a 	bne.w	800399e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d005      	beq.n	8003702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d130      	bne.n	8003764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	2203      	movs	r2, #3
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003738:	2201      	movs	r2, #1
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 0201 	and.w	r2, r3, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b03      	cmp	r3, #3
 800376e:	d017      	beq.n	80037a0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d123      	bne.n	80037f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	08da      	lsrs	r2, r3, #3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3208      	adds	r2, #8
 80037b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	220f      	movs	r2, #15
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	08da      	lsrs	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3208      	adds	r2, #8
 80037ee:	69b9      	ldr	r1, [r7, #24]
 80037f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	2203      	movs	r2, #3
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0203 	and.w	r2, r3, #3
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80b4 	beq.w	800399e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	4b60      	ldr	r3, [pc, #384]	; (80039bc <HAL_GPIO_Init+0x30c>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	4a5f      	ldr	r2, [pc, #380]	; (80039bc <HAL_GPIO_Init+0x30c>)
 8003840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003844:	6453      	str	r3, [r2, #68]	; 0x44
 8003846:	4b5d      	ldr	r3, [pc, #372]	; (80039bc <HAL_GPIO_Init+0x30c>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003852:	4a5b      	ldr	r2, [pc, #364]	; (80039c0 <HAL_GPIO_Init+0x310>)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	3302      	adds	r3, #2
 800385a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	220f      	movs	r2, #15
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a52      	ldr	r2, [pc, #328]	; (80039c4 <HAL_GPIO_Init+0x314>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d02b      	beq.n	80038d6 <HAL_GPIO_Init+0x226>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a51      	ldr	r2, [pc, #324]	; (80039c8 <HAL_GPIO_Init+0x318>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d025      	beq.n	80038d2 <HAL_GPIO_Init+0x222>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a50      	ldr	r2, [pc, #320]	; (80039cc <HAL_GPIO_Init+0x31c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01f      	beq.n	80038ce <HAL_GPIO_Init+0x21e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4f      	ldr	r2, [pc, #316]	; (80039d0 <HAL_GPIO_Init+0x320>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d019      	beq.n	80038ca <HAL_GPIO_Init+0x21a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a4e      	ldr	r2, [pc, #312]	; (80039d4 <HAL_GPIO_Init+0x324>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_GPIO_Init+0x216>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4d      	ldr	r2, [pc, #308]	; (80039d8 <HAL_GPIO_Init+0x328>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00d      	beq.n	80038c2 <HAL_GPIO_Init+0x212>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4c      	ldr	r2, [pc, #304]	; (80039dc <HAL_GPIO_Init+0x32c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d007      	beq.n	80038be <HAL_GPIO_Init+0x20e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4b      	ldr	r2, [pc, #300]	; (80039e0 <HAL_GPIO_Init+0x330>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d101      	bne.n	80038ba <HAL_GPIO_Init+0x20a>
 80038b6:	2307      	movs	r3, #7
 80038b8:	e00e      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038ba:	2308      	movs	r3, #8
 80038bc:	e00c      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038be:	2306      	movs	r3, #6
 80038c0:	e00a      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038c2:	2305      	movs	r3, #5
 80038c4:	e008      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038c6:	2304      	movs	r3, #4
 80038c8:	e006      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038ca:	2303      	movs	r3, #3
 80038cc:	e004      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e002      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038d6:	2300      	movs	r3, #0
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	f002 0203 	and.w	r2, r2, #3
 80038de:	0092      	lsls	r2, r2, #2
 80038e0:	4093      	lsls	r3, r2
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038e8:	4935      	ldr	r1, [pc, #212]	; (80039c0 <HAL_GPIO_Init+0x310>)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	3302      	adds	r3, #2
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038f6:	4b3b      	ldr	r3, [pc, #236]	; (80039e4 <HAL_GPIO_Init+0x334>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800391a:	4a32      	ldr	r2, [pc, #200]	; (80039e4 <HAL_GPIO_Init+0x334>)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003920:	4b30      	ldr	r3, [pc, #192]	; (80039e4 <HAL_GPIO_Init+0x334>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003944:	4a27      	ldr	r2, [pc, #156]	; (80039e4 <HAL_GPIO_Init+0x334>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800394a:	4b26      	ldr	r3, [pc, #152]	; (80039e4 <HAL_GPIO_Init+0x334>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800396e:	4a1d      	ldr	r2, [pc, #116]	; (80039e4 <HAL_GPIO_Init+0x334>)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003974:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <HAL_GPIO_Init+0x334>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003998:	4a12      	ldr	r2, [pc, #72]	; (80039e4 <HAL_GPIO_Init+0x334>)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3301      	adds	r3, #1
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b0f      	cmp	r3, #15
 80039a8:	f67f ae90 	bls.w	80036cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3724      	adds	r7, #36	; 0x24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40013800 	.word	0x40013800
 80039c4:	40020000 	.word	0x40020000
 80039c8:	40020400 	.word	0x40020400
 80039cc:	40020800 	.word	0x40020800
 80039d0:	40020c00 	.word	0x40020c00
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40021400 	.word	0x40021400
 80039dc:	40021800 	.word	0x40021800
 80039e0:	40021c00 	.word	0x40021c00
 80039e4:	40013c00 	.word	0x40013c00

080039e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	807b      	strh	r3, [r7, #2]
 80039f4:	4613      	mov	r3, r2
 80039f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039f8:	787b      	ldrb	r3, [r7, #1]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039fe:	887a      	ldrh	r2, [r7, #2]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a04:	e003      	b.n	8003a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	041a      	lsls	r2, r3, #16
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	619a      	str	r2, [r3, #24]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e12b      	b.n	8003c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fc fdd6 	bl	80005f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2224      	movs	r2, #36	; 0x24
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a80:	f001 f864 	bl	8004b4c <HAL_RCC_GetPCLK1Freq>
 8003a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4a81      	ldr	r2, [pc, #516]	; (8003c90 <HAL_I2C_Init+0x274>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d807      	bhi.n	8003aa0 <HAL_I2C_Init+0x84>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a80      	ldr	r2, [pc, #512]	; (8003c94 <HAL_I2C_Init+0x278>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	bf94      	ite	ls
 8003a98:	2301      	movls	r3, #1
 8003a9a:	2300      	movhi	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	e006      	b.n	8003aae <HAL_I2C_Init+0x92>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a7d      	ldr	r2, [pc, #500]	; (8003c98 <HAL_I2C_Init+0x27c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	bf94      	ite	ls
 8003aa8:	2301      	movls	r3, #1
 8003aaa:	2300      	movhi	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0e7      	b.n	8003c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a78      	ldr	r2, [pc, #480]	; (8003c9c <HAL_I2C_Init+0x280>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	0c9b      	lsrs	r3, r3, #18
 8003ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a6a      	ldr	r2, [pc, #424]	; (8003c90 <HAL_I2C_Init+0x274>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d802      	bhi.n	8003af0 <HAL_I2C_Init+0xd4>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3301      	adds	r3, #1
 8003aee:	e009      	b.n	8003b04 <HAL_I2C_Init+0xe8>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	4a69      	ldr	r2, [pc, #420]	; (8003ca0 <HAL_I2C_Init+0x284>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	3301      	adds	r3, #1
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	495c      	ldr	r1, [pc, #368]	; (8003c90 <HAL_I2C_Init+0x274>)
 8003b20:	428b      	cmp	r3, r1
 8003b22:	d819      	bhi.n	8003b58 <HAL_I2C_Init+0x13c>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1e59      	subs	r1, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b32:	1c59      	adds	r1, r3, #1
 8003b34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b38:	400b      	ands	r3, r1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_I2C_Init+0x138>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1e59      	subs	r1, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b52:	e051      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003b54:	2304      	movs	r3, #4
 8003b56:	e04f      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d111      	bne.n	8003b84 <HAL_I2C_Init+0x168>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1e58      	subs	r0, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	440b      	add	r3, r1
 8003b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b72:	3301      	adds	r3, #1
 8003b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e012      	b.n	8003baa <HAL_I2C_Init+0x18e>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1e58      	subs	r0, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6859      	ldr	r1, [r3, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	0099      	lsls	r1, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_I2C_Init+0x196>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e022      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_I2C_Init+0x1bc>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1e58      	subs	r0, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6859      	ldr	r1, [r3, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	440b      	add	r3, r1
 8003bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd6:	e00f      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1e58      	subs	r0, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	0099      	lsls	r1, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	6809      	ldr	r1, [r1, #0]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6911      	ldr	r1, [r2, #16]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68d2      	ldr	r2, [r2, #12]
 8003c32:	4311      	orrs	r1, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	000186a0 	.word	0x000186a0
 8003c94:	001e847f 	.word	0x001e847f
 8003c98:	003d08ff 	.word	0x003d08ff
 8003c9c:	431bde83 	.word	0x431bde83
 8003ca0:	10624dd3 	.word	0x10624dd3

08003ca4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	607a      	str	r2, [r7, #4]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	817b      	strh	r3, [r7, #10]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cb8:	f7ff fb26 	bl	8003308 <HAL_GetTick>
 8003cbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	f040 80e0 	bne.w	8003e8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2319      	movs	r3, #25
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4970      	ldr	r1, [pc, #448]	; (8003e98 <HAL_I2C_Master_Transmit+0x1f4>)
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f964 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e0d3      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_I2C_Master_Transmit+0x50>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e0cc      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x1ea>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d007      	beq.n	8003d1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2221      	movs	r2, #33	; 0x21
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2210      	movs	r2, #16
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	893a      	ldrh	r2, [r7, #8]
 8003d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a50      	ldr	r2, [pc, #320]	; (8003e9c <HAL_I2C_Master_Transmit+0x1f8>)
 8003d5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d5c:	8979      	ldrh	r1, [r7, #10]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f89c 	bl	8003ea0 <I2C_MasterRequestWrite>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e08d      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d88:	e066      	b.n	8003e58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	6a39      	ldr	r1, [r7, #32]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f9de 	bl	8004150 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00d      	beq.n	8003db6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d107      	bne.n	8003db2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e06b      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	781a      	ldrb	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d11b      	bne.n	8003e2c <HAL_I2C_Master_Transmit+0x188>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d017      	beq.n	8003e2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	781a      	ldrb	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	6a39      	ldr	r1, [r7, #32]
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f9ce 	bl	80041d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00d      	beq.n	8003e58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d107      	bne.n	8003e54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e01a      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d194      	bne.n	8003d8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e000      	b.n	8003e8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	00100002 	.word	0x00100002
 8003e9c:	ffff0000 	.word	0xffff0000

08003ea0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	460b      	mov	r3, r1
 8003eae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d006      	beq.n	8003eca <I2C_MasterRequestWrite+0x2a>
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d003      	beq.n	8003eca <I2C_MasterRequestWrite+0x2a>
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ec8:	d108      	bne.n	8003edc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e00b      	b.n	8003ef4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	2b12      	cmp	r3, #18
 8003ee2:	d107      	bne.n	8003ef4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f84f 	bl	8003fa4 <I2C_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00d      	beq.n	8003f28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f1a:	d103      	bne.n	8003f24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e035      	b.n	8003f94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f30:	d108      	bne.n	8003f44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f32:	897b      	ldrh	r3, [r7, #10]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f40:	611a      	str	r2, [r3, #16]
 8003f42:	e01b      	b.n	8003f7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f44:	897b      	ldrh	r3, [r7, #10]
 8003f46:	11db      	asrs	r3, r3, #7
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	f003 0306 	and.w	r3, r3, #6
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f063 030f 	orn	r3, r3, #15
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	490e      	ldr	r1, [pc, #56]	; (8003f9c <I2C_MasterRequestWrite+0xfc>)
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f875 	bl	8004052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e010      	b.n	8003f94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f72:	897b      	ldrh	r3, [r7, #10]
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	4907      	ldr	r1, [pc, #28]	; (8003fa0 <I2C_MasterRequestWrite+0x100>)
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f865 	bl	8004052 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	00010008 	.word	0x00010008
 8003fa0:	00010002 	.word	0x00010002

08003fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fb4:	e025      	b.n	8004002 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d021      	beq.n	8004002 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbe:	f7ff f9a3 	bl	8003308 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d302      	bcc.n	8003fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d116      	bne.n	8004002 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f043 0220 	orr.w	r2, r3, #32
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e023      	b.n	800404a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	0c1b      	lsrs	r3, r3, #16
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b01      	cmp	r3, #1
 800400a:	d10d      	bne.n	8004028 <I2C_WaitOnFlagUntilTimeout+0x84>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	43da      	mvns	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4013      	ands	r3, r2
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	bf0c      	ite	eq
 800401e:	2301      	moveq	r3, #1
 8004020:	2300      	movne	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	e00c      	b.n	8004042 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	43da      	mvns	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4013      	ands	r3, r2
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	bf0c      	ite	eq
 800403a:	2301      	moveq	r3, #1
 800403c:	2300      	movne	r3, #0
 800403e:	b2db      	uxtb	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	429a      	cmp	r2, r3
 8004046:	d0b6      	beq.n	8003fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004060:	e051      	b.n	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004070:	d123      	bne.n	80040ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004080:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800408a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2220      	movs	r2, #32
 8004096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f043 0204 	orr.w	r2, r3, #4
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e046      	b.n	8004148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d021      	beq.n	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c2:	f7ff f921 	bl	8003308 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d302      	bcc.n	80040d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d116      	bne.n	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f043 0220 	orr.w	r2, r3, #32
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e020      	b.n	8004148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	d10c      	bne.n	800412a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	43da      	mvns	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4013      	ands	r3, r2
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	bf14      	ite	ne
 8004122:	2301      	movne	r3, #1
 8004124:	2300      	moveq	r3, #0
 8004126:	b2db      	uxtb	r3, r3
 8004128:	e00b      	b.n	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	43da      	mvns	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4013      	ands	r3, r2
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d18d      	bne.n	8004062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800415c:	e02d      	b.n	80041ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f878 	bl	8004254 <I2C_IsAcknowledgeFailed>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e02d      	b.n	80041ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d021      	beq.n	80041ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004176:	f7ff f8c7 	bl	8003308 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	429a      	cmp	r2, r3
 8004184:	d302      	bcc.n	800418c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d116      	bne.n	80041ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f043 0220 	orr.w	r2, r3, #32
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e007      	b.n	80041ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c4:	2b80      	cmp	r3, #128	; 0x80
 80041c6:	d1ca      	bne.n	800415e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041de:	e02d      	b.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f837 	bl	8004254 <I2C_IsAcknowledgeFailed>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e02d      	b.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d021      	beq.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f8:	f7ff f886 	bl	8003308 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	429a      	cmp	r2, r3
 8004206:	d302      	bcc.n	800420e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d116      	bne.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f043 0220 	orr.w	r2, r3, #32
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e007      	b.n	800424c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b04      	cmp	r3, #4
 8004248:	d1ca      	bne.n	80041e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426a:	d11b      	bne.n	80042a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004274:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004290:	f043 0204 	orr.w	r2, r3, #4
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e264      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d075      	beq.n	80043be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042d2:	4ba3      	ldr	r3, [pc, #652]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d00c      	beq.n	80042f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042de:	4ba0      	ldr	r3, [pc, #640]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d112      	bne.n	8004310 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ea:	4b9d      	ldr	r3, [pc, #628]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042f6:	d10b      	bne.n	8004310 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f8:	4b99      	ldr	r3, [pc, #612]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d05b      	beq.n	80043bc <HAL_RCC_OscConfig+0x108>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d157      	bne.n	80043bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e23f      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004318:	d106      	bne.n	8004328 <HAL_RCC_OscConfig+0x74>
 800431a:	4b91      	ldr	r3, [pc, #580]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a90      	ldr	r2, [pc, #576]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e01d      	b.n	8004364 <HAL_RCC_OscConfig+0xb0>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004330:	d10c      	bne.n	800434c <HAL_RCC_OscConfig+0x98>
 8004332:	4b8b      	ldr	r3, [pc, #556]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a8a      	ldr	r2, [pc, #552]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	4b88      	ldr	r3, [pc, #544]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a87      	ldr	r2, [pc, #540]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e00b      	b.n	8004364 <HAL_RCC_OscConfig+0xb0>
 800434c:	4b84      	ldr	r3, [pc, #528]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a83      	ldr	r2, [pc, #524]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b81      	ldr	r3, [pc, #516]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a80      	ldr	r2, [pc, #512]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 800435e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d013      	beq.n	8004394 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fe ffcc 	bl	8003308 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004374:	f7fe ffc8 	bl	8003308 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	; 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e204      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004386:	4b76      	ldr	r3, [pc, #472]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0xc0>
 8004392:	e014      	b.n	80043be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7fe ffb8 	bl	8003308 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800439c:	f7fe ffb4 	bl	8003308 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	; 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e1f0      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ae:	4b6c      	ldr	r3, [pc, #432]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0xe8>
 80043ba:	e000      	b.n	80043be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d063      	beq.n	8004492 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ca:	4b65      	ldr	r3, [pc, #404]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d6:	4b62      	ldr	r3, [pc, #392]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d11c      	bne.n	800441c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e2:	4b5f      	ldr	r3, [pc, #380]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d116      	bne.n	800441c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	4b5c      	ldr	r3, [pc, #368]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_RCC_OscConfig+0x152>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d001      	beq.n	8004406 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e1c4      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004406:	4b56      	ldr	r3, [pc, #344]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4952      	ldr	r1, [pc, #328]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004416:	4313      	orrs	r3, r2
 8004418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441a:	e03a      	b.n	8004492 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d020      	beq.n	8004466 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004424:	4b4f      	ldr	r3, [pc, #316]	; (8004564 <HAL_RCC_OscConfig+0x2b0>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fe ff6d 	bl	8003308 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004432:	f7fe ff69 	bl	8003308 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e1a5      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004444:	4b46      	ldr	r3, [pc, #280]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004450:	4b43      	ldr	r3, [pc, #268]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4940      	ldr	r1, [pc, #256]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]
 8004464:	e015      	b.n	8004492 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004466:	4b3f      	ldr	r3, [pc, #252]	; (8004564 <HAL_RCC_OscConfig+0x2b0>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fe ff4c 	bl	8003308 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004474:	f7fe ff48 	bl	8003308 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e184      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004486:	4b36      	ldr	r3, [pc, #216]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d030      	beq.n	8004500 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d016      	beq.n	80044d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a6:	4b30      	ldr	r3, [pc, #192]	; (8004568 <HAL_RCC_OscConfig+0x2b4>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fe ff2c 	bl	8003308 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b4:	f7fe ff28 	bl	8003308 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e164      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c6:	4b26      	ldr	r3, [pc, #152]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 80044c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x200>
 80044d2:	e015      	b.n	8004500 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d4:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_RCC_OscConfig+0x2b4>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044da:	f7fe ff15 	bl	8003308 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e2:	f7fe ff11 	bl	8003308 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e14d      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f4:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 80044f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f0      	bne.n	80044e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80a0 	beq.w	800464e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450e:	2300      	movs	r3, #0
 8004510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004512:	4b13      	ldr	r3, [pc, #76]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10f      	bne.n	800453e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	4a0e      	ldr	r2, [pc, #56]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452c:	6413      	str	r3, [r2, #64]	; 0x40
 800452e:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800453a:	2301      	movs	r3, #1
 800453c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453e:	4b0b      	ldr	r3, [pc, #44]	; (800456c <HAL_RCC_OscConfig+0x2b8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d121      	bne.n	800458e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <HAL_RCC_OscConfig+0x2b8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a07      	ldr	r2, [pc, #28]	; (800456c <HAL_RCC_OscConfig+0x2b8>)
 8004550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004556:	f7fe fed7 	bl	8003308 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455c:	e011      	b.n	8004582 <HAL_RCC_OscConfig+0x2ce>
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800
 8004564:	42470000 	.word	0x42470000
 8004568:	42470e80 	.word	0x42470e80
 800456c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004570:	f7fe feca 	bl	8003308 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e106      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004582:	4b85      	ldr	r3, [pc, #532]	; (8004798 <HAL_RCC_OscConfig+0x4e4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d106      	bne.n	80045a4 <HAL_RCC_OscConfig+0x2f0>
 8004596:	4b81      	ldr	r3, [pc, #516]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459a:	4a80      	ldr	r2, [pc, #512]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	6713      	str	r3, [r2, #112]	; 0x70
 80045a2:	e01c      	b.n	80045de <HAL_RCC_OscConfig+0x32a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b05      	cmp	r3, #5
 80045aa:	d10c      	bne.n	80045c6 <HAL_RCC_OscConfig+0x312>
 80045ac:	4b7b      	ldr	r3, [pc, #492]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	4a7a      	ldr	r2, [pc, #488]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 80045b2:	f043 0304 	orr.w	r3, r3, #4
 80045b6:	6713      	str	r3, [r2, #112]	; 0x70
 80045b8:	4b78      	ldr	r3, [pc, #480]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 80045ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045bc:	4a77      	ldr	r2, [pc, #476]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	6713      	str	r3, [r2, #112]	; 0x70
 80045c4:	e00b      	b.n	80045de <HAL_RCC_OscConfig+0x32a>
 80045c6:	4b75      	ldr	r3, [pc, #468]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	4a74      	ldr	r2, [pc, #464]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	6713      	str	r3, [r2, #112]	; 0x70
 80045d2:	4b72      	ldr	r3, [pc, #456]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d6:	4a71      	ldr	r2, [pc, #452]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 80045d8:	f023 0304 	bic.w	r3, r3, #4
 80045dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d015      	beq.n	8004612 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e6:	f7fe fe8f 	bl	8003308 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ee:	f7fe fe8b 	bl	8003308 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e0c5      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004604:	4b65      	ldr	r3, [pc, #404]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ee      	beq.n	80045ee <HAL_RCC_OscConfig+0x33a>
 8004610:	e014      	b.n	800463c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004612:	f7fe fe79 	bl	8003308 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004618:	e00a      	b.n	8004630 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461a:	f7fe fe75 	bl	8003308 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	f241 3288 	movw	r2, #5000	; 0x1388
 8004628:	4293      	cmp	r3, r2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0af      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004630:	4b5a      	ldr	r3, [pc, #360]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1ee      	bne.n	800461a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d105      	bne.n	800464e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004642:	4b56      	ldr	r3, [pc, #344]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	4a55      	ldr	r2, [pc, #340]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 8004648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 809b 	beq.w	800478e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004658:	4b50      	ldr	r3, [pc, #320]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 030c 	and.w	r3, r3, #12
 8004660:	2b08      	cmp	r3, #8
 8004662:	d05c      	beq.n	800471e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d141      	bne.n	80046f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466c:	4b4c      	ldr	r3, [pc, #304]	; (80047a0 <HAL_RCC_OscConfig+0x4ec>)
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004672:	f7fe fe49 	bl	8003308 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467a:	f7fe fe45 	bl	8003308 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e081      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468c:	4b43      	ldr	r3, [pc, #268]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	019b      	lsls	r3, r3, #6
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	3b01      	subs	r3, #1
 80046b2:	041b      	lsls	r3, r3, #16
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	061b      	lsls	r3, r3, #24
 80046bc:	4937      	ldr	r1, [pc, #220]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c2:	4b37      	ldr	r3, [pc, #220]	; (80047a0 <HAL_RCC_OscConfig+0x4ec>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fe fe1e 	bl	8003308 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d0:	f7fe fe1a 	bl	8003308 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e056      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e2:	4b2e      	ldr	r3, [pc, #184]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0x41c>
 80046ee:	e04e      	b.n	800478e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f0:	4b2b      	ldr	r3, [pc, #172]	; (80047a0 <HAL_RCC_OscConfig+0x4ec>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f6:	f7fe fe07 	bl	8003308 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fe:	f7fe fe03 	bl	8003308 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e03f      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004710:	4b22      	ldr	r3, [pc, #136]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f0      	bne.n	80046fe <HAL_RCC_OscConfig+0x44a>
 800471c:	e037      	b.n	800478e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e032      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800472a:	4b1c      	ldr	r3, [pc, #112]	; (800479c <HAL_RCC_OscConfig+0x4e8>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d028      	beq.n	800478a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004742:	429a      	cmp	r2, r3
 8004744:	d121      	bne.n	800478a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d11a      	bne.n	800478a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800475a:	4013      	ands	r3, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004760:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004762:	4293      	cmp	r3, r2
 8004764:	d111      	bne.n	800478a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	085b      	lsrs	r3, r3, #1
 8004772:	3b01      	subs	r3, #1
 8004774:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d107      	bne.n	800478a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004786:	429a      	cmp	r2, r3
 8004788:	d001      	beq.n	800478e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40007000 	.word	0x40007000
 800479c:	40023800 	.word	0x40023800
 80047a0:	42470060 	.word	0x42470060

080047a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0cc      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047b8:	4b68      	ldr	r3, [pc, #416]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d90c      	bls.n	80047e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b65      	ldr	r3, [pc, #404]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b63      	ldr	r3, [pc, #396]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0b8      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d020      	beq.n	800482e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f8:	4b59      	ldr	r3, [pc, #356]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4a58      	ldr	r2, [pc, #352]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004810:	4b53      	ldr	r3, [pc, #332]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4a52      	ldr	r2, [pc, #328]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800481a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800481c:	4b50      	ldr	r3, [pc, #320]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	494d      	ldr	r1, [pc, #308]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d044      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d107      	bne.n	8004852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004842:	4b47      	ldr	r3, [pc, #284]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d119      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e07f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d003      	beq.n	8004862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485e:	2b03      	cmp	r3, #3
 8004860:	d107      	bne.n	8004872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004862:	4b3f      	ldr	r3, [pc, #252]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e06f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004872:	4b3b      	ldr	r3, [pc, #236]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e067      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004882:	4b37      	ldr	r3, [pc, #220]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f023 0203 	bic.w	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4934      	ldr	r1, [pc, #208]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	4313      	orrs	r3, r2
 8004892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004894:	f7fe fd38 	bl	8003308 <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489c:	f7fe fd34 	bl	8003308 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e04f      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 020c 	and.w	r2, r3, #12
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d1eb      	bne.n	800489c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048c4:	4b25      	ldr	r3, [pc, #148]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d20c      	bcs.n	80048ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d2:	4b22      	ldr	r3, [pc, #136]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048da:	4b20      	ldr	r3, [pc, #128]	; (800495c <HAL_RCC_ClockConfig+0x1b8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e032      	b.n	8004952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f8:	4b19      	ldr	r3, [pc, #100]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4916      	ldr	r1, [pc, #88]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	490e      	ldr	r1, [pc, #56]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800492a:	f000 f821 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 800492e:	4602      	mov	r2, r0
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	490a      	ldr	r1, [pc, #40]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 800493c:	5ccb      	ldrb	r3, [r1, r3]
 800493e:	fa22 f303 	lsr.w	r3, r2, r3
 8004942:	4a09      	ldr	r2, [pc, #36]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <HAL_RCC_ClockConfig+0x1c8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe fc98 	bl	8003280 <HAL_InitTick>

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40023c00 	.word	0x40023c00
 8004960:	40023800 	.word	0x40023800
 8004964:	08005fc0 	.word	0x08005fc0
 8004968:	20000000 	.word	0x20000000
 800496c:	20000004 	.word	0x20000004

08004970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004970:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	2300      	movs	r3, #0
 8004982:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004988:	4b67      	ldr	r3, [pc, #412]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 030c 	and.w	r3, r3, #12
 8004990:	2b08      	cmp	r3, #8
 8004992:	d00d      	beq.n	80049b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004994:	2b08      	cmp	r3, #8
 8004996:	f200 80bd 	bhi.w	8004b14 <HAL_RCC_GetSysClockFreq+0x1a4>
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x34>
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d003      	beq.n	80049aa <HAL_RCC_GetSysClockFreq+0x3a>
 80049a2:	e0b7      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049a4:	4b61      	ldr	r3, [pc, #388]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80049a6:	60bb      	str	r3, [r7, #8]
       break;
 80049a8:	e0b7      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049aa:	4b61      	ldr	r3, [pc, #388]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80049ac:	60bb      	str	r3, [r7, #8]
      break;
 80049ae:	e0b4      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049b0:	4b5d      	ldr	r3, [pc, #372]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ba:	4b5b      	ldr	r3, [pc, #364]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d04d      	beq.n	8004a62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c6:	4b58      	ldr	r3, [pc, #352]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	099b      	lsrs	r3, r3, #6
 80049cc:	461a      	mov	r2, r3
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049d6:	f04f 0100 	mov.w	r1, #0
 80049da:	ea02 0800 	and.w	r8, r2, r0
 80049de:	ea03 0901 	and.w	r9, r3, r1
 80049e2:	4640      	mov	r0, r8
 80049e4:	4649      	mov	r1, r9
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	014b      	lsls	r3, r1, #5
 80049f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049f4:	0142      	lsls	r2, r0, #5
 80049f6:	4610      	mov	r0, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	ebb0 0008 	subs.w	r0, r0, r8
 80049fe:	eb61 0109 	sbc.w	r1, r1, r9
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	018b      	lsls	r3, r1, #6
 8004a0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a10:	0182      	lsls	r2, r0, #6
 8004a12:	1a12      	subs	r2, r2, r0
 8004a14:	eb63 0301 	sbc.w	r3, r3, r1
 8004a18:	f04f 0000 	mov.w	r0, #0
 8004a1c:	f04f 0100 	mov.w	r1, #0
 8004a20:	00d9      	lsls	r1, r3, #3
 8004a22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a26:	00d0      	lsls	r0, r2, #3
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	eb12 0208 	adds.w	r2, r2, r8
 8004a30:	eb43 0309 	adc.w	r3, r3, r9
 8004a34:	f04f 0000 	mov.w	r0, #0
 8004a38:	f04f 0100 	mov.w	r1, #0
 8004a3c:	0259      	lsls	r1, r3, #9
 8004a3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a42:	0250      	lsls	r0, r2, #9
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4610      	mov	r0, r2
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	f7fb fbb8 	bl	80001c8 <__aeabi_uldivmod>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	e04a      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a62:	4b31      	ldr	r3, [pc, #196]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	099b      	lsrs	r3, r3, #6
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a72:	f04f 0100 	mov.w	r1, #0
 8004a76:	ea02 0400 	and.w	r4, r2, r0
 8004a7a:	ea03 0501 	and.w	r5, r3, r1
 8004a7e:	4620      	mov	r0, r4
 8004a80:	4629      	mov	r1, r5
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	014b      	lsls	r3, r1, #5
 8004a8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a90:	0142      	lsls	r2, r0, #5
 8004a92:	4610      	mov	r0, r2
 8004a94:	4619      	mov	r1, r3
 8004a96:	1b00      	subs	r0, r0, r4
 8004a98:	eb61 0105 	sbc.w	r1, r1, r5
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	018b      	lsls	r3, r1, #6
 8004aa6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004aaa:	0182      	lsls	r2, r0, #6
 8004aac:	1a12      	subs	r2, r2, r0
 8004aae:	eb63 0301 	sbc.w	r3, r3, r1
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f04f 0100 	mov.w	r1, #0
 8004aba:	00d9      	lsls	r1, r3, #3
 8004abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ac0:	00d0      	lsls	r0, r2, #3
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	1912      	adds	r2, r2, r4
 8004ac8:	eb45 0303 	adc.w	r3, r5, r3
 8004acc:	f04f 0000 	mov.w	r0, #0
 8004ad0:	f04f 0100 	mov.w	r1, #0
 8004ad4:	0299      	lsls	r1, r3, #10
 8004ad6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ada:	0290      	lsls	r0, r2, #10
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	f7fb fb6c 	bl	80001c8 <__aeabi_uldivmod>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4613      	mov	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004af8:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	3301      	adds	r3, #1
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b10:	60bb      	str	r3, [r7, #8]
      break;
 8004b12:	e002      	b.n	8004b1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b16:	60bb      	str	r3, [r7, #8]
      break;
 8004b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b26:	bf00      	nop
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	00f42400 	.word	0x00f42400
 8004b30:	007a1200 	.word	0x007a1200

08004b34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	20000000 	.word	0x20000000

08004b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b50:	f7ff fff0 	bl	8004b34 <HAL_RCC_GetHCLKFreq>
 8004b54:	4602      	mov	r2, r0
 8004b56:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	0a9b      	lsrs	r3, r3, #10
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	4903      	ldr	r1, [pc, #12]	; (8004b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b62:	5ccb      	ldrb	r3, [r1, r3]
 8004b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	08005fd0 	.word	0x08005fd0

08004b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b78:	f7ff ffdc 	bl	8004b34 <HAL_RCC_GetHCLKFreq>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	0b5b      	lsrs	r3, r3, #13
 8004b84:	f003 0307 	and.w	r3, r3, #7
 8004b88:	4903      	ldr	r1, [pc, #12]	; (8004b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b8a:	5ccb      	ldrb	r3, [r1, r3]
 8004b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40023800 	.word	0x40023800
 8004b98:	08005fd0 	.word	0x08005fd0

08004b9c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d105      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d035      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bc4:	4b62      	ldr	r3, [pc, #392]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bca:	f7fe fb9d 	bl	8003308 <HAL_GetTick>
 8004bce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bd2:	f7fe fb99 	bl	8003308 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e0b0      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004be4:	4b5b      	ldr	r3, [pc, #364]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	019a      	lsls	r2, r3, #6
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	071b      	lsls	r3, r3, #28
 8004bfc:	4955      	ldr	r1, [pc, #340]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c04:	4b52      	ldr	r3, [pc, #328]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c06:	2201      	movs	r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c0a:	f7fe fb7d 	bl	8003308 <HAL_GetTick>
 8004c0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c10:	e008      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c12:	f7fe fb79 	bl	8003308 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e090      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c24:	4b4b      	ldr	r3, [pc, #300]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0f0      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 8083 	beq.w	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	4b44      	ldr	r3, [pc, #272]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	4a43      	ldr	r2, [pc, #268]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4e:	4b41      	ldr	r3, [pc, #260]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c5a:	4b3f      	ldr	r3, [pc, #252]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a3e      	ldr	r2, [pc, #248]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c66:	f7fe fb4f 	bl	8003308 <HAL_GetTick>
 8004c6a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c6e:	f7fe fb4b 	bl	8003308 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e062      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c80:	4b35      	ldr	r3, [pc, #212]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0f0      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c8c:	4b31      	ldr	r3, [pc, #196]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c94:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d02f      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d028      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004caa:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cb4:	4b29      	ldr	r3, [pc, #164]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cba:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cc0:	4a24      	ldr	r2, [pc, #144]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cc6:	4b23      	ldr	r3, [pc, #140]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d114      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cd2:	f7fe fb19 	bl	8003308 <HAL_GetTick>
 8004cd6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd8:	e00a      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cda:	f7fe fb15 	bl	8003308 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e02a      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf0:	4b18      	ldr	r3, [pc, #96]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0ee      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d08:	d10d      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d0a:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1e:	490d      	ldr	r1, [pc, #52]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	608b      	str	r3, [r1, #8]
 8004d24:	e005      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	4a0a      	ldr	r2, [pc, #40]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d2c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d30:	6093      	str	r3, [r2, #8]
 8004d32:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3e:	4905      	ldr	r1, [pc, #20]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	42470068 	.word	0x42470068
 8004d54:	40023800 	.word	0x40023800
 8004d58:	40007000 	.word	0x40007000
 8004d5c:	42470e40 	.word	0x42470e40

08004d60 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e083      	b.n	8004e7a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	7f5b      	ldrb	r3, [r3, #29]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d105      	bne.n	8004d88 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fb fee4 	bl	8000b50 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	22ca      	movs	r2, #202	; 0xca
 8004d94:	625a      	str	r2, [r3, #36]	; 0x24
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2253      	movs	r2, #83	; 0x53
 8004d9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f897 	bl	8004ed2 <RTC_EnterInitMode>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	22ff      	movs	r2, #255	; 0xff
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2204      	movs	r2, #4
 8004db6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e05e      	b.n	8004e7a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dce:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6899      	ldr	r1, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68d2      	ldr	r2, [r2, #12]
 8004df6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6919      	ldr	r1, [r3, #16]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	041a      	lsls	r2, r3, #16
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e1a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10e      	bne.n	8004e48 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f829 	bl	8004e82 <HAL_RTC_WaitForSynchro>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d008      	beq.n	8004e48 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	22ff      	movs	r2, #255	; 0xff
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2204      	movs	r2, #4
 8004e42:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e018      	b.n	8004e7a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e56:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	22ff      	movs	r2, #255	; 0xff
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004e78:	2300      	movs	r3, #0
  }
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e9c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e9e:	f7fe fa33 	bl	8003308 <HAL_GetTick>
 8004ea2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004ea4:	e009      	b.n	8004eba <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ea6:	f7fe fa2f 	bl	8003308 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eb4:	d901      	bls.n	8004eba <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e007      	b.n	8004eca <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0ee      	beq.n	8004ea6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d119      	bne.n	8004f20 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ef6:	f7fe fa07 	bl	8003308 <HAL_GetTick>
 8004efa:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004efc:	e009      	b.n	8004f12 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004efe:	f7fe fa03 	bl	8003308 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f0c:	d901      	bls.n	8004f12 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e007      	b.n	8004f22 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0ee      	beq.n	8004efe <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b082      	sub	sp, #8
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e041      	b.n	8004fc0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7fb ff01 	bl	8000d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f000 f967 	bl	800523c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d122      	bne.n	8005024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d11b      	bne.n	8005024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0202 	mvn.w	r2, #2
 8004ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f8f8 	bl	8005200 <HAL_TIM_IC_CaptureCallback>
 8005010:	e005      	b.n	800501e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8ea 	bl	80051ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f8fb 	bl	8005214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b04      	cmp	r3, #4
 8005030:	d122      	bne.n	8005078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b04      	cmp	r3, #4
 800503e:	d11b      	bne.n	8005078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0204 	mvn.w	r2, #4
 8005048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2202      	movs	r2, #2
 800504e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f8ce 	bl	8005200 <HAL_TIM_IC_CaptureCallback>
 8005064:	e005      	b.n	8005072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f8c0 	bl	80051ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f8d1 	bl	8005214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b08      	cmp	r3, #8
 8005084:	d122      	bne.n	80050cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b08      	cmp	r3, #8
 8005092:	d11b      	bne.n	80050cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0208 	mvn.w	r2, #8
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2204      	movs	r2, #4
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f8a4 	bl	8005200 <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f896 	bl	80051ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f8a7 	bl	8005214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	2b10      	cmp	r3, #16
 80050d8:	d122      	bne.n	8005120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b10      	cmp	r3, #16
 80050e6:	d11b      	bne.n	8005120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0210 	mvn.w	r2, #16
 80050f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2208      	movs	r2, #8
 80050f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f87a 	bl	8005200 <HAL_TIM_IC_CaptureCallback>
 800510c:	e005      	b.n	800511a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f86c 	bl	80051ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f87d 	bl	8005214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b01      	cmp	r3, #1
 800512c:	d10e      	bne.n	800514c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b01      	cmp	r3, #1
 800513a:	d107      	bne.n	800514c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0201 	mvn.w	r2, #1
 8005144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f846 	bl	80051d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005156:	2b80      	cmp	r3, #128	; 0x80
 8005158:	d10e      	bne.n	8005178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005164:	2b80      	cmp	r3, #128	; 0x80
 8005166:	d107      	bne.n	8005178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f988 	bl	8005488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b40      	cmp	r3, #64	; 0x40
 8005184:	d10e      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b40      	cmp	r3, #64	; 0x40
 8005192:	d107      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800519c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f842 	bl	8005228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d10e      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d107      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0220 	mvn.w	r2, #32
 80051c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f952 	bl	8005474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a40      	ldr	r2, [pc, #256]	; (8005350 <TIM_Base_SetConfig+0x114>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d013      	beq.n	800527c <TIM_Base_SetConfig+0x40>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525a:	d00f      	beq.n	800527c <TIM_Base_SetConfig+0x40>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a3d      	ldr	r2, [pc, #244]	; (8005354 <TIM_Base_SetConfig+0x118>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00b      	beq.n	800527c <TIM_Base_SetConfig+0x40>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a3c      	ldr	r2, [pc, #240]	; (8005358 <TIM_Base_SetConfig+0x11c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d007      	beq.n	800527c <TIM_Base_SetConfig+0x40>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a3b      	ldr	r2, [pc, #236]	; (800535c <TIM_Base_SetConfig+0x120>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_Base_SetConfig+0x40>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a3a      	ldr	r2, [pc, #232]	; (8005360 <TIM_Base_SetConfig+0x124>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d108      	bne.n	800528e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a2f      	ldr	r2, [pc, #188]	; (8005350 <TIM_Base_SetConfig+0x114>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d02b      	beq.n	80052ee <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529c:	d027      	beq.n	80052ee <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a2c      	ldr	r2, [pc, #176]	; (8005354 <TIM_Base_SetConfig+0x118>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d023      	beq.n	80052ee <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a2b      	ldr	r2, [pc, #172]	; (8005358 <TIM_Base_SetConfig+0x11c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d01f      	beq.n	80052ee <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a2a      	ldr	r2, [pc, #168]	; (800535c <TIM_Base_SetConfig+0x120>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d01b      	beq.n	80052ee <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a29      	ldr	r2, [pc, #164]	; (8005360 <TIM_Base_SetConfig+0x124>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d017      	beq.n	80052ee <TIM_Base_SetConfig+0xb2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a28      	ldr	r2, [pc, #160]	; (8005364 <TIM_Base_SetConfig+0x128>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d013      	beq.n	80052ee <TIM_Base_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a27      	ldr	r2, [pc, #156]	; (8005368 <TIM_Base_SetConfig+0x12c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00f      	beq.n	80052ee <TIM_Base_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a26      	ldr	r2, [pc, #152]	; (800536c <TIM_Base_SetConfig+0x130>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00b      	beq.n	80052ee <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a25      	ldr	r2, [pc, #148]	; (8005370 <TIM_Base_SetConfig+0x134>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d007      	beq.n	80052ee <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a24      	ldr	r2, [pc, #144]	; (8005374 <TIM_Base_SetConfig+0x138>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d003      	beq.n	80052ee <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a23      	ldr	r2, [pc, #140]	; (8005378 <TIM_Base_SetConfig+0x13c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d108      	bne.n	8005300 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a0a      	ldr	r2, [pc, #40]	; (8005350 <TIM_Base_SetConfig+0x114>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d003      	beq.n	8005334 <TIM_Base_SetConfig+0xf8>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a0c      	ldr	r2, [pc, #48]	; (8005360 <TIM_Base_SetConfig+0x124>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d103      	bne.n	800533c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	615a      	str	r2, [r3, #20]
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40010000 	.word	0x40010000
 8005354:	40000400 	.word	0x40000400
 8005358:	40000800 	.word	0x40000800
 800535c:	40000c00 	.word	0x40000c00
 8005360:	40010400 	.word	0x40010400
 8005364:	40014000 	.word	0x40014000
 8005368:	40014400 	.word	0x40014400
 800536c:	40014800 	.word	0x40014800
 8005370:	40001800 	.word	0x40001800
 8005374:	40001c00 	.word	0x40001c00
 8005378:	40002000 	.word	0x40002000

0800537c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005390:	2302      	movs	r3, #2
 8005392:	e05a      	b.n	800544a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a21      	ldr	r2, [pc, #132]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d022      	beq.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e0:	d01d      	beq.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a1d      	ldr	r2, [pc, #116]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d018      	beq.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1b      	ldr	r2, [pc, #108]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d013      	beq.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a1a      	ldr	r2, [pc, #104]	; (8005464 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00e      	beq.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a18      	ldr	r2, [pc, #96]	; (8005468 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d009      	beq.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a17      	ldr	r2, [pc, #92]	; (800546c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d004      	beq.n	800541e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a15      	ldr	r2, [pc, #84]	; (8005470 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d10c      	bne.n	8005438 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	4313      	orrs	r3, r2
 800542e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40010000 	.word	0x40010000
 800545c:	40000400 	.word	0x40000400
 8005460:	40000800 	.word	0x40000800
 8005464:	40000c00 	.word	0x40000c00
 8005468:	40010400 	.word	0x40010400
 800546c:	40014000 	.word	0x40014000
 8005470:	40001800 	.word	0x40001800

08005474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e03f      	b.n	800552e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fb fdaa 	bl	800101c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2224      	movs	r2, #36	; 0x24
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fb3f 	bl	8005b64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695a      	ldr	r2, [r3, #20]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005504:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68da      	ldr	r2, [r3, #12]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005514:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	; 0x28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005558:	2300      	movs	r3, #0
 800555a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10d      	bne.n	800558a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b00      	cmp	r3, #0
 8005576:	d008      	beq.n	800558a <HAL_UART_IRQHandler+0x52>
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fa57 	bl	8005a36 <UART_Receive_IT>
      return;
 8005588:	e17c      	b.n	8005884 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 80b1 	beq.w	80056f4 <HAL_UART_IRQHandler+0x1bc>
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d105      	bne.n	80055a8 <HAL_UART_IRQHandler+0x70>
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 80a6 	beq.w	80056f4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <HAL_UART_IRQHandler+0x90>
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	f043 0201 	orr.w	r2, r3, #1
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <HAL_UART_IRQHandler+0xb0>
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	f043 0202 	orr.w	r2, r3, #2
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_UART_IRQHandler+0xd0>
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	f043 0204 	orr.w	r2, r3, #4
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00f      	beq.n	8005632 <HAL_UART_IRQHandler+0xfa>
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	d104      	bne.n	8005626 <HAL_UART_IRQHandler+0xee>
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f043 0208 	orr.w	r2, r3, #8
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 811f 	beq.w	800587a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <HAL_UART_IRQHandler+0x11e>
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f9f0 	bl	8005a36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005660:	2b40      	cmp	r3, #64	; 0x40
 8005662:	bf0c      	ite	eq
 8005664:	2301      	moveq	r3, #1
 8005666:	2300      	movne	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <HAL_UART_IRQHandler+0x146>
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d031      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f930 	bl	80058e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b40      	cmp	r3, #64	; 0x40
 8005690:	d123      	bne.n	80056da <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695a      	ldr	r2, [r3, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d013      	beq.n	80056d2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	4a77      	ldr	r2, [pc, #476]	; (800588c <HAL_UART_IRQHandler+0x354>)
 80056b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fd ffd7 	bl	800366a <HAL_DMA_Abort_IT>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d016      	beq.n	80056f0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056cc:	4610      	mov	r0, r2
 80056ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d0:	e00e      	b.n	80056f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f8f0 	bl	80058b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d8:	e00a      	b.n	80056f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f8ec 	bl	80058b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e0:	e006      	b.n	80056f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f8e8 	bl	80058b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80056ee:	e0c4      	b.n	800587a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f0:	bf00      	nop
    return;
 80056f2:	e0c2      	b.n	800587a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	f040 80a2 	bne.w	8005842 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b00      	cmp	r3, #0
 8005706:	f000 809c 	beq.w	8005842 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8096 	beq.w	8005842 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005736:	2b40      	cmp	r3, #64	; 0x40
 8005738:	d14f      	bne.n	80057da <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005744:	8a3b      	ldrh	r3, [r7, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8099 	beq.w	800587e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005750:	8a3a      	ldrh	r2, [r7, #16]
 8005752:	429a      	cmp	r2, r3
 8005754:	f080 8093 	bcs.w	800587e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8a3a      	ldrh	r2, [r7, #16]
 800575c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005768:	d02b      	beq.n	80057c2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68da      	ldr	r2, [r3, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005778:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695a      	ldr	r2, [r3, #20]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005798:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0210 	bic.w	r2, r2, #16
 80057b6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fd fee4 	bl	800358a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	4619      	mov	r1, r3
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f87a 	bl	80058cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80057d8:	e051      	b.n	800587e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d047      	beq.n	8005882 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80057f2:	8a7b      	ldrh	r3, [r7, #18]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d044      	beq.n	8005882 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005806:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695a      	ldr	r2, [r3, #20]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0201 	bic.w	r2, r2, #1
 8005816:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0210 	bic.w	r2, r2, #16
 8005834:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005836:	8a7b      	ldrh	r3, [r7, #18]
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f846 	bl	80058cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005840:	e01f      	b.n	8005882 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_UART_IRQHandler+0x326>
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f885 	bl	8005966 <UART_Transmit_IT>
    return;
 800585c:	e012      	b.n	8005884 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00d      	beq.n	8005884 <HAL_UART_IRQHandler+0x34c>
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d008      	beq.n	8005884 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f8c7 	bl	8005a06 <UART_EndTransmit_IT>
    return;
 8005878:	e004      	b.n	8005884 <HAL_UART_IRQHandler+0x34c>
    return;
 800587a:	bf00      	nop
 800587c:	e002      	b.n	8005884 <HAL_UART_IRQHandler+0x34c>
      return;
 800587e:	bf00      	nop
 8005880:	e000      	b.n	8005884 <HAL_UART_IRQHandler+0x34c>
      return;
 8005882:	bf00      	nop
  }
}
 8005884:	3728      	adds	r7, #40	; 0x28
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	0800593f 	.word	0x0800593f

08005890 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695a      	ldr	r2, [r3, #20]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0201 	bic.w	r2, r2, #1
 800590a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005910:	2b01      	cmp	r3, #1
 8005912:	d107      	bne.n	8005924 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0210 	bic.w	r2, r2, #16
 8005922:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005932:	bf00      	nop
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7ff ffad 	bl	80058b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005966:	b480      	push	{r7}
 8005968:	b085      	sub	sp, #20
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b21      	cmp	r3, #33	; 0x21
 8005978:	d13e      	bne.n	80059f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005982:	d114      	bne.n	80059ae <UART_Transmit_IT+0x48>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d110      	bne.n	80059ae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	1c9a      	adds	r2, r3, #2
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	621a      	str	r2, [r3, #32]
 80059ac:	e008      	b.n	80059c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	1c59      	adds	r1, r3, #1
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6211      	str	r1, [r2, #32]
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4619      	mov	r1, r3
 80059ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10f      	bne.n	80059f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	e000      	b.n	80059fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059f8:	2302      	movs	r3, #2
  }
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff ff32 	bl	8005890 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b22      	cmp	r3, #34	; 0x22
 8005a48:	f040 8087 	bne.w	8005b5a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a54:	d117      	bne.n	8005a86 <UART_Receive_IT+0x50>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d113      	bne.n	8005a86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	1c9a      	adds	r2, r3, #2
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	629a      	str	r2, [r3, #40]	; 0x28
 8005a84:	e026      	b.n	8005ad4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a98:	d007      	beq.n	8005aaa <UART_Receive_IT+0x74>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10a      	bne.n	8005ab8 <UART_Receive_IT+0x82>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	e008      	b.n	8005aca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d136      	bne.n	8005b56 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0220 	bic.w	r2, r2, #32
 8005af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695a      	ldr	r2, [r3, #20]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0201 	bic.w	r2, r2, #1
 8005b16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d10e      	bne.n	8005b46 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0210 	bic.w	r2, r2, #16
 8005b36:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff fec4 	bl	80058cc <HAL_UARTEx_RxEventCallback>
 8005b44:	e002      	b.n	8005b4c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff feac 	bl	80058a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e002      	b.n	8005b5c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	e000      	b.n	8005b5c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005b5a:	2302      	movs	r3, #2
  }
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b68:	b09f      	sub	sp, #124	; 0x7c
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b7a:	68d9      	ldr	r1, [r3, #12]
 8005b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	ea40 0301 	orr.w	r3, r0, r1
 8005b84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	431a      	orrs	r2, r3
 8005b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ba8:	f021 010c 	bic.w	r1, r1, #12
 8005bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bb2:	430b      	orrs	r3, r1
 8005bb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc2:	6999      	ldr	r1, [r3, #24]
 8005bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	ea40 0301 	orr.w	r3, r0, r1
 8005bcc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4bc5      	ldr	r3, [pc, #788]	; (8005ee8 <UART_SetConfig+0x384>)
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d004      	beq.n	8005be2 <UART_SetConfig+0x7e>
 8005bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	4bc3      	ldr	r3, [pc, #780]	; (8005eec <UART_SetConfig+0x388>)
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d103      	bne.n	8005bea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005be2:	f7fe ffc7 	bl	8004b74 <HAL_RCC_GetPCLK2Freq>
 8005be6:	6778      	str	r0, [r7, #116]	; 0x74
 8005be8:	e002      	b.n	8005bf0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bea:	f7fe ffaf 	bl	8004b4c <HAL_RCC_GetPCLK1Freq>
 8005bee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf8:	f040 80b6 	bne.w	8005d68 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bfe:	461c      	mov	r4, r3
 8005c00:	f04f 0500 	mov.w	r5, #0
 8005c04:	4622      	mov	r2, r4
 8005c06:	462b      	mov	r3, r5
 8005c08:	1891      	adds	r1, r2, r2
 8005c0a:	6439      	str	r1, [r7, #64]	; 0x40
 8005c0c:	415b      	adcs	r3, r3
 8005c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c14:	1912      	adds	r2, r2, r4
 8005c16:	eb45 0303 	adc.w	r3, r5, r3
 8005c1a:	f04f 0000 	mov.w	r0, #0
 8005c1e:	f04f 0100 	mov.w	r1, #0
 8005c22:	00d9      	lsls	r1, r3, #3
 8005c24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c28:	00d0      	lsls	r0, r2, #3
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	1911      	adds	r1, r2, r4
 8005c30:	6639      	str	r1, [r7, #96]	; 0x60
 8005c32:	416b      	adcs	r3, r5
 8005c34:	667b      	str	r3, [r7, #100]	; 0x64
 8005c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	1891      	adds	r1, r2, r2
 8005c42:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c44:	415b      	adcs	r3, r3
 8005c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005c50:	f7fa faba 	bl	80001c8 <__aeabi_uldivmod>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4ba5      	ldr	r3, [pc, #660]	; (8005ef0 <UART_SetConfig+0x38c>)
 8005c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	011e      	lsls	r6, r3, #4
 8005c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c64:	461c      	mov	r4, r3
 8005c66:	f04f 0500 	mov.w	r5, #0
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	1891      	adds	r1, r2, r2
 8005c70:	6339      	str	r1, [r7, #48]	; 0x30
 8005c72:	415b      	adcs	r3, r3
 8005c74:	637b      	str	r3, [r7, #52]	; 0x34
 8005c76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c7a:	1912      	adds	r2, r2, r4
 8005c7c:	eb45 0303 	adc.w	r3, r5, r3
 8005c80:	f04f 0000 	mov.w	r0, #0
 8005c84:	f04f 0100 	mov.w	r1, #0
 8005c88:	00d9      	lsls	r1, r3, #3
 8005c8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c8e:	00d0      	lsls	r0, r2, #3
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	1911      	adds	r1, r2, r4
 8005c96:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c98:	416b      	adcs	r3, r5
 8005c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	1891      	adds	r1, r2, r2
 8005ca8:	62b9      	str	r1, [r7, #40]	; 0x28
 8005caa:	415b      	adcs	r3, r3
 8005cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cb2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005cb6:	f7fa fa87 	bl	80001c8 <__aeabi_uldivmod>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4b8c      	ldr	r3, [pc, #560]	; (8005ef0 <UART_SetConfig+0x38c>)
 8005cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	2164      	movs	r1, #100	; 0x64
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	3332      	adds	r3, #50	; 0x32
 8005cd2:	4a87      	ldr	r2, [pc, #540]	; (8005ef0 <UART_SetConfig+0x38c>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ce0:	441e      	add	r6, r3
 8005ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f04f 0100 	mov.w	r1, #0
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	1894      	adds	r4, r2, r2
 8005cf0:	623c      	str	r4, [r7, #32]
 8005cf2:	415b      	adcs	r3, r3
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cfa:	1812      	adds	r2, r2, r0
 8005cfc:	eb41 0303 	adc.w	r3, r1, r3
 8005d00:	f04f 0400 	mov.w	r4, #0
 8005d04:	f04f 0500 	mov.w	r5, #0
 8005d08:	00dd      	lsls	r5, r3, #3
 8005d0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d0e:	00d4      	lsls	r4, r2, #3
 8005d10:	4622      	mov	r2, r4
 8005d12:	462b      	mov	r3, r5
 8005d14:	1814      	adds	r4, r2, r0
 8005d16:	653c      	str	r4, [r7, #80]	; 0x50
 8005d18:	414b      	adcs	r3, r1
 8005d1a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	461a      	mov	r2, r3
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	1891      	adds	r1, r2, r2
 8005d28:	61b9      	str	r1, [r7, #24]
 8005d2a:	415b      	adcs	r3, r3
 8005d2c:	61fb      	str	r3, [r7, #28]
 8005d2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005d36:	f7fa fa47 	bl	80001c8 <__aeabi_uldivmod>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4b6c      	ldr	r3, [pc, #432]	; (8005ef0 <UART_SetConfig+0x38c>)
 8005d40:	fba3 1302 	umull	r1, r3, r3, r2
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	2164      	movs	r1, #100	; 0x64
 8005d48:	fb01 f303 	mul.w	r3, r1, r3
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	3332      	adds	r3, #50	; 0x32
 8005d52:	4a67      	ldr	r2, [pc, #412]	; (8005ef0 <UART_SetConfig+0x38c>)
 8005d54:	fba2 2303 	umull	r2, r3, r2, r3
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	f003 0207 	and.w	r2, r3, #7
 8005d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4432      	add	r2, r6
 8005d64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d66:	e0b9      	b.n	8005edc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d6a:	461c      	mov	r4, r3
 8005d6c:	f04f 0500 	mov.w	r5, #0
 8005d70:	4622      	mov	r2, r4
 8005d72:	462b      	mov	r3, r5
 8005d74:	1891      	adds	r1, r2, r2
 8005d76:	6139      	str	r1, [r7, #16]
 8005d78:	415b      	adcs	r3, r3
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d80:	1912      	adds	r2, r2, r4
 8005d82:	eb45 0303 	adc.w	r3, r5, r3
 8005d86:	f04f 0000 	mov.w	r0, #0
 8005d8a:	f04f 0100 	mov.w	r1, #0
 8005d8e:	00d9      	lsls	r1, r3, #3
 8005d90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d94:	00d0      	lsls	r0, r2, #3
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	eb12 0804 	adds.w	r8, r2, r4
 8005d9e:	eb43 0905 	adc.w	r9, r3, r5
 8005da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f04f 0100 	mov.w	r1, #0
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	008b      	lsls	r3, r1, #2
 8005db6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005dba:	0082      	lsls	r2, r0, #2
 8005dbc:	4640      	mov	r0, r8
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	f7fa fa02 	bl	80001c8 <__aeabi_uldivmod>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4b49      	ldr	r3, [pc, #292]	; (8005ef0 <UART_SetConfig+0x38c>)
 8005dca:	fba3 2302 	umull	r2, r3, r3, r2
 8005dce:	095b      	lsrs	r3, r3, #5
 8005dd0:	011e      	lsls	r6, r3, #4
 8005dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f04f 0100 	mov.w	r1, #0
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	1894      	adds	r4, r2, r2
 8005de0:	60bc      	str	r4, [r7, #8]
 8005de2:	415b      	adcs	r3, r3
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dea:	1812      	adds	r2, r2, r0
 8005dec:	eb41 0303 	adc.w	r3, r1, r3
 8005df0:	f04f 0400 	mov.w	r4, #0
 8005df4:	f04f 0500 	mov.w	r5, #0
 8005df8:	00dd      	lsls	r5, r3, #3
 8005dfa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005dfe:	00d4      	lsls	r4, r2, #3
 8005e00:	4622      	mov	r2, r4
 8005e02:	462b      	mov	r3, r5
 8005e04:	1814      	adds	r4, r2, r0
 8005e06:	64bc      	str	r4, [r7, #72]	; 0x48
 8005e08:	414b      	adcs	r3, r1
 8005e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f04f 0100 	mov.w	r1, #0
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	f04f 0300 	mov.w	r3, #0
 8005e1e:	008b      	lsls	r3, r1, #2
 8005e20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e24:	0082      	lsls	r2, r0, #2
 8005e26:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005e2a:	f7fa f9cd 	bl	80001c8 <__aeabi_uldivmod>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	4b2f      	ldr	r3, [pc, #188]	; (8005ef0 <UART_SetConfig+0x38c>)
 8005e34:	fba3 1302 	umull	r1, r3, r3, r2
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	2164      	movs	r1, #100	; 0x64
 8005e3c:	fb01 f303 	mul.w	r3, r1, r3
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	3332      	adds	r3, #50	; 0x32
 8005e46:	4a2a      	ldr	r2, [pc, #168]	; (8005ef0 <UART_SetConfig+0x38c>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	095b      	lsrs	r3, r3, #5
 8005e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e52:	441e      	add	r6, r3
 8005e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e56:	4618      	mov	r0, r3
 8005e58:	f04f 0100 	mov.w	r1, #0
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	1894      	adds	r4, r2, r2
 8005e62:	603c      	str	r4, [r7, #0]
 8005e64:	415b      	adcs	r3, r3
 8005e66:	607b      	str	r3, [r7, #4]
 8005e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e6c:	1812      	adds	r2, r2, r0
 8005e6e:	eb41 0303 	adc.w	r3, r1, r3
 8005e72:	f04f 0400 	mov.w	r4, #0
 8005e76:	f04f 0500 	mov.w	r5, #0
 8005e7a:	00dd      	lsls	r5, r3, #3
 8005e7c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e80:	00d4      	lsls	r4, r2, #3
 8005e82:	4622      	mov	r2, r4
 8005e84:	462b      	mov	r3, r5
 8005e86:	eb12 0a00 	adds.w	sl, r2, r0
 8005e8a:	eb43 0b01 	adc.w	fp, r3, r1
 8005e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f04f 0100 	mov.w	r1, #0
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	008b      	lsls	r3, r1, #2
 8005ea2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ea6:	0082      	lsls	r2, r0, #2
 8005ea8:	4650      	mov	r0, sl
 8005eaa:	4659      	mov	r1, fp
 8005eac:	f7fa f98c 	bl	80001c8 <__aeabi_uldivmod>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <UART_SetConfig+0x38c>)
 8005eb6:	fba3 1302 	umull	r1, r3, r3, r2
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	2164      	movs	r1, #100	; 0x64
 8005ebe:	fb01 f303 	mul.w	r3, r1, r3
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	3332      	adds	r3, #50	; 0x32
 8005ec8:	4a09      	ldr	r2, [pc, #36]	; (8005ef0 <UART_SetConfig+0x38c>)
 8005eca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ece:	095b      	lsrs	r3, r3, #5
 8005ed0:	f003 020f 	and.w	r2, r3, #15
 8005ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4432      	add	r2, r6
 8005eda:	609a      	str	r2, [r3, #8]
}
 8005edc:	bf00      	nop
 8005ede:	377c      	adds	r7, #124	; 0x7c
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40011000 	.word	0x40011000
 8005eec:	40011400 	.word	0x40011400
 8005ef0:	51eb851f 	.word	0x51eb851f

08005ef4 <__libc_init_array>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	4d0d      	ldr	r5, [pc, #52]	; (8005f2c <__libc_init_array+0x38>)
 8005ef8:	4c0d      	ldr	r4, [pc, #52]	; (8005f30 <__libc_init_array+0x3c>)
 8005efa:	1b64      	subs	r4, r4, r5
 8005efc:	10a4      	asrs	r4, r4, #2
 8005efe:	2600      	movs	r6, #0
 8005f00:	42a6      	cmp	r6, r4
 8005f02:	d109      	bne.n	8005f18 <__libc_init_array+0x24>
 8005f04:	4d0b      	ldr	r5, [pc, #44]	; (8005f34 <__libc_init_array+0x40>)
 8005f06:	4c0c      	ldr	r4, [pc, #48]	; (8005f38 <__libc_init_array+0x44>)
 8005f08:	f000 f820 	bl	8005f4c <_init>
 8005f0c:	1b64      	subs	r4, r4, r5
 8005f0e:	10a4      	asrs	r4, r4, #2
 8005f10:	2600      	movs	r6, #0
 8005f12:	42a6      	cmp	r6, r4
 8005f14:	d105      	bne.n	8005f22 <__libc_init_array+0x2e>
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
 8005f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f1c:	4798      	blx	r3
 8005f1e:	3601      	adds	r6, #1
 8005f20:	e7ee      	b.n	8005f00 <__libc_init_array+0xc>
 8005f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f26:	4798      	blx	r3
 8005f28:	3601      	adds	r6, #1
 8005f2a:	e7f2      	b.n	8005f12 <__libc_init_array+0x1e>
 8005f2c:	08008ed8 	.word	0x08008ed8
 8005f30:	08008ed8 	.word	0x08008ed8
 8005f34:	08008ed8 	.word	0x08008ed8
 8005f38:	08008edc 	.word	0x08008edc

08005f3c <memset>:
 8005f3c:	4402      	add	r2, r0
 8005f3e:	4603      	mov	r3, r0
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d100      	bne.n	8005f46 <memset+0xa>
 8005f44:	4770      	bx	lr
 8005f46:	f803 1b01 	strb.w	r1, [r3], #1
 8005f4a:	e7f9      	b.n	8005f40 <memset+0x4>

08005f4c <_init>:
 8005f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4e:	bf00      	nop
 8005f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f52:	bc08      	pop	{r3}
 8005f54:	469e      	mov	lr, r3
 8005f56:	4770      	bx	lr

08005f58 <_fini>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	bf00      	nop
 8005f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5e:	bc08      	pop	{r3}
 8005f60:	469e      	mov	lr, r3
 8005f62:	4770      	bx	lr
